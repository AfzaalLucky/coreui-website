{"componentChunkName":"component---src-components-details-template-js","path":"/components/CModal/","result":{"data":{"site":{"siteMetadata":{"ver":"3.0"}},"allFile":{"nodes":[{"id":"dec1503b-6ab9-53fd-9566-68748450a2a9","name":"-CDropdownCustom-org","fields":{"code":"import React, {useEffect, useRef} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules, omit, keyCodes} from './Shared/helper.js';\r\nimport {Manager} from 'react-popper';\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CPopperContentWrapper\r\n\r\nclass CPopperContentWrapper extends React.Component {\r\n  getChildContext(){\r\n    return this.context;\r\n  }\r\n  render(){\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nCPopperContentWrapper.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nCPopperContentWrapper.contextType = Context;\r\n\r\nCPopperContentWrapper.childContextTypes = {\r\n  toggle: PropTypes.func.isRequired,\r\n  isOpen: PropTypes.bool.isRequired,\r\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']).isRequired,\r\n  inNavbar: PropTypes.bool.isRequired\r\n};\r\n\r\n//component - CoreUI / CDropdownCustom\r\n\r\nconst CDropdownCustom = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    show,\r\n    group,\r\n    size,\r\n    inNav,\r\n    setActiveFromChild,\r\n    active,\r\n    addonType,\r\n    ...attributes\r\n  } = omit(props, ['toggle', 'disabled', 'inNavbar', 'direction']);\r\n\r\n  const fields = useRef({\r\n    firstRender: true,\r\n    ref: {current: null}\r\n  }).current;\r\n\r\n  const reference = (r)=>{\r\n    fields.ref.current = r;\r\n    innerRef && innerRef(r);\r\n  }\r\n\r\n  const getContainer = ()=>{\r\n    if (fields._$container) return fields._$container;\r\n    fields._$container = ReactDOM.findDOMNode(fields.ref.current);\r\n    return fields._$container;\r\n  }\r\n\r\n  const getMenuCtrl = ()=>{\r\n    if (fields._$menuCtrl) return fields._$menuCtrl;\r\n    fields._$menuCtrl = getContainer().querySelector('[aria-expanded]');\r\n    return fields._$menuCtrl;\r\n  }\r\n\r\n  const getMenuItems = ()=>{\r\n    return [].slice.call(getContainer().querySelectorAll('[role=\"menuitem\"]'));\r\n  }\r\n\r\n  const addEvents = ()=>{\r\n    ['click', 'touchstart', 'keyup'].forEach(event =>\r\n      document.addEventListener(event, handleDocumentClick, true)\r\n    );\r\n    fields.handleDocumentClick = handleDocumentClick;\r\n  }\r\n\r\n  const removeEvents = ()=>{\r\n    ['click', 'touchstart', 'keyup'].forEach(event =>\r\n      document.removeEventListener(event, fields.handleDocumentClick, true)\r\n    );\r\n  }\r\n\r\n  const handleDocumentClick = e=>{\r\n    if (e && (e.which === 3 || (e.type === 'keyup' && e.which !== keyCodes.tab))) return;\r\n    const container = getContainer();\r\n    if (container.contains(e.target) && container !== e.target && (e.type !== 'keyup' || e.which === keyCodes.tab)) {\r\n      return;\r\n    }\r\n    toggle(e);\r\n  }\r\n\r\n  const handleKeyDown = e=>{\r\n    if (\r\n      /input|textarea/i.test(e.target.tagName)\r\n      || (keyCodes.tab === e.which && e.target.getAttribute('role') !== 'menuitem')\r\n    ) {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    if (fields.disabled) return;\r\n    if (getMenuCtrl() === e.target) {\r\n      if (\r\n        !fields.isOpen\r\n        && ([keyCodes.space, keyCodes.enter, keyCodes.up, keyCodes.down].indexOf(e.which) > -1)\r\n      ) {\r\n        toggle(e);\r\n        setTimeout(()=>getMenuItems()[0].focus());\r\n      }\r\n    }\r\n    if (fields.isOpen && (e.target.getAttribute('role') === 'menuitem')) {\r\n      if ([keyCodes.tab, keyCodes.esc].indexOf(e.which) > -1) {\r\n        toggle(e);\r\n        getMenuCtrl().focus();\r\n      } else if ([keyCodes.space, keyCodes.enter].indexOf(e.which) > -1) {\r\n        e.target.click();\r\n        getMenuCtrl().focus();\r\n      } else if (\r\n        [keyCodes.down, keyCodes.up].indexOf(e.which) > -1\r\n        || ([keyCodes.n, keyCodes.p].indexOf(e.which) > -1 && e.ctrlKey)\r\n      ) {\r\n        const $menuitems = getMenuItems();\r\n        let index = $menuitems.indexOf(e.target);\r\n        if (keyCodes.up === e.which || (keyCodes.p === e.which && e.ctrlKey)) {\r\n          index = index !== 0 ? index - 1 : $menuitems.length - 1;\r\n        } else if (keyCodes.down === e.which || (keyCodes.n === e.which && e.ctrlKey)) {\r\n          index = index === $menuitems.length - 1 ? 0 : index + 1;\r\n        }\r\n        $menuitems[index].focus();\r\n      } else if (keyCodes.end === e.which) {\r\n        const $menuitems = getMenuItems();\r\n        $menuitems[$menuitems.length - 1].focus();\r\n      } else if (keyCodes.home === e.which) {\r\n        const $menuitems = getMenuItems();\r\n        $menuitems[0].focus();\r\n      } else if ((e.which >= 48) && (e.which <= 90)) {\r\n        const $menuitems = getMenuItems();\r\n        const charPressed = String.fromCharCode(e.which).toLowerCase();\r\n        for (let i = 0; i < $menuitems.length; i += 1) {\r\n          const firstLetter = $menuitems[i].textContent && $menuitems[i].textContent[0].toLowerCase();\r\n          if (firstLetter === charPressed) {\r\n            $menuitems[i].focus();\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleProps = ()=>{\r\n    if (props.show) {\r\n      addEvents();\r\n    } else {\r\n      removeEvents();\r\n    }\r\n  }\r\n\r\n  const toggle = e=>{\r\n    if (fields.disabled) {\r\n      return e && e.preventDefault();\r\n    }\r\n    return props.toggle(e);\r\n  }\r\n\r\n  //effect\r\n\r\n  useEffect(() => {\r\n    if (fields.firstRender){\r\n      return\r\n    }\r\n    handleProps();\r\n  }, [props.show]);\r\n\r\n  useEffect(() => {\r\n    fields.firstRender = false;\r\n    handleProps();\r\n    return function cleanup() {\r\n      removeEvents();\r\n    };\r\n  }, []);\r\n\r\n  //render\r\n\r\n  fields.disabled = props.disabled;\r\n  fields.isOpen = props.show;\r\n\r\n  const direction = props.direction; //(props.direction === 'down' && dropup) ? 'up' :\r\n\r\n  attributes.tag = attributes.tag || (inNav ? 'li' : 'div');\r\n\r\n  let subItemIsActive = false;\r\n\r\n  if (setActiveFromChild){\r\n    React.Children.map(props.children[1].props.children,\r\n      (dropdownItem) => {\r\n        if (dropdownItem && dropdownItem.props.active) subItemIsActive = true;\r\n      }\r\n    );\r\n  }\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    direction !== 'down' && `drop${direction}`,\r\n    inNav && active ? 'active' : false,\r\n    setActiveFromChild && subItemIsActive ? 'active' : false,\r\n    {\r\n      [`input-group-${addonType}`]: addonType,\r\n      'btn-group': group,\r\n      [`btn-group-${size}`]: !!size,\r\n      'dropdown': !group && !addonType,\r\n      'show': show,\r\n      'nav-item': inNav\r\n    }\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Context.Provider value={{\r\n      toggle: props.toggle,\r\n      isOpen: props.show,\r\n      direction: props.direction, //(props.direction === 'down' && props.dropup) ? 'up' :\r\n      inNavbar: props.inNavbar,\r\n    }}>\r\n      <CPopperContentWrapper>\r\n        <Manager {...attributes} className={classes} onKeyDown={handleKeyDown} ref={reference} />\r\n      </CPopperContentWrapper>\r\n    </Context.Provider>\r\n  );\r\n\r\n}\r\n\r\nCDropdownCustom.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n  group: PropTypes.bool,\r\n  show: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  active: PropTypes.bool,\r\n  addonType: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['prepend', 'append'])]),\r\n  size: PropTypes.string,\r\n  toggle: PropTypes.func,\r\n  inNav: PropTypes.bool,\r\n  inNavbar: PropTypes.bool,\r\n  setActiveFromChild: PropTypes.bool,\r\n};\r\n\r\nCDropdownCustom.defaultProps = {\r\n  show: false,\r\n  direction: 'down',\r\n  active: false,\r\n  addonType: false,\r\n  inNav: false,\r\n  inNavbar: false,\r\n  setActiveFromChild: false,\r\n  group: true\r\n};\r\n\r\nexport default CDropdownCustom;\r\n"}},{"id":"9dd5624b-e0fe-5886-8aeb-161cd793a961","name":"-CDropdownMenu-org","fields":{"code":"import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport {Popper} from 'react-popper';\r\nimport {Context} from './CDropdownCustom';\r\n\r\n//component - CoreUI / CDropdownMenu\r\n\r\nconst CDropdownMenu = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    right,\r\n    tag,\r\n    flip,\r\n    modifiers,\r\n    persist,\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const noFlipModifier = { flip: { enabled: false } };\r\n\r\n  const directionPositionMap = {\r\n    up: 'top',\r\n    left: 'left',\r\n    right: 'right',\r\n    down: 'bottom',\r\n  };\r\n\r\n  const context = useContext(Context);\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'dropdown-menu',\r\n    {\r\n      'dropdown-menu-right': right,\r\n      'show': context.isOpen,\r\n    }\r\n  ), cssModule);\r\n\r\n  let Tag = tag;\r\n\r\n  if (persist || (context.isOpen && !context.inNavbar)) {\r\n    Tag = Popper;\r\n    const position1 = directionPositionMap[context.direction] || 'bottom';\r\n    const position2 = right ? 'end' : 'start';\r\n    attributes.placement = `${position1}-${position2}`;\r\n    attributes.component = tag;\r\n    attributes.modifiers = !flip ? {\r\n      ...modifiers,\r\n      ...noFlipModifier,\r\n    } : modifiers;\r\n  }\r\n\r\n  return (\r\n    <Tag\r\n      tabIndex=\"-1\"\r\n      role=\"menu\"\r\n      {...attributes}\r\n      aria-hidden={!context.isOpen}\r\n      className={classes}\r\n      x-placement={attributes.placement}\r\n      ref={innerRef}\r\n    />\r\n  );\r\n\r\n}\r\n\r\n\r\nCDropdownMenu.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node.isRequired,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  right: PropTypes.bool,\r\n  flip: PropTypes.bool,\r\n  modifiers: PropTypes.object,\r\n  persist: PropTypes.bool,\r\n};\r\n\r\nCDropdownMenu.defaultProps = {\r\n  tag: 'div',\r\n  flip: true,\r\n};\r\n\r\nexport default CDropdownMenu;\r\n"}},{"id":"818d9837-7292-566a-9d49-adeef17f6296","name":"-CDropdownToggle-org","fields":{"code":"import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport {Target} from 'react-popper';\r\nimport CButton from './CButton';\r\nimport {Context} from './CDropdownCustom';\r\n\r\n//component - CoreUI / CDropdownToggle\r\n\r\nconst CDropdownToggle = props=>{\r\n\r\n  const {\r\n    className,\r\n    color,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    caret,\r\n    split,\r\n    nav,\r\n    header,\r\n    tag,\r\n    togglerHtml,\r\n    ...attributes\r\n  } = props;\r\n  \r\n  const context = useContext(Context);\r\n\r\n  const onClick = e=>{\r\n    if (props.disabled) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    if (props.nav && !props.tag) {\r\n      e.preventDefault();\r\n    }\r\n    if (props.onClick) {\r\n      props.onClick(e);\r\n    }\r\n    context.toggle(e);\r\n  }\r\n\r\n  //render\r\n\r\n  const ariaLabel = attributes['aria-label'] || 'Toggle Dropdown';\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    {\r\n      'dropdown-toggle': caret || split,\r\n      'dropdown-toggle-split': split,\r\n      'nav-link': nav && !header,\r\n      'c-header-nav-link': nav && header\r\n    }\r\n  ), cssModule);\r\n\r\n  const children = togglerHtml || attributes.children || <span className=\"sr-only\">{ariaLabel}</span>;\r\n\r\n  let Tag;\r\n  let isButton = false;\r\n\r\n  if (nav  && !tag) {\r\n    Tag = 'a';\r\n    attributes.href = '#';\r\n  } else if (!tag) {\r\n    Tag = CButton;\r\n    attributes.color = color;\r\n    attributes.cssModule = cssModule;\r\n    isButton = true;\r\n  } else {\r\n    Tag = tag;\r\n  }\r\n\r\n  if (context.inNavbar) {\r\n    if (isButton)\r\n      return (\r\n        <Tag\r\n          {...attributes}\r\n          className={classes}\r\n          onClick={onClick}\r\n          aria-expanded={context.isOpen}\r\n        >\r\n          {children}\r\n        </Tag>\r\n      );\r\n    else\r\n      return (\r\n        <Tag\r\n          {...attributes}\r\n          className={classes}\r\n          onClick={onClick}\r\n          aria-expanded={context.isOpen}\r\n          ref={innerRef}\r\n        >\r\n          {children}\r\n        </Tag>\r\n      );\r\n  }\r\n\r\n  return (\r\n    <Target\r\n      {...attributes}\r\n      className={classes}\r\n      component={Tag}\r\n      onClick={onClick}\r\n      aria-expanded={context.isOpen}\r\n      ref={innerRef}\r\n    >\r\n      {children}\r\n    </Target>\r\n  );\r\n\r\n}\r\n\r\nCDropdownToggle.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  caret: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  'aria-haspopup': PropTypes.bool,\r\n  split: PropTypes.bool,\r\n  togglerHtml: PropTypes.node,\r\n  nav: PropTypes.bool,\r\n  header: PropTypes.bool,\r\n};\r\n\r\nCDropdownToggle.defaultProps = {\r\n  'aria-haspopup': true\r\n};\r\n\r\nexport default CDropdownToggle;\r\n"}},{"id":"d6871f2c-d4ec-5ac7-9e31-96d41f9eec17","name":"-CPopover-org","fields":{"code":"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CTooltipPopoverWrapper from './CTooltipPopoverWrapper';\r\n\r\n//component - CoreUI / CPopover\r\n\r\nconst CPopover = props=>{\r\n\r\n  let {\r\n    custom,\r\n    //\r\n    toggle,\r\n    show,\r\n    defaultOpen,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(defaultOpen || false);\r\n\r\n  if (!custom){\r\n    const userToggle = toggle;\r\n    toggle = (e)=>{\r\n      setIsOpen(!isOpen);\r\n      if (userToggle)\r\n        userToggle(e);\r\n    }\r\n    show = isOpen;\r\n  }\r\n\r\n  //render\r\n\r\n  const popperClasses = classNames(\r\n    'popover',\r\n    'show',\r\n    props.className\r\n  );\r\n\r\n  const classes = classNames(\r\n    'popover-inner',\r\n    props.innerClassName\r\n  );\r\n\r\n  return (\r\n    <CTooltipPopoverWrapper\r\n      {...attributes}\r\n      toggle={toggle}\r\n      show={show}\r\n      className={popperClasses}\r\n      innerClassName={classes}\r\n    />\r\n  );\r\n\r\n}\r\n\r\nCPopover.propTypes = {\r\n  ...CTooltipPopoverWrapper.propTypes,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  defaultOpen: PropTypes.bool,\r\n}\r\n\r\nCPopover.defaultProps = {\r\n  placement: 'right',\r\n  placementPrefix: 'bs-popover',\r\n  trigger: 'click',\r\n};\r\n\r\nexport default CPopover;\r\n"}},{"id":"bc806fe2-5488-5acd-92b3-710ca311bd7b","name":"-CPopover","fields":{"code":"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CTooltipPopoverWrapper from './CTooltipPopoverWrapper';\r\n\r\n//component - CoreUI / CPopover\r\n\r\nconst CPopover = props=>{\r\n\r\n  let {\r\n    custom,\r\n    //\r\n    toggle,\r\n    show,\r\n    defaultOpen,\r\n\r\n    content,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(defaultOpen || false);\r\n\r\n  if (!custom){\r\n    const userToggle = toggle;\r\n    toggle = (e)=>{\r\n      setIsOpen(!isOpen);\r\n      if (userToggle)\r\n        userToggle(e);\r\n    }\r\n    show = isOpen;\r\n  }\r\n\r\n  //render\r\n\r\n  const popperClasses = classNames(\r\n    'popover',\r\n    'show',\r\n    props.className\r\n  );\r\n\r\n  const classes = classNames(\r\n    'popover-inner',\r\n    props.innerClassName\r\n  );\r\n\r\n  //children, placement, modifiers and strategy\r\n  return (\r\n    <CTooltipPopoverWrapper\r\n      {...attributes}\r\n      reference = {content}\r\n    />\r\n  )\r\n\r\n  /*\r\n  return (\r\n    <CTooltipPopoverWrapper\r\n      {...attributes}\r\n      toggle={toggle}\r\n      show={show}\r\n      className={popperClasses}\r\n      innerClassName={classes}\r\n    />\r\n  );\r\n  */\r\n\r\n}\r\n\r\nCPopover.propTypes = {\r\n  ...CTooltipPopoverWrapper.propTypes,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  defaultOpen: PropTypes.bool,\r\n}\r\n\r\nCPopover.defaultProps = {\r\n  placement: 'right',\r\n  placementPrefix: 'bs-popover',\r\n  trigger: 'click',\r\n};\r\n\r\nexport default CPopover;\r\n"}},{"id":"c6887843-7d19-562a-9f8f-ca2db05fc304","name":"-CPopperContent-org","fields":{"code":"import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport classNames from 'classnames';\r\nimport {Arrow, Popper as ReactPopper} from 'react-popper';\r\nimport {getTarget, targetPropType, mapToCssModules, DOMElement, tagPropType} from './Shared/helper.js';\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CPopperContentWrapper\r\n\r\nclass CPopperContentWrapper extends React.Component {\r\n  getChildContext(){\r\n    return this.context;\r\n  }\r\n  render(){\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nCPopperContentWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n\r\nCPopperContentWrapper.contextType = Context;\r\n\r\nCPopperContentWrapper.childContextTypes = {\r\n  popperManager: PropTypes.object.isRequired\r\n};\r\n\r\n//component - CoreUI / CPopperContent\r\n\r\nconst CPopperContent = props=>{\r\n\r\n  const [placement, setPlacement] = useState();\r\n\r\n  const fields = useRef({\r\n    firstRender: true\r\n  }).current;\r\n\r\n  const setTargetNode = node=>{\r\n    fields.targetNode = node;\r\n  }\r\n\r\n  const getTargetNode = ()=>{\r\n    return fields.targetNode;\r\n  }\r\n\r\n  const getContainerNode = ()=>{\r\n    return getTarget(props.container);\r\n  }\r\n\r\n  const getRef = ref=>{\r\n    fields._element = ref;\r\n    props.innerRef && props.innerRef();\r\n  }\r\n\r\n  const handlePlacementChange = data=>{\r\n    if (placement !== data.placement) {\r\n      setPlacement(data.placement);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  //effect - update\r\n  useEffect(() => {\r\n    if (fields.firstRender)\r\n      return;\r\n    if (fields._element && fields._element.childNodes && fields._element.childNodes[0] && fields._element.childNodes[0].focus) {\r\n      fields._element.childNodes[0].focus();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fields.firstRender = false;\r\n  },\r\n  []);\r\n\r\n  //render\r\n\r\n  const renderChildren = ()=>{\r\n\r\n    const {\r\n      tag,\r\n      children,\r\n      className,\r\n      cssModule,\r\n      //\r\n      //show,\r\n      flip,\r\n      //target,\r\n      offset,\r\n      fallbackPlacement,\r\n      placementPrefix,\r\n      arrowClassName: _arrowClassName,\r\n      hideArrow,\r\n      //container,\r\n      modifiers,\r\n      boundariesElement,\r\n      ...attributes\r\n    } = props;\r\n\r\n    const arrowClassName = mapToCssModules(classNames(\r\n      'arrow',\r\n      _arrowClassName\r\n    ), cssModule);\r\n\r\n    const placement2 = (placement || attributes.placement).split('-')[0];\r\n\r\n    const popperClassName = mapToCssModules(classNames(\r\n      className, //8 _popperClassName\r\n      placementPrefix ? `${placementPrefix}-${placement2}` : placement2\r\n    ), props.cssModule);\r\n\r\n    const extendedModifiers = {\r\n      offset: { offset },\r\n      flip: { enabled: flip, behavior: fallbackPlacement },\r\n      preventOverflow: { boundariesElement },\r\n      update: {\r\n        enabled: true,\r\n        order: 950,\r\n        fn: handlePlacementChange,\r\n      },\r\n      ...modifiers,\r\n    };\r\n\r\n    return (\r\n      <Context.Provider value={{popperManager: {\r\n        setTargetNode: setTargetNode,\r\n        getTargetNode: getTargetNode,\r\n      }}}>\r\n        <CPopperContentWrapper>\r\n          <ReactPopper\r\n            modifiers={extendedModifiers}\r\n            {...attributes}\r\n            component={tag}\r\n            className={popperClassName}\r\n            x-placement={placement || attributes.placement}\r\n          >\r\n            {children}\r\n            {!hideArrow && <Arrow className={arrowClassName} />}\r\n          </ReactPopper>\r\n        </CPopperContentWrapper>\r\n      </Context.Provider>\r\n    );\r\n\r\n  }\r\n\r\n  renderChildren.propTypes = {\r\n    tag: tagPropType,\r\n    children: PropTypes.node.isRequired,\r\n    className: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n    //\r\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n    placement: PropTypes.string,\r\n    placementPrefix: PropTypes.string,\r\n    arrowClassName: PropTypes.string,\r\n    hideArrow: PropTypes.bool,\r\n    show: PropTypes.bool.isRequired,\r\n    offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    fallbackPlacement: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n    flip: PropTypes.bool,\r\n    container: targetPropType,\r\n    target: targetPropType.isRequired,\r\n    modifiers: PropTypes.object,\r\n    boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\r\n  };\r\n\r\n  setTargetNode(getTarget(props.target));\r\n\r\n  if (props.show) {\r\n    return props.container === 'inline' ?\r\n      renderChildren() :\r\n      ReactDOM.createPortal((<div ref={getRef}>{renderChildren()}</div>), getContainerNode());\r\n  }\r\n\r\n  return null;\r\n\r\n}\r\n\r\nCPopperContent.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node.isRequired,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  placement: PropTypes.string,\r\n  placementPrefix: PropTypes.string,\r\n  arrowClassName: PropTypes.string,\r\n  hideArrow: PropTypes.bool,\r\n  show: PropTypes.bool.isRequired,\r\n  offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  fallbackPlacement: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  flip: PropTypes.bool,\r\n  container: targetPropType,\r\n  target: targetPropType.isRequired,\r\n  modifiers: PropTypes.object,\r\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\r\n};\r\n\r\nCPopperContent.defaultProps = {\r\n  boundariesElement: 'scrollParent',\r\n  placement: 'auto',\r\n  hideArrow: false,\r\n  show: false,\r\n  offset: 0,\r\n  fallbackPlacement: 'flip',\r\n  flip: true,\r\n  container: 'body',\r\n  modifiers: {},\r\n};\r\n\r\nexport default CPopperContent;\r\n"}},{"id":"072d4d98-9cc2-5162-b0fb-319a816d3cab","name":"-CPopperContent","fields":{"code":"import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport classNames from 'classnames';\r\nimport {Arrow, Popper as ReactPopper} from 'react-popper';\r\nimport {getTarget, targetPropType, mapToCssModules, DOMElement, tagPropType} from './Shared/helper.js';\r\n\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CPopperContentWrapper\r\n// new popper\r\n\r\n\r\nclass CPopperContentWrapper extends React.Component {\r\n  getChildContext(){\r\n    return this.context;\r\n  }\r\n  render(){\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nCPopperContentWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n\r\nCPopperContentWrapper.contextType = Context;\r\n\r\nCPopperContentWrapper.childContextTypes = {\r\n  popperManager: PropTypes.object.isRequired\r\n};\r\n\r\n//component - CoreUI / CPopperContent\r\n\r\nconst CPopperContent = props=>{\r\n\r\n  const [placement, setPlacement] = useState();\r\n\r\n  const fields = useRef({firstRender: true}).current;\r\n\r\n  const setTargetNode = node=>{\r\n    fields.targetNode = node;\r\n  }\r\n  const getTargetNode = ()=>{\r\n    return fields.targetNode;\r\n  }\r\n  const getContainerNode = ()=>{\r\n    return getTarget(props.container);\r\n  }\r\n  const getRef = ref=>{\r\n    fields._element = ref;\r\n    props.innerRef && props.innerRef();\r\n  }\r\n  const handlePlacementChange = data=>{\r\n    if (placement !== data.placement) {\r\n      setPlacement(data.placement);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  //effect - update\r\n  useEffect(() => {\r\n    if (fields.firstRender)\r\n      return;\r\n    if (fields._element && fields._element.childNodes && fields._element.childNodes[0] && fields._element.childNodes[0].focus) {\r\n      fields._element.childNodes[0].focus();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fields.firstRender = false;\r\n  },\r\n  []);\r\n\r\n\r\n  //render\r\n\r\n  const renderChildren = ()=>{\r\n\r\n    const {\r\n      tag,\r\n      children,\r\n      className,\r\n      cssModule,\r\n      //\r\n      //show,\r\n      flip,\r\n      //target,\r\n      offset,\r\n      fallbackPlacement,\r\n      placementPrefix,\r\n      arrowClassName: _arrowClassName,\r\n      hideArrow,\r\n      //container,\r\n      modifiers,\r\n      boundariesElement,\r\n      ...attributes\r\n    } = props;\r\n\r\n    const arrowClassName = mapToCssModules(classNames(\r\n      'arrow',\r\n      _arrowClassName\r\n    ), cssModule);\r\n\r\n    const placement2 = (placement || attributes.placement).split('-')[0];\r\n\r\n    const popperClassName = mapToCssModules(classNames(\r\n      className, //8 _popperClassName\r\n      placementPrefix ? `${placementPrefix}-${placement2}` : placement2\r\n    ), props.cssModule);\r\n\r\n    const extendedModifiers = {\r\n      offset: { offset },\r\n      flip: { enabled: flip, behavior: fallbackPlacement },\r\n      preventOverflow: { boundariesElement },\r\n      update: {\r\n        enabled: true,\r\n        order: 950,\r\n        fn: handlePlacementChange,\r\n      },\r\n      ...modifiers,\r\n    };\r\n\r\n    return (\r\n      <Context.Provider value={{popperManager: {\r\n        setTargetNode: setTargetNode,\r\n        getTargetNode: getTargetNode,\r\n      }}}>\r\n\r\n      </Context.Provider>\r\n    );\r\n\r\n    /*\r\n    https://github.com/popperjs/react-popper\r\n\r\n    manager - wrapper, komunikacja\r\n    popper - okno // The Popper component accepts the properties children, placement, modifiers and strategy.\r\n    reference - klikacz\r\n    //\r\n    z createPortal - przenosi\r\n    virtualReferenceElement - gdy przekazujemy referencje\r\n\r\n\r\n    import { Manager, Reference, Popper } from 'react-popper';\r\n    const Example = () => (\r\n      <Manager>\r\n        <Reference>\r\n          {({ ref }) => (\r\n            <button type=\"button\" ref={ref}>\r\n              Reference element\r\n            </button>\r\n          )}\r\n        </Reference>\r\n        <Popper placement=\"right\">\r\n          {({ ref, style, placement, arrowProps }) => (\r\n            <div ref={ref} style={style} data-placement={placement}>\r\n              Popper element\r\n              <div ref={arrowProps.ref} style={arrowProps.style} />\r\n            </div>\r\n          )}\r\n        </Popper>\r\n      </Manager>\r\n\r\n    //\r\n\r\n    <Context.Provider value={{popperManager: {\r\n      setTargetNode: setTargetNode,\r\n      getTargetNode: getTargetNode,\r\n    }}}>\r\n      <CPopperContentWrapper>\r\n        <ReactPopper\r\n          modifiers={extendedModifiers}\r\n          {...attributes}\r\n          component={tag}\r\n          className={popperClassName}\r\n          x-placement={placement || attributes.placement}\r\n        >\r\n          {children}\r\n          {!hideArrow && <Arrow className={arrowClassName} />}\r\n        </ReactPopper>\r\n      </CPopperContentWrapper>\r\n    </Context.Provider>\r\n\r\n    Core\r\n\r\ninfo:\r\n\r\nKomponent\t\t\t{ }\t\t\t\t\tużycie\r\n\r\n\r\nCPopperContent\t\tArrow, Popper\t\t\tCDropdownCustom, CPopperTargetHelper, CTooltipPopoverWrapper\r\n\r\n\t<ReactPopper\r\n            modifiers={extendedModifiers}\r\n            {...attributes}\r\n            component={tag}\r\n            className={popperClassName}\r\n            x-placement={placement || attributes.placement}\r\n          >\r\n            {children}\r\n            {!hideArrow && <Arrow className={arrowClassName} />}\r\n        </ReactPopper>\r\n//\r\nmodifiers = {\r\n      offset: { offset },\r\n      flip: { enabled: flip, behavior: fallbackPlacement },\r\n      preventOverflow: { boundariesElement },\r\n      update: {\r\n        enabled: true,\r\n        order: 950,\r\n        fn: handlePlacementChange,\r\n      },\r\n      ...modifiers,\r\n};\r\n\r\n\r\nCDropdownCustom\t\tManager\t\t\t\tCDropdown, CDropdownItem, CDopdownMenu, CDropdownToggle, CToggler\r\n\r\n\t<Manager {...attributes} className={classes} onKeyDown={handleKeyDown} ref={reference} />\r\n\r\n\r\nCDropdownMenu\t\tPopper\t\t\t\tCWidgetSimple\r\n\r\n     <Tag\r\n      tabIndex=\"-1\"\r\n      role=\"menu\"\r\n      {...attributes}\r\n      aria-hidden={!context.isOpen}\r\n      className={classes}\r\n      x-placement={attributes.placement}\r\n      ref={innerRef}\r\n     />\r\n\r\n\r\nCDropdownToggle\t\tTarget\t\t\t\tCWidgetSimple\r\n\r\n     <Target\r\n      {...attributes}\r\n      className={classes}\r\n      component={Tag}\r\n      onClick={onClick}\r\n      aria-expanded={context.isOpen}\r\n      ref={innerRef}\r\n    >\r\n      {children}\r\n    </Target>\r\n\r\n\r\n  */\r\n\r\n  }\r\n\r\n  renderChildren.propTypes = {\r\n    tag: tagPropType,\r\n    children: PropTypes.node.isRequired,\r\n    className: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n    //\r\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n    placement: PropTypes.string,\r\n    placementPrefix: PropTypes.string,\r\n    arrowClassName: PropTypes.string,\r\n    hideArrow: PropTypes.bool,\r\n    show: PropTypes.bool.isRequired,\r\n    offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    fallbackPlacement: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n    flip: PropTypes.bool,\r\n    container: targetPropType,\r\n    target: targetPropType.isRequired,\r\n    modifiers: PropTypes.object,\r\n    boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\r\n  };\r\n\r\n  setTargetNode(getTarget(props.target));\r\n\r\n  if (props.show) {\r\n    return props.container === 'inline' ?\r\n      renderChildren() :\r\n      ReactDOM.createPortal((<div ref={getRef}>{renderChildren()}</div>), getContainerNode());\r\n  }\r\n\r\n  return null;\r\n\r\n}\r\n\r\nCPopperContent.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node.isRequired,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  placement: PropTypes.string,\r\n  placementPrefix: PropTypes.string,\r\n  arrowClassName: PropTypes.string,\r\n  hideArrow: PropTypes.bool,\r\n  show: PropTypes.bool.isRequired,\r\n  offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  fallbackPlacement: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  flip: PropTypes.bool,\r\n  container: targetPropType,\r\n  target: targetPropType.isRequired,\r\n  modifiers: PropTypes.object,\r\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\r\n};\r\n\r\nCPopperContent.defaultProps = {\r\n  boundariesElement: 'scrollParent',\r\n  placement: 'auto',\r\n  hideArrow: false,\r\n  show: false,\r\n  offset: 0,\r\n  fallbackPlacement: 'flip',\r\n  flip: true,\r\n  container: 'body',\r\n  modifiers: {},\r\n};\r\n\r\nexport default CPopperContent;\r\n"}},{"id":"41b1b829-2351-54d9-9c0c-fcfe8bfae63e","name":"-CPopperTargetHelper","fields":{"code":"import {useContext} from 'react';\r\nimport {getTarget, targetPropType} from './Shared/helper.js';\r\nimport {Context} from './CPopperContent';\r\n\r\n//component - CoreUI / CPopperTargetHelper\r\n\r\nconst CPopperTargetHelper = props=>{\r\n\r\n  const context = useContext(Context);\r\n\r\n  //render\r\n\r\n  context.popperManager.setTargetNode(getTarget(props.target));\r\n  return null;\r\n\r\n}\r\n\r\nCPopperTargetHelper.propTypes = {\r\n  target: targetPropType.isRequired,\r\n};\r\n\r\nexport default CPopperTargetHelper;\r\n"}},{"id":"2b544c1c-d187-5a4f-831a-6658c571dec3","name":"-CTooltip-org","fields":{"code":"import React, {useState} from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport CTooltipPopoverWrapper from './CTooltipPopoverWrapper';\r\n\r\n//component - CoreUI / CTooltip\r\n\r\nconst CTooltip = props=>{\r\n\r\n  let {\r\n    custom,\r\n    //\r\n    show,\r\n    toggle,\r\n    defaultOpen,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(defaultOpen || false);\r\n\r\n  if (!custom){\r\n    const userToggle = toggle;\r\n    toggle = (e)=>{\r\n      setIsOpen(!isOpen);\r\n      if (userToggle)\r\n        userToggle(e);\r\n    }\r\n    show = isOpen;\r\n  }\r\n\r\n  // render\r\n\r\n  const popperClasses = classNames(\r\n    'tooltip',\r\n    'show',\r\n    props.className\r\n  );\r\n\r\n  const classes = classNames(\r\n    'tooltip-inner',\r\n    props.innerClassName\r\n  );\r\n\r\n  return (\r\n    <CTooltipPopoverWrapper\r\n      {...attributes}\r\n      toggle={toggle}\r\n      show={show}\r\n      className={popperClasses}\r\n      innerClassName={classes}\r\n    />\r\n  );\r\n\r\n}\r\n\r\nCTooltip.propTypes = {\r\n  ...CTooltipPopoverWrapper.propTypes,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  defaultOpen: PropTypes.bool\r\n}\r\n\r\nCTooltip.defaultProps = {\r\n  placement: 'top',\r\n  autohide: true,\r\n  placementPrefix: 'bs-tooltip',\r\n  trigger: 'hover focus',\r\n};\r\n\r\nexport default CTooltip;\r\n"}},{"id":"7db80da5-0665-502c-9287-df6d467ff0f5","name":"-CTooltipPopoverWrapper-org","fields":{"code":"import React, {useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CPopperContent from './CPopperContent';\r\nimport {\r\n  getTarget,\r\n  targetPropType,\r\n  omit,\r\n  PopperPlacements,\r\n  mapToCssModules,\r\n  DOMElement\r\n} from './Shared/helper.js';\r\n\r\n// global\r\n\r\nconst DEFAULT_DELAYS = {\r\n  show: 0,\r\n  hide: 250\r\n};\r\n\r\nconst isInDOMSubtree = (element, subtreeRoot)=>{\r\n  return subtreeRoot && (element === subtreeRoot || subtreeRoot.contains(element));\r\n}\r\n\r\n//component - CoreUI / CTooltipPopoverWrapper\r\n\r\nconst CTooltipPopoverWrapper = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerClassName,\r\n    target,\r\n    show: isOpen,\r\n    hideArrow,\r\n    boundariesElement,\r\n    placement,\r\n    placementPrefix,\r\n    arrowClassName,\r\n    container,\r\n    modifiers,\r\n    offset,\r\n  } = props;\r\n\r\n  const fields = useRef({_target: null}).current;\r\n\r\n  const onMouseOverTooltipContent = ()=>{\r\n    if (fields.trigger.indexOf('hover') > -1 && !fields.autohide) {\r\n      if (fields._hideTimeout) {\r\n        clearHideTimeout();\r\n      }\r\n    }\r\n  }\r\n\r\n  const onMouseLeaveTooltipContent = e=>{\r\n    if (fields.trigger.indexOf('hover') > -1 && !fields.autohide) {\r\n      if (fields._showTimeout) {\r\n        clearShowTimeout();\r\n      }\r\n      e.persist();\r\n      fields._hideTimeout = setTimeout(\r\n        ()=>hide(e),\r\n        getDelay('hide')\r\n      );\r\n    }\r\n  }\r\n\r\n  const onEscKeyDown = e=>{\r\n    if (e.key === 'Escape') {\r\n      hide(e);\r\n    }\r\n  }\r\n\r\n  const getRef = ref=>{\r\n    const {innerRef} = props;\r\n    if (innerRef) {\r\n      if (typeof innerRef === 'function') {\r\n        innerRef(ref);\r\n      } else if (typeof innerRef === 'object') {\r\n        innerRef.current = ref;\r\n      }\r\n    }\r\n    fields._popover = ref;\r\n  }\r\n\r\n  const getDelay = key=>{\r\n    if (typeof fields.delay === 'object') {\r\n      return isNaN(fields.delay[key]) ? DEFAULT_DELAYS[key] : fields.delay[key];\r\n    }\r\n    return fields.delay;\r\n  }\r\n\r\n  const show = e=>{\r\n    if (!fields.isOpen) {\r\n      clearShowTimeout();\r\n      toggle(e);\r\n    }\r\n  }\r\n\r\n  const showWithDelay = e=>{\r\n    if (fields._hideTimeout) {\r\n      clearHideTimeout();\r\n    }\r\n    fields._showTimeout = setTimeout(\r\n      ()=>show(e),\r\n      getDelay('show')\r\n    );\r\n  }\r\n\r\n  const hide = e=>{\r\n    if (fields.isOpen) {\r\n      clearHideTimeout();\r\n      toggle(e);\r\n    }\r\n  }\r\n\r\n  const hideWithDelay = e=>{\r\n    if (fields._showTimeout) {\r\n      clearShowTimeout();\r\n    }\r\n    fields._hideTimeout = setTimeout(\r\n      ()=>hide(e),\r\n      getDelay('hide')\r\n    );\r\n  }\r\n\r\n  const clearShowTimeout = ()=>{\r\n    clearTimeout(fields._showTimeout);\r\n    fields._showTimeout = undefined;\r\n  }\r\n\r\n  const clearHideTimeout = ()=>{\r\n    clearTimeout(fields._hideTimeout);\r\n    fields._hideTimeout = undefined;\r\n  }\r\n\r\n  const handleDocumentClick = e=>{\r\n    const triggers = fields.trigger.split(' ');\r\n    if (triggers.indexOf('legacy') > -1 && (fields.isOpen || isInDOMSubtree(e.target, fields._target))) {\r\n      if (fields._hideTimeout) {\r\n        clearHideTimeout();\r\n      }\r\n      if (fields.isOpen && !isInDOMSubtree(e.target, fields._popover)) {\r\n        hideWithDelay(e);\r\n      } else {\r\n        showWithDelay(e);\r\n      }\r\n    }\r\n    else if (triggers.indexOf('click') > -1 && isInDOMSubtree(e.target, fields._target)) {\r\n      if (fields._hideTimeout) {\r\n        clearHideTimeout();\r\n      }\r\n      if (!fields.isOpen) {\r\n        showWithDelay(e);\r\n      } else {\r\n        hideWithDelay(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  const addTargetEvents = ()=>{\r\n    if (props.trigger) {\r\n      let triggers = props.trigger.split(' ');\r\n      if (triggers.indexOf('manual') === -1) {\r\n        if (triggers.indexOf('click') > -1 || triggers.indexOf('legacy') > -1) {\r\n          ['click', 'touchstart'].forEach(event =>\r\n            document.addEventListener(event, handleDocumentClick, true)\r\n          );\r\n          fields._handleDocumentClick = handleDocumentClick;\r\n        }\r\n\r\n        if (fields._target) {\r\n          if (triggers.indexOf('hover') > -1) {\r\n            fields._target.addEventListener(\r\n              'mouseover',\r\n              showWithDelay,\r\n              true\r\n            );\r\n            fields._target.addEventListener(\r\n              'mouseout',\r\n              hideWithDelay,\r\n              true\r\n            );\r\n            fields._showWithDelay = showWithDelay;\r\n            fields._hideWithDelay = hideWithDelay;\r\n          }\r\n          if (triggers.indexOf('focus') > -1) {\r\n            fields._target.addEventListener('focusin', show, true);\r\n            fields._target.addEventListener('focusout', hide, true);\r\n            fields._show = show;\r\n            fields._hide = hide;\r\n          }\r\n          fields._target.addEventListener('keydown', onEscKeyDown, true);\r\n          fields._onEscKeyDown = onEscKeyDown;\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  const removeTargetEvents = ()=>{\r\n\r\n    if (fields._target) {\r\n      fields._target.removeEventListener(\r\n        'mouseover',\r\n        fields._showWithDelay,\r\n        true\r\n      );\r\n      fields._target.removeEventListener(\r\n        'mouseout',\r\n        fields._hideWithDelay,\r\n        true\r\n      );\r\n      fields._target.removeEventListener('keydown', fields._onEscKeyDown, true);\r\n      fields._target.removeEventListener('focusin', fields._show, true);\r\n      fields._target.removeEventListener('focusout', fields._hide, true);\r\n    }\r\n\r\n    ['click', 'touchstart'].forEach(event =>\r\n      document.removeEventListener(event, fields._handleDocumentClick, true)\r\n    );\r\n\r\n  }\r\n\r\n  const updateTarget = ()=>{\r\n    const newTarget = getTarget(props.target);\r\n    if (newTarget !== fields._target) {\r\n      removeTargetEvents();\r\n      fields._target = newTarget;\r\n      addTargetEvents();\r\n    }\r\n  }\r\n\r\n  const toggle = e=>{\r\n    if (fields.disabled) {\r\n      return e && e.preventDefault();\r\n    }\r\n    return fields.toggle(e);\r\n  }\r\n\r\n\r\n  //effect\r\n  useEffect(() => {\r\n    updateTarget();\r\n    return function cleanup() {\r\n      removeTargetEvents();\r\n    };\r\n  },\r\n  []);\r\n\r\n  //render\r\n\r\n  fields.isOpen = props.show;\r\n  fields.autohide = props.autohide;\r\n  fields.trigger = props.trigger;\r\n  fields.delay = props.delay;\r\n  fields.toggle = props.toggle;\r\n  fields.disabled = props.disabled;\r\n\r\n  if (!props.show) {\r\n    return null;\r\n  }\r\n\r\n  updateTarget();\r\n\r\n  const attributes = omit(props, Object.keys(CTooltipPopoverWrapper.propTypes));\r\n  const popperClasses = mapToCssModules(className, cssModule);\r\n  const classes = mapToCssModules(innerClassName, cssModule);\r\n\r\n  return (\r\n    <CPopperContent\r\n      className={popperClasses}\r\n      target={target}\r\n      show={isOpen}\r\n      hideArrow={hideArrow}\r\n      boundariesElement={boundariesElement}\r\n      placement={placement}\r\n      placementPrefix={placementPrefix}\r\n      arrowClassName={arrowClassName}\r\n      container={container}\r\n      modifiers={modifiers}\r\n      offset={offset}\r\n      cssModule={cssModule}\r\n    >\r\n      <div\r\n        {...attributes}\r\n        className={classes}\r\n        role=\"tooltip\"\r\n        aria-hidden={isOpen}\r\n        onMouseOver={onMouseOverTooltipContent}\r\n        onMouseLeave={onMouseLeaveTooltipContent}\r\n        onKeyDown={onEscKeyDown}\r\n        ref={getRef}\r\n      />\r\n    </CPopperContent>\r\n  );\r\n\r\n}\r\n\r\nCTooltipPopoverWrapper.propTypes = {\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  placement: PropTypes.oneOf(PopperPlacements),\r\n  target: targetPropType.isRequired,\r\n  container: targetPropType,\r\n  show: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  hideArrow: PropTypes.bool,\r\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\r\n  innerClassName: PropTypes.string,\r\n  arrowClassName: PropTypes.string,\r\n  toggle: PropTypes.func,\r\n  autohide: PropTypes.bool,\r\n  placementPrefix: PropTypes.string,\r\n  delay: PropTypes.oneOfType([\r\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\r\n    PropTypes.number\r\n  ]),\r\n  modifiers: PropTypes.object,\r\n  offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  trigger: PropTypes.string,\r\n};\r\n\r\nCTooltipPopoverWrapper.defaultProps = {\r\n  show: false,\r\n  hideArrow: false,\r\n  autohide: false,\r\n  delay: DEFAULT_DELAYS,\r\n  toggle: function () {},\r\n  trigger: 'click',\r\n};\r\n\r\nexport default CTooltipPopoverWrapper;\r\n"}},{"id":"67a205fd-db80-534b-aad0-29a0f9271019","name":"-CTooltipPopoverWrapper","fields":{"code":"import React, {useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import CPopperContent from './CPopperContent';\r\nimport { Manager, Reference, Popper } from 'react-popper';\r\n\r\nimport {\r\n  getTarget,\r\n  targetPropType,\r\n  omit,\r\n  PopperPlacements,\r\n  mapToCssModules,\r\n  DOMElement\r\n} from './Shared/helper.js';\r\n\r\n// global\r\n\r\nconst DEFAULT_DELAYS = {\r\n  show: 0,\r\n  hide: 250\r\n};\r\n\r\nconst isInDOMSubtree = (element, subtreeRoot)=>{\r\n  return subtreeRoot && (element === subtreeRoot || subtreeRoot.contains(element));\r\n}\r\n\r\n//component - CoreUI / CTooltipPopoverWrapper\r\n\r\nconst CTooltipPopoverWrapper = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerClassName,\r\n    target,\r\n    show: isOpen,\r\n    hideArrow,\r\n    boundariesElement,\r\n    placement,//\r\n    placementPrefix,\r\n    arrowClassName,\r\n    container,\r\n    modifiers,\r\n    offset,\r\n\r\n    reference,\r\n    children,//\r\n\r\n  } = props;\r\n\r\n\r\n\r\n  return (\r\n    <Manager>\r\n      <Reference>\r\n        {reference}\r\n      </Reference>\r\n      <Popper placement={placement}>\r\n        {children}\r\n      </Popper>\r\n    </Manager>\r\n  );\r\n\r\n}\r\n\r\nCTooltipPopoverWrapper.propTypes = {\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  placement: PropTypes.oneOf(PopperPlacements),\r\n  target: targetPropType.isRequired,\r\n  container: targetPropType,\r\n  show: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  hideArrow: PropTypes.bool,\r\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\r\n  innerClassName: PropTypes.string,\r\n  arrowClassName: PropTypes.string,\r\n  toggle: PropTypes.func,\r\n  autohide: PropTypes.bool,\r\n  placementPrefix: PropTypes.string,\r\n  delay: PropTypes.oneOfType([\r\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\r\n    PropTypes.number\r\n  ]),\r\n  modifiers: PropTypes.object,\r\n  offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  trigger: PropTypes.string,\r\n};\r\n\r\nCTooltipPopoverWrapper.defaultProps = {\r\n  show: false,\r\n  hideArrow: false,\r\n  autohide: false,\r\n  delay: DEFAULT_DELAYS,\r\n  toggle: function () {},\r\n  trigger: 'click',\r\n};\r\n\r\nexport default CTooltipPopoverWrapper;\r\n"}},{"id":"bc5e0adf-4977-5906-9f74-f92cbe923196","name":"CAlert","fields":{"code":"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CFade from './CFade';\r\n\r\n//component - CoreUI / CAlert\r\n\r\nconst CAlert = props=>{\r\n\r\n  let {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    toggle,\r\n    transition,\r\n    closeAriaLabel,\r\n    closeClassName,\r\n    color,\r\n    fade,\r\n    show,\r\n    iconSlot,\r\n    closeProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'alert',\r\n    `alert-${color}`,\r\n    { 'alert-dismissible': toggle }\r\n  ), cssModule);\r\n\r\n  const closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);\r\n\r\n  const alertTransition = {\r\n    ...CFade.defaultProps,\r\n    ...transition,\r\n    baseClass: fade ? transition.baseClass : '',\r\n    timeout: fade ? transition.timeout : 0,\r\n  };\r\n\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  if (!custom){\r\n    let userToggle = toggle;\r\n    toggle = ()=>{\r\n      setIsOpen(!isOpen);\r\n      if (userToggle)\r\n        userToggle();\r\n    };\r\n    show = isOpen;\r\n  }\r\n\r\n  return (\r\n    <CFade {...attributes} {...alertTransition} tag={Tag} className={classes} in={show} role=\"alert\">\r\n      {!custom ?\r\n        <button type=\"button\" className={closeClasses} aria-label={closeAriaLabel} onClick={toggle} {...closeProps}>\r\n          <span aria-hidden=\"true\">{iconSlot}</span>\r\n        </button>\r\n        : null}\r\n      {children}\r\n    </CFade>\r\n  );\r\n\r\n}\r\n\r\nCAlert.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  toggle: PropTypes.func,\r\n  closeClassName: PropTypes.string,\r\n  closeProps: PropTypes.object,\r\n  closeAriaLabel: PropTypes.string,\r\n  color: PropTypes.string,\r\n  fade: PropTypes.bool,\r\n  show: PropTypes.bool,\r\n  transition: PropTypes.shape(CFade.propTypes),\r\n  iconSlot: PropTypes.node\r\n};\r\n\r\nCAlert.defaultProps = {\r\n  tag: 'div',\r\n  //\r\n  color: 'success',\r\n  show: true,\r\n  closeAriaLabel: 'Close',\r\n  fade: true,\r\n  transition: {\r\n    ...CFade.defaultProps,\r\n    unmountOnExit: true,\r\n  },\r\n  iconSlot: <React.Fragment>&times;</React.Fragment>\r\n};\r\n\r\n//export\r\nexport default CAlert;\r\n"}},{"id":"0c0d1e58-bc09-5a26-ad77-79c66f3652cd","name":"CBadge","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CBadge\r\n\r\nconst CBadge = props=>{\r\n\r\n  let {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    color,\r\n    shape,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'badge',\r\n    'badge-' + color,\r\n    shape ? 'badge-'+shape : false\r\n  ), cssModule);\r\n\r\n  if (attributes.href && Tag === 'span') {\r\n    Tag = 'a';\r\n  }\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCBadge.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  color: PropTypes.string,\r\n  shape: PropTypes.string\r\n};\r\n\r\nCBadge.defaultProps = {\r\n  tag: 'span'\r\n};\r\n\r\nexport default CBadge;\r\n"}},{"id":"0f352c7d-48ce-58ee-b660-85df83d00303","name":"CBreadcrumb","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {Route, Link, matchPath} from 'react-router-dom';\r\nimport CBreadcrumbCustom from './CBreadcrumbCustom';\r\nimport CBreadcrumbItem from './CBreadcrumbItem';\r\n\r\nlet routes;\r\n\r\nconst getPaths = pathname=>{\r\n  const paths = ['/'];\r\n  if (pathname === '/') return paths;\r\n  pathname.split('/').reduce((prev, curr) => {\r\n    const currPath = `${prev}/${curr}`;\r\n    paths.push(currPath);\r\n    return currPath;\r\n  });\r\n  return paths;\r\n};\r\n\r\nconst findRouteName = url=>{\r\n  const aroute = routes.find(route => matchPath(url, {path: route.path, exact: route.exact}));\r\n  return (aroute && aroute.name) ? aroute.name : null\r\n};\r\n\r\n//component - CoreUI / CBreadcrumbRouteItem\r\n\r\nconst CBreadcrumbRouteItem = ({ match }) => {\r\n  const routeName = findRouteName(match.url);\r\n  if (routeName) {\r\n    return (\r\n      match.isExact ?\r\n        <CBreadcrumbItem active>{routeName}</CBreadcrumbItem>\r\n       :\r\n        <CBreadcrumbItem>\r\n          <Link to={match.url || ''}>\r\n            {routeName}\r\n          </Link>\r\n        </CBreadcrumbItem>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nCBreadcrumbRouteItem.propTypes = {\r\n  match: PropTypes.shape({\r\n    url: PropTypes.string,\r\n    isExact: PropTypes.bool\r\n  })\r\n};\r\n\r\n//component - CoreUI / CBreadcrumbRouter\r\n\r\nlet postItems;\r\n\r\nconst CBreadcrumbRouter = args=>{\r\n\r\n  const paths = getPaths(args.location.pathname);\r\n  const items = paths.map(\r\n    (path, i) => <Route key={i.toString()} path={path} component={CBreadcrumbRouteItem} />\r\n  );\r\n  if (postItems)\r\n    items.push(postItems);\r\n\r\n  // render\r\n\r\n  return items;\r\n  /*\r\n  return (\r\n    <CBreadcrumbCustom>\r\n      {items}\r\n    </CBreadcrumbCustom>\r\n  );\r\n  */\r\n\r\n};\r\n\r\n//component - CoreUI / CBreadcrumb\r\n\r\nconst CBreadcrumb = props=>{\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    custom,\r\n    //\r\n    routesProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  if (children)\r\n    postItems = children;\r\n  else {\r\n    postItems = null;\r\n  }\r\n\r\n  routes = props.appRoutes;\r\n\r\n  //render\r\n\r\n  delete attributes.appRoutes;\r\n  const classes = classNames(className);\r\n\r\n  if (!custom){\r\n    return (\r\n      <CBreadcrumbCustom {...attributes} listClassName={classes}>\r\n        <Route path=\"/:path\" component={CBreadcrumbRouter} {...routesProps} />\r\n      </CBreadcrumbCustom>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CBreadcrumbCustom {...attributes} listClassName={classes}>\r\n      {children}\r\n    </CBreadcrumbCustom>\r\n  );\r\n\r\n}\r\n\r\nCBreadcrumb.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  appRoutes: PropTypes.any,\r\n  match: PropTypes.object,\r\n  routesProps: PropTypes.object\r\n};\r\n\r\nCBreadcrumb.defaultProps = {\r\n  tag: 'div',\r\n  className: '',\r\n  appRoutes: [{ path: '/', exact: true, name: 'Home', component: null }]\r\n};\r\n\r\nexport default CBreadcrumb;\r\n"}},{"id":"714fd15a-908b-5c7d-9401-0364e682e39b","name":"CBreadcrumbCustom","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CBreadcrumbCustom\r\n\r\nconst CBreadcrumbCustom = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    listClassName,\r\n    listTag: ListTag,\r\n    'aria-label': label,\r\n    listProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className\r\n  ), cssModule);\r\n\r\n  const listClasses = mapToCssModules(classNames(\r\n    'breadcrumb',\r\n    listClassName\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} aria-label={label} ref={innerRef}>\r\n      <ListTag className={listClasses} {...listProps}>\r\n        {children}\r\n      </ListTag>\r\n    </Tag>\r\n  );\r\n\r\n};\r\n\r\nCBreadcrumbCustom.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  listTag: tagPropType,\r\n  listClassName: PropTypes.string,\r\n  listProps: PropTypes.object,\r\n  'aria-label': PropTypes.string\r\n};\r\n\r\nCBreadcrumbCustom.defaultProps = {\r\n  tag: 'nav',\r\n  listTag: 'ol',\r\n  'aria-label': 'breadcrumb'\r\n};\r\n\r\nexport default CBreadcrumbCustom;\r\n"}},{"id":"4232e774-1d25-53e3-8b09-845bc5931839","name":"CBreadcrumbItem","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CBreadcrumbItem\r\n\r\nconst CBreadcrumbItem = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    active,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    active ? 'active' : false,\r\n    'breadcrumb-item'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} aria-current={active ? 'page' : undefined} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCBreadcrumbItem.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool\r\n};\r\n\r\nCBreadcrumbItem.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CBreadcrumbItem;\r\n"}},{"id":"9b6c8c44-05c3-5805-9895-a65341fbdccf","name":"CButton","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CButton\r\n\r\nconst CButton = props=>{\r\n\r\n  let {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    active,\r\n    'aria-label': ariaLabel,\r\n    block,\r\n    close,\r\n    color,\r\n    size,\r\n    textHtml,\r\n    pressed,\r\n    shape,\r\n    variant,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const onClick = e=>{\r\n    if (props.disabled) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    if (props.onClick) {\r\n      props.onClick(e);\r\n    }\r\n  }\r\n\r\n  //render\r\n\r\n  if (close && typeof children === 'undefined') {\r\n    children = <span aria-hidden>×</span>;\r\n  }\r\n\r\n  const btnColor = `btn${variant ? '-'+variant : ''}-${color}`;\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    { close },\r\n    close || 'btn',\r\n    close || btnColor,\r\n    size ? `btn-${size}` : false,\r\n    block ? 'btn-block' : false,\r\n    shape ? `btn-${shape}` : false,\r\n    pressed ? 'btn-pressed' : false,\r\n    { 'active': active,\r\n    'disabled': props.disabled }\r\n  ), cssModule);\r\n\r\n  if (attributes.href && Tag === 'button') {\r\n    Tag = 'a';\r\n  }\r\n\r\n  const defaultAriaLabel = close ? 'Close' : null;\r\n\r\n  return <Tag\r\n    type={(Tag === 'button' && attributes.onClick) ? 'button' : undefined}\r\n    {...attributes}\r\n    className={classes}\r\n    onClick={onClick}\r\n    aria-label={ariaLabel || defaultAriaLabel}\r\n    ref={innerRef}\r\n  >\r\n    {textHtml ? textHtml : children}\r\n  </Tag>\r\n\r\n}\r\n\r\nCButton.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  cssModule: PropTypes.object,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool,\r\n  block: PropTypes.bool,\r\n  shape: PropTypes.string,\r\n  variant: PropTypes.oneOf(['', 'ghost', 'outline']),\r\n  color: PropTypes.string,\r\n  close: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  size: PropTypes.string,\r\n  pressed: PropTypes.bool,\r\n  textHtml: PropTypes.string,\r\n  'aria-label': PropTypes.string,\r\n};\r\n\r\nCButton.defaultProps = {\r\n  tag: 'button'\r\n};\r\n\r\n//export\r\nexport default CButton;\r\n"}},{"id":"ccc65483-dae4-52ba-bac4-be15f877d519","name":"CButtonClose","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CButtonClose\r\n\r\nconst CButtonClose = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    iconHtml,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    'close',\r\n    className\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} aria-label=\"Close\" className={classes} ref={innerRef}>{children||iconHtml}</Tag>\r\n  );\r\n\r\n}\r\n\r\nCButtonClose.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  iconHtml: PropTypes.oneOfType([PropTypes.node, PropTypes.string])//object\r\n};\r\n\r\nCButtonClose.defaultProps = {\r\n  tag: 'button',\r\n  iconHtml: <React.Fragment>&times;</React.Fragment>\r\n};\r\n\r\nexport default CButtonClose;\r\n"}},{"id":"bd662029-ef7a-5ede-b9e2-8cfa001324a9","name":"CButtonGroup","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CButtonGroup\r\n\r\nconst CButtonGroup = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    size,\r\n    vertical,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    size ? 'btn-group-' + size : false,\r\n    vertical ? 'btn-group-vertical' : 'btn-group'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCButtonGroup.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  size: PropTypes.string,\r\n  vertical: PropTypes.bool,\r\n  role: PropTypes.string\r\n};\r\n\r\nCButtonGroup.defaultProps = {\r\n  tag: 'div',\r\n  role: 'group',\r\n};\r\n\r\nexport default CButtonGroup;\r\n"}},{"id":"e31a37b4-fff8-52ff-b619-4525e9b89b2a","name":"CButtonToolbar","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CButtonToolbar\r\n\r\nconst CButtonToolbar = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    justify,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    justify ? 'justify-content-between' : false,\r\n    'btn-toolbar'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCButtonToolbar.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  role: PropTypes.string,\r\n  justify: PropTypes.bool,\r\n  'aria-label': PropTypes.string,\r\n};\r\n\r\nCButtonToolbar.defaultProps = {\r\n  tag: 'div',\r\n  role: 'toolbar',\r\n};\r\n\r\nexport default CButtonToolbar;\r\n"}},{"id":"ae9d5235-4ae6-5b4b-ad75-acf77f6b59b6","name":"CCallout","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCallout\r\n\r\nconst CCallout = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    color,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    'c-callout',\r\n    'c-callout-'+color,\r\n    className\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCallout.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  color: PropTypes.string\r\n};\r\n\r\nCCallout.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CCallout;\r\n"}},{"id":"35906bda-d51e-5a05-9c6d-9f402ffbcec9","name":"CCard","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CCardBody from './CCardBody';\r\nimport CCardHeader from './CCardHeader';\r\nimport CCardFooter from './CCardFooter';\r\n\r\n//component - CoreUI / CCard\r\n\r\nconst CCard = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    color,\r\n    textColor,\r\n    borderColor,\r\n    accentColor,\r\n    headerSlot,\r\n    footerSlot,\r\n    align,\r\n    bodyClassName,\r\n    bodyProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card',\r\n    align ? `text-${align}` : false,\r\n    textColor ? `text-${textColor}` : false,\r\n    color ? `bg-${color}` : false,\r\n    borderColor ? `border-${borderColor}` : false,\r\n    accentColor ? `card-accent-${accentColor}` : false,\r\n  ), cssModule);\r\n\r\n  if (!custom)\r\n    return (\r\n      <Tag {...attributes} className={classes} ref={innerRef}>\r\n        {headerSlot?(\r\n        <CCardHeader>\r\n          {headerSlot}\r\n        </CCardHeader>\r\n        ): ''}\r\n        <CCardBody {...bodyProps} className={bodyClassName}>\r\n          {children}\r\n        </CCardBody>\r\n        {footerSlot?(\r\n        <CCardFooter>\r\n          {footerSlot}\r\n        </CCardFooter>\r\n        ): ''}\r\n      </Tag>\r\n    );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef}>\r\n      {children}\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCCard.sharedPropTypes = {\r\n  align: PropTypes.string,\r\n  color: PropTypes.string,\r\n  borderColor: PropTypes.string,\r\n  textColor: PropTypes.string,\r\n  accentColor: PropTypes.string,\r\n  bodyClassName: PropTypes.string,\r\n  bodyProps: PropTypes.object\r\n}\r\n\r\nCCard.propTypes = {\r\n  ...CCard.sharedPropTypes,\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  align: PropTypes.string,\r\n  color: PropTypes.string,\r\n  borderColor: PropTypes.string,\r\n  textColor: PropTypes.string,\r\n  accentColor: PropTypes.string,\r\n  bodyClassName: PropTypes.string,\r\n  bodyProps: PropTypes.object,\r\n  headerSlot: PropTypes.node,\r\n  footerSlot: PropTypes.node\r\n}\r\n\r\nCCard.defaultProps = {\r\n  tag: 'div'\r\n}\r\n\r\nexport default CCard;\r\n"}},{"id":"79c8424d-0363-5b78-b797-fb14dc0c56a0","name":"CCardBody","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardBody\r\n\r\nconst CCardBody = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    overlay,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-body',\r\n    overlay ? 'card-img-overlay' : null\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardBody.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  overlay: PropTypes.bool,\r\n};\r\n\r\nCCardBody.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CCardBody;\r\n"}},{"id":"1e2df312-e4c8-57f6-aa34-ca8da5fb718e","name":"CCardColumn","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardColumn\r\n\r\nconst CCardColumn = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-columns'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardColumn.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardColumn.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CCardColumn;\r\n"}},{"id":"92dc8790-20d8-536d-aefd-36219711d577","name":"CCardDeck","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardDeck\r\n\r\nconst CCardDeck = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-deck'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardDeck.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardDeck.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CCardDeck;\r\n"}},{"id":"2ddd522e-37ef-5747-91f7-9a7dfb6dab49","name":"CCardFooter","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardFooter\r\n\r\nconst CCardFooter = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-footer'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardFooter.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardFooter.defaultProps = {\r\n  tag: 'footer'\r\n};\r\n\r\nexport default CCardFooter;\r\n"}},{"id":"6e395cf8-5ef3-58e5-ba90-37ae828bf72d","name":"CCardGroup","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardGroup\r\n\r\nconst CCardGroup = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    deck,\r\n    columns,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    columns ? 'card-columns' : deck ? 'card-deck' : 'card-group'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardGroup.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  deck: PropTypes.bool,\r\n  columns: PropTypes.bool,\r\n};\r\n\r\nCCardGroup.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CCardGroup;\r\n"}},{"id":"5deebd83-6423-58fa-b003-22e0cd12dec3","name":"CCardHeader","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n//import CCard, {sharedPropTypes} from './CCard';\r\n\r\n//component - CoreUI / CCardHeader\r\n\r\nconst CCardHeader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-header'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardHeader.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardHeader.defaultProps = {\r\n  tag: 'header'\r\n};\r\n\r\nexport default CCardHeader;\r\n"}},{"id":"06718a87-ed4b-5764-9da6-40b78db79441","name":"CCardImg","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardImg\r\n\r\nconst CCardImg = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    placement,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    placement ? `card-img-${placement}`: 'card-img'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardImg.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  placement: PropTypes.string\r\n};\r\n\r\nCCardImg.defaultProps = {\r\n  tag: 'img'\r\n};\r\n\r\nexport default CCardImg;\r\n"}},{"id":"b7f774a8-350e-592b-94e2-a6ffca6026a6","name":"CCardImgOverlay","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardImgOverlay\r\n\r\nconst CCardImgOverlay = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-img-overlay'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardImgOverlay.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardImgOverlay.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CCardImgOverlay;\r\n"}},{"id":"d5c9f717-c540-5a6b-8450-70715787bff6","name":"CCardLink","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CLink from './CLink';\r\n\r\n//component - CoreUI / CCardLink\r\n\r\nconst CCardLink = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-link'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <CLink {...attributes} className={classes} />\r\n  );\r\n\r\n}\r\n\r\nCCardLink.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardLink.defaultProps = {\r\n};\r\n\r\nexport default CCardLink;\r\n"}},{"id":"6578a491-5e75-59ba-9cc9-6e9ef3b8b261","name":"CCardSubtitle","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardSubtitle\r\n\r\nconst CCardSubtitle = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-subtitle'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardSubtitle.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardSubtitle.defaultProps = {\r\n  tag: 'h6'\r\n};\r\n\r\nexport default CCardSubtitle;\r\n"}},{"id":"66ce840f-e3c2-51fd-91f8-3a16576d3c1d","name":"CCardText","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardText\r\n\r\nconst CCardText = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-text'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardText.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardText.defaultProps = {\r\n  tag: 'p'\r\n};\r\n\r\nexport default CCardText;\r\n"}},{"id":"ac3e6e60-f7db-5b76-adb9-03e553073e93","name":"CCardTitle","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCardTitle\r\n\r\nconst CCardTitle = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'card-title'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCardTitle.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCCardTitle.defaultProps = {\r\n  tag: 'h4'\r\n};\r\n\r\nexport default CCardTitle;\r\n"}},{"id":"f92b0319-296b-555c-9b46-347cb15dd075","name":"CCarousel","fields":{"code":"import React, {useState, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CCarouselCustom from './CCarouselCustom';\r\nimport CCarouselItem from './CCarouselItem';\r\nimport CCarouselControl from './CCarouselControl';\r\nimport CCarouselIndicators from './CCarouselIndicators';\r\nimport CCarouselCaption from './CCarouselCaption';\r\n\r\n//component - CoreUI / CCarousel\r\n\r\nconst CCarousel = props=>{\r\n\r\n  const {\r\n    //\r\n    custom,\r\n    autoPlay,\r\n    indicators,\r\n    controls,\r\n    items,\r\n    goToIndex\r\n  } = props;\r\n\r\n  const [activeIndex, setActiveIndex] = useState(props.defaultOpen || false);\r\n\r\n  const fields = useRef({animating: false}).current;\r\n\r\n  if (!custom){\r\n\r\n    const onExiting = ()=>{\r\n      fields.animating = true;\r\n    }\r\n\r\n    const onExited = ()=>{\r\n      fields.animating = false;\r\n    }\r\n\r\n    const next = ()=>{\r\n      if (fields.animating) return;\r\n      const nextIndex = activeIndex === props.items.length - 1 ? 0 : activeIndex + 1;\r\n      setActiveIndex(nextIndex);\r\n    }\r\n\r\n    const previous = ()=>{\r\n      if (fields.animating) return;\r\n      const nextIndex = activeIndex === 0 ? props.items.length - 1 : activeIndex - 1;\r\n      setActiveIndex(nextIndex);\r\n    }\r\n\r\n    const toIndex = newIndex=>{\r\n      if (fields.animating) return;\r\n      setActiveIndex(newIndex);\r\n    }\r\n\r\n    //render\r\n\r\n    const slides = items.map((item) => {\r\n      return (\r\n        <CCarouselItem\r\n          onExiting={onExiting}\r\n          onExited={onExited}\r\n          key={item.src}\r\n        >\r\n          <img className=\"d-block w-100\" src={item.src} alt={item.altText} />\r\n          <CCarouselCaption captionText={item.caption} captionHeader={item.header || item.caption} />\r\n        </CCarouselItem>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <CCarouselCustom\r\n        activeIndex={activeIndex}\r\n        next={next}\r\n        previous={previous}\r\n        ride={autoPlay ? 'carousel' : undefined}\r\n        {...props}\r\n      >\r\n        {indicators && <CCarouselIndicators\r\n          items={items}\r\n          activeIndex={props.activeIndex || activeIndex}\r\n          onClickHandler={goToIndex || toIndex}\r\n        />}\r\n        {slides}\r\n        {controls && <CCarouselControl\r\n          direction=\"prev\"\r\n          directionText=\"Previous\"\r\n          onClickHandler={props.previous || previous}\r\n        />}\r\n        {controls && <CCarouselControl\r\n          direction=\"next\"\r\n          directionText=\"Next\"\r\n          onClickHandler={props.next || next}\r\n        />}\r\n      </CCarouselCustom>\r\n    );\r\n\r\n  }\r\n\r\n  return (\r\n    <CCarouselCustom {...props}/>\r\n  );\r\n\r\n}\r\n\r\nCCarousel.propTypes = {\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  items: PropTypes.array,\r\n  indicators: PropTypes.bool,\r\n  defaultOpen: PropTypes.bool,\r\n  controls: PropTypes.bool,\r\n  autoPlay: PropTypes.bool,\r\n  activeIndex: PropTypes.number,\r\n  next: PropTypes.func,\r\n  previous: PropTypes.func,\r\n  goToIndex: PropTypes.func\r\n};\r\n\r\nCCarousel.defaultProps = {\r\n  controls: true,\r\n  indicators: true,\r\n  autoPlay: true,\r\n};\r\n\r\nexport default CCarousel;\r\n"}},{"id":"0e9c66ef-2992-5ba3-b330-a5f36e493cee","name":"CCarouselCaption","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCarouselCaption\r\n\r\nconst CCarouselCaption = props=>{\r\n\r\n  const {\r\n    cssModule,\r\n    className,\r\n    //\r\n    innerRef,\r\n    captionHeader,\r\n    captionText,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'carousel-caption',\r\n    'd-none',\r\n    'd-md-block'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <div className={classes} {...attributes} ref={innerRef}>\r\n      <h3>{captionHeader}</h3>\r\n      <p>{captionText}</p>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nCCarouselCaption.propTypes = {\r\n  cssModule: PropTypes.object,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  captionHeader: PropTypes.string,\r\n  captionText: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CCarouselCaption;\r\n"}},{"id":"eb93a90e-c677-53ee-97fb-b6d471255341","name":"CCarouselControl","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCarouselControl\r\n\r\nconst CCarouselControl = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    direction,\r\n    onClickHandler,\r\n    directionText,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const onClick = e=>{\r\n    e.preventDefault();\r\n    onClickHandler();\r\n  }\r\n\r\n  //render\r\n\r\n  const anchorClasses = mapToCssModules(classNames(\r\n    className,\r\n    `carousel-control-${direction}`\r\n  ), cssModule);\r\n\r\n  const iconClasses = mapToCssModules(classNames(\r\n    `carousel-control-${direction}-icon`\r\n  ), cssModule);\r\n\r\n  const screenReaderClasses = mapToCssModules(classNames(\r\n    'sr-only'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <a\r\n      {...attributes}\r\n      className={anchorClasses}\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onClick={onClick}\r\n      ref={innerRef}\r\n    >\r\n      <span className={iconClasses} aria-hidden=\"true\" />\r\n      <span className={screenReaderClasses}>{directionText || direction}</span>\r\n    </a>\r\n  );\r\n\r\n}\r\n\r\nCCarouselControl.propTypes = {\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  direction: PropTypes.oneOf(['prev', 'next']).isRequired,\r\n  onClickHandler: PropTypes.func.isRequired,\r\n  directionText: PropTypes.string\r\n};\r\n\r\nexport default CCarouselControl;\r\n"}},{"id":"8de67cdc-baea-5388-b14a-3b1e3cf387ec","name":"CCarouselCustom","fields":{"code":"import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\nimport CCarouselItem from './CCarouselItem';\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CCarouselCustom\r\n\r\nconst CCarouselCustom = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    slide,\r\n  } = props;\r\n\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [indicatorClicked, setIndicatorClicked] = useState(false);\r\n\r\n  const fields = useRef({lastProps: null}).current;\r\n\r\n  const setInterval = (properties = props)=>{\r\n    clearInterval();\r\n    if (properties.interval) {\r\n      fields.cycleInterval = window.setInterval(() => {\r\n        properties.next();\r\n      }, parseInt(properties.interval, 10));\r\n    }\r\n  }\r\n\r\n  const clearInterval = ()=>{\r\n    window.clearInterval(fields.cycleInterval);\r\n  }\r\n\r\n  const hoverStart = (...args)=>{\r\n    if (props.pause === 'hover') {\r\n      clearInterval();\r\n    }\r\n    if (props.mouseEnter) {\r\n      props.mouseEnter(...args);\r\n    }\r\n  }\r\n\r\n  const hoverEnd = (...args)=>{\r\n    if (props.pause === 'hover') {\r\n      setInterval();\r\n    }\r\n    if (props.mouseLeave) {\r\n      props.mouseLeave(...args);\r\n    }\r\n  }\r\n\r\n  const handleKeyPress = (e)=>{\r\n    if (props.keyboard) {\r\n      if (e.keyCode === 37) {\r\n        props.previous();\r\n      } else if (e.keyCode === 39) {\r\n        props.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  const renderItems = (carouselItems, className)=>{\r\n    const {slide} = props;\r\n    return (\r\n      <div role=\"listbox\" className={className}>\r\n        {carouselItems.map((item, index) => {\r\n          const isIn = (index === props.activeIndex);\r\n          return React.cloneElement(item, {\r\n            in: isIn,\r\n            slide: slide,\r\n          });\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const setState = (oVal, nVal, setF)=>{\r\n    if (nVal===oVal)\r\n      return;\r\n    setF(nVal);\r\n  }\r\n\r\n  //effect\r\n\r\n  useEffect(() => {\r\n    if (props.ride === 'carousel') {\r\n      setInterval();\r\n    }\r\n    document.addEventListener('keyup', handleKeyPress);\r\n    fields._handleKeyPress = handleKeyPress;\r\n    return function cleanup() {\r\n      clearInterval();\r\n      document.removeEventListener('keyup', fields._handleKeyPress);\r\n    };\r\n  },\r\n  []);\r\n\r\n  useEffect(() => {\r\n    if (fields.wrappedOnClickFunc){\r\n      fields.wrappedOnClickFunc();\r\n      setIndicatorClicked(false);\r\n      fields.wrappedOnClickFunc = null;\r\n    }\r\n  });\r\n\r\n  //render\r\n\r\n  setInterval(props);\r\n  if (fields.lastProps){\r\n    if (fields.lastProps.activeIndex + 1 === props.activeIndex) {\r\n      setState(direction, \"right\", setDirection);\r\n    } else if (fields.lastProps.activeIndex - 1 === props.activeIndex) {\r\n      setState(direction, \"left\", setDirection);\r\n    } else if (fields.lastProps.activeIndex > props.activeIndex) {\r\n      setState(direction, indicatorClicked ? \"left\" : \"right\", setDirection);\r\n    } else if (fields.lastProps.activeIndex !== props.activeIndex) {\r\n      setState(direction, indicatorClicked ? \"right\" : \"left\", setDirection);\r\n    }\r\n    setState(indicatorClicked, false, setIndicatorClicked);\r\n  }\r\n\r\n  fields.lastProps = props;\r\n\r\n  const outerClasses = mapToCssModules(classNames(\r\n    className,\r\n    'carousel',\r\n    slide && 'slide'\r\n  ), cssModule);\r\n  const innerClasses = mapToCssModules(classNames(\r\n    'carousel-inner'\r\n  ), cssModule);\r\n\r\n  const children = props.children.filter(child => child !== null && child !== undefined && typeof child !== 'boolean');\r\n\r\n  const slidesOnly = children.every(child => child.type === CCarouselItem);\r\n\r\n  if (slidesOnly) {\r\n    return (\r\n      <Context.Provider value={{direction: direction}}>\r\n        <div className={outerClasses} onMouseEnter={hoverStart} onMouseLeave={hoverEnd} ref={innerRef}>\r\n          {renderItems(children, innerClasses)}\r\n        </div>\r\n      </Context.Provider>\r\n    );\r\n  }\r\n\r\n  if (children[0] instanceof Array) {\r\n    const carouselItems = children[0];\r\n    const controlLeft = children[1];\r\n    const controlRight = children[2];\r\n\r\n    return (\r\n      <Context.Provider value={{direction: direction}}>\r\n        <div className={outerClasses} onMouseEnter={hoverStart} onMouseLeave={hoverEnd} ref={innerRef}>\r\n          {renderItems(carouselItems, innerClasses)}\r\n          {controlLeft}\r\n          {controlRight}\r\n        </div>\r\n      </Context.Provider>\r\n    );\r\n  }\r\n\r\n  const indicators = children[0];\r\n  const wrappedOnClick = (e) => {\r\n    if (typeof indicators.props.onClickHandler === 'function') {\r\n      //this.setState({ indicatorClicked: true }, () => indicators.props.onClickHandler(e));\r\n      fields.wrappedOnClickFunc = ()=>indicators.props.onClickHandler(e);\r\n      setIndicatorClicked(true);\r\n    }\r\n  };\r\n\r\n  const wrappedIndicators = React.cloneElement(indicators, { onClickHandler: wrappedOnClick });\r\n  const carouselItems = children[1];\r\n  const controlLeft = children[2];\r\n  const controlRight = children[3];\r\n\r\n  return (\r\n    <Context.Provider value={{direction: direction}}>\r\n      <div className={outerClasses} onMouseEnter={hoverStart} onMouseLeave={hoverEnd} ref={innerRef}>\r\n        {wrappedIndicators}\r\n        {renderItems(carouselItems, innerClasses)}\r\n        {controlLeft}\r\n        {controlRight}\r\n      </div>\r\n    </Context.Provider>\r\n  );\r\n\r\n}\r\n\r\nCCarouselCustom.propTypes = {\r\n  cssModule: PropTypes.object,\r\n  className: PropTypes.string,\r\n  children: PropTypes.array,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  activeIndex: PropTypes.number,\r\n  next: PropTypes.func.isRequired,\r\n  previous: PropTypes.func.isRequired,\r\n  keyboard: PropTypes.bool,\r\n  pause: PropTypes.oneOf(['hover', false]),\r\n  ride: PropTypes.oneOf(['carousel']),\r\n  interval: PropTypes.oneOfType([\r\n    PropTypes.number,\r\n    PropTypes.string,\r\n    PropTypes.bool,\r\n  ]),\r\n  mouseEnter: PropTypes.func,\r\n  mouseLeave: PropTypes.func,\r\n  slide: PropTypes.bool\r\n};\r\n\r\nCCarouselCustom.defaultProps = {\r\n  interval: 5000,\r\n  pause: 'hover',\r\n  keyboard: true,\r\n  slide: true,\r\n};\r\n\r\nexport default CCarouselCustom;\r\n"}},{"id":"99e023ec-442a-5d96-a566-1cc62ea99dd2","name":"CCarouselIndicators","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCarouselIndicators\r\n\r\nconst CCarouselIndicators = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    items,\r\n    activeIndex,\r\n    onClickHandler,\r\n    itemProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const listClasses = mapToCssModules(classNames(\r\n    className,\r\n    'carousel-indicators'\r\n  ), cssModule);\r\n\r\n  const indicators = items.map((item, idx) => {\r\n    const indicatorClasses = mapToCssModules(classNames(\r\n      { 'active': activeIndex === idx }\r\n    ), cssModule);\r\n    return (\r\n      <li\r\n        key={`${item.key || Object.values(item).join('')}`}\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          onClickHandler(idx);\r\n        }}\r\n        className={indicatorClasses}\r\n        {...itemProps}\r\n      />);\r\n  });\r\n\r\n  return (\r\n    <ol {...attributes} className={listClasses} ref={innerRef}>\r\n      {indicators}\r\n    </ol>\r\n  );\r\n\r\n}\r\n\r\nCCarouselIndicators.propTypes = {\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  items: PropTypes.array.isRequired,\r\n  activeIndex: PropTypes.number.isRequired,\r\n  onClickHandler: PropTypes.func.isRequired,\r\n  itemProps: PropTypes.object\r\n};\r\n\r\nexport default CCarouselIndicators;\r\n"}},{"id":"5db8ce6d-86d5-5e8b-81c2-1429f8222469","name":"CCarouselItem","fields":{"code":"import React, {useState, useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, TransitionTimeouts, TransitionStatuses, tagPropType} from './Shared/helper.js';\r\nimport {Transition} from 'react-transition-group';\r\nimport {Context} from './CCarouselCustom';\r\n\r\n//component - CoreUI / CCarouselItem\r\n\r\nconst CCarouselItem = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    in: isIn,\r\n    slide,\r\n    itemProps,\r\n    ...transitionProps\r\n  } = props;\r\n\r\n  const context = useContext(Context);\r\n\r\n  const [startAnimation, setStartAnimation] = useState(false);\r\n\r\n  const onEnter = (node, isAppearing)=>{\r\n    setStartAnimation(false);\r\n    props.onEnter(node, isAppearing);\r\n  }\r\n\r\n  const onEntering = (node, isAppearing)=>{\r\n    const offsetHeight = node.offsetHeight;\r\n    setStartAnimation(true);\r\n    props.onEntering(node, isAppearing);\r\n    return offsetHeight;\r\n  }\r\n\r\n  const onExit = node=>{\r\n    setStartAnimation(false);\r\n    props.onExit(node);\r\n  }\r\n\r\n  const onExiting = node=>{\r\n    setStartAnimation(true);\r\n    node.dispatchEvent(new CustomEvent('slide.bs.carousel'));\r\n    props.onExiting(node);\r\n  }\r\n\r\n  const onExited = node=>{\r\n    node.dispatchEvent(new CustomEvent('slid.bs.carousel'));\r\n    props.onExited(node);\r\n  }\r\n\r\n  //render\r\n\r\n  return (\r\n    <Transition\r\n      {...transitionProps}\r\n      enter={slide}\r\n      exit={slide}\r\n      in={isIn}\r\n      onEnter={onEnter}\r\n      onEntering={onEntering}\r\n      onExit={onExit}\r\n      onExiting={onExiting}\r\n      onExited={onExited}\r\n    >\r\n      {(status) => {\r\n        const {direction} = context;\r\n        const isActive = (status === TransitionStatuses.ENTERED) || (status === TransitionStatuses.EXITING);\r\n        const directionClassName = (status === TransitionStatuses.ENTERING || status === TransitionStatuses.EXITING) &&\r\n          startAnimation &&\r\n          (direction === 'right' ? 'carousel-item-left' : 'carousel-item-right');\r\n        const orderClassName = (status === TransitionStatuses.ENTERING) &&\r\n          (direction === 'right' ? 'carousel-item-next' : 'carousel-item-prev');\r\n        const itemClasses = mapToCssModules(classNames(\r\n          className,\r\n          'carousel-item',\r\n          isActive && 'active',\r\n          directionClassName,\r\n          orderClassName,\r\n        ), cssModule);\r\n        return (\r\n          <Tag {...itemProps} className={itemClasses} ref={innerRef}>\r\n            {children}\r\n          </Tag>\r\n        );\r\n      }}\r\n    </Transition>\r\n  );\r\n\r\n}\r\n\r\nCCarouselItem.propTypes = {\r\n  ...Transition.propTypes,\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  in: PropTypes.bool,\r\n  slide: PropTypes.bool,\r\n  itemProps: PropTypes.object,\r\n};\r\n\r\nCCarouselItem.defaultProps = {\r\n  ...Transition.defaultProps,\r\n  tag: 'div',\r\n  timeout: TransitionTimeouts.Carousel,\r\n  slide: true,\r\n};\r\n\r\nexport default CCarouselItem;\r\n"}},{"id":"b0b8ac31-40b8-5c58-a7ff-f057226ffa48","name":"CCol","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, tagPropType} from './Shared/helper.js';\r\nimport isobject from 'lodash.isobject';\r\n\r\nconst colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\r\nconst stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\r\nconst columnProps = PropTypes.oneOfType([\r\n  PropTypes.bool,\r\n  PropTypes.number,\r\n  PropTypes.string,\r\n  PropTypes.shape({\r\n    size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\r\n    order: stringOrNumberProp,\r\n    offset: stringOrNumberProp\r\n  })\r\n]);\r\nconst getColumnSizeClass = (isXs, colWidth, colSize) => {\r\n  if (colSize === true || colSize === '') {\r\n    return isXs ? 'col' : `col-${colWidth}`;\r\n  } else if (colSize === 'auto') {\r\n    return isXs ? 'col-auto' : `col-${colWidth}-auto`;\r\n  }\r\n  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;\r\n};\r\n\r\n//component - CoreUI / CCol\r\n\r\nconst CCol = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    widths,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const colClasses = [];\r\n\r\n  widths.forEach((colWidth, i) => {\r\n    let columnProp = props[colWidth];\r\n    delete attributes[colWidth];\r\n    if (!columnProp && columnProp !== '') {\r\n      return;\r\n    }\r\n    const isXs = !i;\r\n    if (isobject(columnProp)) {\r\n      const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;\r\n      const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\r\n\r\n      colClasses.push(mapToCssModules(classNames({\r\n        [colClass]: columnProp.size || columnProp.size === '',\r\n        [`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || columnProp.order === 0,\r\n        [`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || columnProp.offset === 0\r\n      }), cssModule));\r\n    } else {\r\n      const colClass = getColumnSizeClass(isXs, colWidth, columnProp);\r\n      colClasses.push(colClass);\r\n    }\r\n  });\r\n\r\n  if (!colClasses.length) {\r\n    colClasses.push('col');\r\n  }\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    colClasses\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCCol.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  xs: columnProps,\r\n  sm: columnProps,\r\n  md: columnProps,\r\n  lg: columnProps,\r\n  xl: columnProps,\r\n  widths: PropTypes.array\r\n};\r\n\r\nCCol.defaultProps = {\r\n  tag: 'div',\r\n  widths: colWidths,\r\n};\r\n\r\nexport default CCol;\r\n"}},{"id":"841d9068-af78-5d9c-96a0-9741a7e4fa7a","name":"CCollapse","fields":{"code":"import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {omit, findDOMElements, defaultToggleEvents, addMultipleEventListeners} from './Shared/helper.js';\r\nimport CCollapseCustom from './CCollapseCustom';\r\n\r\n//component - CoreUI / CCollapse\r\n\r\nconst omitKeys = ['toggleEvents', 'defaultOpen', 'custom'];\r\n\r\nconst CCollapse = props=>{\r\n\r\n  let {\r\n    custom,\r\n    //\r\n    toggle,\r\n    show\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(props.defaultOpen || false);\r\n\r\n  const fields = useRef({\r\n    togglers: null,\r\n    removeEventListeners: null\r\n  }).current;\r\n\r\n  if (!custom){\r\n    show = isOpen;\r\n    const userToggle = toggle;\r\n    toggle = e=>{\r\n      setIsOpen(!isOpen);\r\n      e.preventDefault();\r\n      if (userToggle)\r\n        userToggle(e);\r\n    }\r\n  }\r\n\r\n  //effect\r\n\r\n  useEffect(() => {\r\n    if (custom)\r\n      return;\r\n    fields.togglers = findDOMElements(props.toggler);\r\n    if (fields.togglers.length) {\r\n      fields.removeEventListeners = addMultipleEventListeners(\r\n        fields.togglers,\r\n        toggle,\r\n        props.toggleEvents\r\n      );\r\n    }\r\n    return function cleanup() {\r\n      if (fields.togglers.length && fields.removeEventListeners) {\r\n        fields.removeEventListeners();\r\n      }\r\n    };\r\n  });\r\n\r\n  //render\r\n\r\n  return <CCollapseCustom show={show} {...omit(props, omitKeys)} />;\r\n\r\n}\r\n\r\nCCollapse.propTypes = {\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  defaultOpen: PropTypes.bool,\r\n  toggler: PropTypes.string,\r\n  toggleEvents: PropTypes.arrayOf(PropTypes.string),\r\n  toggle: PropTypes.func,\r\n  show: PropTypes.bool\r\n};\r\n\r\nCCollapse.defaultProps = {\r\n  toggleEvents: defaultToggleEvents\r\n};\r\n\r\nexport default CCollapse;\r\n"}},{"id":"0f5a3171-b6fd-584f-aaf0-3ec7549dd364","name":"CCollapseCustom","fields":{"code":"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType} from './Shared/helper.js';\r\nimport {Transition} from 'react-transition-group';\r\n\r\nconst transitionStatusToClassHash = {\r\n  [TransitionStatuses.ENTERING]: 'collapsing',\r\n  [TransitionStatuses.ENTERED]: 'collapse show',\r\n  [TransitionStatuses.EXITING]: 'collapsing',\r\n  [TransitionStatuses.EXITED]: 'collapse',\r\n};\r\n\r\nconst getTransitionClass = status=>{\r\n  return transitionStatusToClassHash[status] || 'collapse';\r\n}\r\n\r\nconst getHeight = node=>{\r\n  return node.scrollHeight;\r\n}\r\n\r\n//component - CoreUI / CCollapseCustom\r\n\r\nconst CCollapseCustom = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    show,\r\n    navbar,\r\n    ...otherProps\r\n  } = props;\r\n\r\n  const [height, setHeight] = useState(null);\r\n\r\n  const onEntering = (node, isAppearing)=>{\r\n    setHeight(getHeight(node));\r\n    props.onEntering(node, isAppearing);\r\n  }\r\n\r\n  const onEntered = (node, isAppearing)=>{\r\n    setHeight(null);\r\n    props.onEntered(node, isAppearing);\r\n  }\r\n\r\n  const onExit = node=>{\r\n    setHeight(getHeight(node));\r\n    props.onExit(node);\r\n  }\r\n\r\n  const onExiting = node=>{\r\n    const _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\r\n    setHeight(0);\r\n    props.onExiting(node);\r\n  }\r\n\r\n  const onExited = node=>{\r\n    setHeight(null);\r\n    props.onExited(node);\r\n  }\r\n\r\n  //render\r\n\r\n  const transitionProps = pick(otherProps, TransitionPropTypeKeys);\r\n  const childProps = omit(otherProps, TransitionPropTypeKeys);\r\n\r\n  return (\r\n    <Transition\r\n      {...transitionProps}\r\n      in={show}\r\n      onEntering={onEntering}\r\n      onEntered={onEntered}\r\n      onExit={onExit}\r\n      onExiting={onExiting}\r\n      onExited={onExited}\r\n    >\r\n      {(status) => {\r\n        let collapseClass = getTransitionClass(status);\r\n        const classes = mapToCssModules(classNames(\r\n          className,\r\n          collapseClass,\r\n          navbar && 'navbar-collapse'\r\n        ), cssModule);\r\n        const style = height === null ? null : { height };\r\n        return (\r\n          <Tag\r\n            {...childProps}\r\n            style={{ ...childProps.style, ...style }}\r\n            className={classes}\r\n            ref={props.innerRef}\r\n          >\r\n            {children}\r\n          </Tag>\r\n        );\r\n      }}\r\n    </Transition>\r\n  );\r\n\r\n}\r\n\r\nCCollapseCustom.propTypes = {\r\n  ...Transition.propTypes,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node\r\n  ]),\r\n  tag: tagPropType,\r\n  className: PropTypes.node,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  show: PropTypes.bool,\r\n  navbar: PropTypes.bool\r\n};\r\n\r\nCCollapseCustom.defaultProps = {\r\n  ...Transition.defaultProps,\r\n  show: false,\r\n  appear: false,\r\n  enter: true,\r\n  exit: true,\r\n  tag: 'div',\r\n  timeout: TransitionTimeouts.Collapse,\r\n};\r\n\r\nexport default CCollapseCustom;\r\n"}},{"id":"9d535d9c-5680-52dc-8e51-1a5a9d1ab9b7","name":"CContainer","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CContainer\r\n\r\nconst CContainer = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    fluid,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    fluid ? 'container-fluid' : 'container'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCContainer.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fluid: PropTypes.bool\r\n};\r\n\r\nCContainer.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CContainer;\r\n"}},{"id":"624359a0-632c-55fe-9837-23cbddd4a03e","name":"CCustomInput","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CCustomInput\r\n\r\nconst CCustomInput = props=>{\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    label,\r\n    inline,\r\n    valid,\r\n    invalid,\r\n    bsSize,\r\n    wrapperProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const type = attributes.type;\r\n\r\n  const customClass = mapToCssModules(classNames(\r\n    className,\r\n    `custom-${type}`,\r\n    bsSize ? `custom-${type}-${bsSize}` : false,\r\n  ), cssModule);\r\n\r\n  const validationClassNames = mapToCssModules(classNames(\r\n    invalid && 'is-invalid',\r\n    valid && 'is-valid',\r\n  ), cssModule);\r\n\r\n  if (type === 'select') {\r\n    return <select {...attributes} className={classNames(validationClassNames, customClass)} ref={innerRef}>{children}</select>;\r\n  }\r\n\r\n  if (type === 'file') {\r\n    return (\r\n      <div className={customClass} {...wrapperProps} ref={innerRef}>\r\n        <input {...attributes} className={classNames(validationClassNames, mapToCssModules('custom-file-input', cssModule))} />\r\n        <label className={mapToCssModules('custom-file-label', cssModule)} htmlFor={attributes.id}>{label || 'Choose file'}</label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (type !== 'checkbox' && type !== 'radio' && type !== 'switch') {\r\n    return <input {...attributes} className={classNames(validationClassNames, customClass)} ref={innerRef} />;\r\n  }\r\n\r\n  const wrapperClasses = classNames(\r\n    customClass,\r\n    mapToCssModules(classNames(\r\n      'custom-control',\r\n      { 'custom-control-inline': inline }\r\n    ), cssModule)\r\n  );\r\n\r\n  return (\r\n    <div {...wrapperProps} className={wrapperClasses}>\r\n      <input\r\n        {...attributes}\r\n        type={type === 'switch' ? 'checkbox' : type}\r\n        className={classNames(validationClassNames, mapToCssModules('custom-control-input', cssModule))}\r\n        ref={innerRef}\r\n      />\r\n      <label className={mapToCssModules('custom-control-label', cssModule)} htmlFor={attributes.id}>{label}</label>\r\n      {children}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nCCustomInput.propTypes = {\r\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]),\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  label: PropTypes.node,\r\n  inline: PropTypes.bool,\r\n  valid: PropTypes.bool,\r\n  invalid: PropTypes.bool,\r\n  bsSize: PropTypes.string,\r\n  wrapperProps: PropTypes.object\r\n};\r\n\r\nexport default CCustomInput;\r\n"}},{"id":"25a6e571-7833-5b4c-9261-3820778adacf","name":"CDataTable","fields":{"code":"import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport Slot from './Shared/Slot';\r\nimport CSpinner from './CSpinner';\r\nimport CPagination from './CPagination';\r\nimport style from './CDataTable.module.css';\r\nimport {CIcon} from '@coreui/icons-react';\r\n\r\n//component - CoreUI / CTable\r\n\r\nconst CDataTable = props=>{\r\n\r\n  const {\r\n    children,\r\n    //custom,\r\n    //\r\n    innerRef,\r\n    overTableSlot,\r\n    columnHeaderSlot,\r\n    sortingIconSlot,\r\n    columnFilterSlot,\r\n    detailsSlot,\r\n    noItemViewSlot,\r\n    captionSlot,\r\n    underTableSlot,\r\n    colNameSlot,\r\n    scopedSlots,\r\n    fields,\r\n    pagination,\r\n    activePage,\r\n    itemsPerPage,\r\n    items,\r\n    sorter,\r\n    clickableRows,\r\n    columnFilter,\r\n    tableFilterValue,\r\n    tableFilter,\r\n    addTableClasses,\r\n    size,\r\n    dark,\r\n    striped,\r\n    fixed,\r\n    hover,\r\n    border,\r\n    outlined,\r\n    responsive,\r\n    footer,\r\n    itemsPerPageSelect,\r\n    loading,\r\n    change,\r\n    onChange,\r\n    customContent,\r\n    sorterValue,\r\n    columnFilterValue\r\n  } = props;\r\n\r\n  //Object.assign(style, cssModule)\r\n\r\n  const compData = useRef({firstRun:true}).current;\r\n\r\n  // vars\r\n\r\n  //\r\n  const [perPageItems, setPerPageItems] = useState(itemsPerPage);\r\n  const [sorterState, setSorterState] = useState({\r\n    column: null,\r\n    asc: true\r\n  });\r\n  const [tableFilterState, setTableFilterState] = useState(tableFilterValue);\r\n  const [columnFilterState, setColumnFilterState] = useState({});\r\n  const [page, setPage] = useState(activePage || 1);\r\n  const [passedItems, setPassedItems] = useState(items || []);\r\n\r\n  // functions\r\n\r\n  const cellClass = (item, colName, index)=>{\r\n    let classes = [];\r\n    if (item._cellClasses && item._cellClasses[colName]) {\r\n      classes.push(item._cellClasses[colName]);\r\n    }\r\n    if (fields && fields[index]._classes) {\r\n      classes.push(fields[index]._classes);\r\n    }\r\n    return classes;\r\n  }\r\n  const pretifyName = (name)=>{\r\n    return name.replace(/[-_.]/g, ' ')\r\n      .replace(/ +/g, ' ')\r\n      .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\r\n      .split(' ')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ')\r\n  }\r\n  const headerClass = (index)=>{\r\n    //const fields = this.fields ???\r\n    return fields && fields[index]._classes ? fields[index]._classes : ''\r\n  }\r\n  const isSortable = (index)=>{\r\n    return sorter && (!fields || fields[index].sorter !== false)\r\n  }\r\n  const headerStyles = (index)=>{\r\n    let style = {}\r\n    if (isSortable(index)) {\r\n      style['cursor']='pointer';\r\n    }\r\n    if (fields && fields[index] && fields[index]._style) {\r\n      let r = fields[index]._style.split(':');\r\n      style[r[0]] = r[1].substr(0, r[1].length-2)\r\n    }\r\n    return style\r\n  }\r\n  const getIconState = (index)=>{\r\n    const direction = sorterState.asc ? 'asc' : 'desc'\r\n    return rawColumnNames[index] === sorterState.column ? direction : 0\r\n  }\r\n  const iconClasses = (index)=>{\r\n    const state = getIconState(index)\r\n    return [\r\n      style['icon-transition position-absolute arrow-position'],\r\n      !state ? style['transparent'] : '',\r\n      state === 'desc' ? style['rotate-icon'] : ''\r\n    ]\r\n  }\r\n  const rowClicked = (item, index)=>{\r\n    onChange && onChange('row-clicked', item, index);\r\n  }\r\n  const changeSort = (column, index)=>{\r\n    if (isSortable(index)) {\r\n      return\r\n    }\r\n    //if column changed or sort was descending change asc to true\r\n    const state = sorterState\r\n    const columnRepeated = state.column === column\r\n    if (!sorter || !sorter.resetable) {\r\n      state.column = column\r\n    } else {\r\n      state.column = columnRepeated && state.asc === false ? null : column\r\n    }\r\n    state.asc = !(columnRepeated && state.asc)\r\n    onChange && onChange('update:sorter-value', sorterState)\r\n  }\r\n  const paginationChange = (e)=>{\r\n    onChange && onChange('pagination-change', Number(e.target.value));\r\n    setPerPageItems(Number(e.target.value))\r\n  }\r\n  const columnFilterEvent = (colName, value, type)=>{\r\n    const isLazy = columnFilter && columnFilter.lazy === true\r\n    if (isLazy && type === 'input' || !isLazy && type === 'change') {\r\n      return\r\n    }\r\n    let state = {};\r\n    state[colName] = value;\r\n    setColumnFilterState({...columnFilterState, ...state});\r\n    onChange && onChange('update:column-filter-value', columnFilterState);\r\n  }\r\n  const tableFilterChange = (value, type)=>{\r\n    const isLazy = tableFilter && tableFilter.lazy === true\r\n    if (isLazy && type === 'input' || !isLazy && type === 'change') {\r\n      return\r\n    }\r\n    setTableFilterState(value)\r\n    onChange && onChange('update:table-filter-value', tableFilterState);\r\n  }\r\n\r\n  // computed\r\n\r\n  let generatedColumnNames = Object.keys(passedItems[0] || {}).filter(el => el.charAt(0) !== '_');\r\n  let rawColumnNames = (()=>{\r\n    if (fields) {\r\n      return fields.map(el => el.key || el)\r\n    }\r\n    return generatedColumnNames\r\n  })();\r\n  let columnFiltered = (()=>{\r\n    let items = passedItems.slice()\r\n    if (columnFilter && columnFilter.external) {\r\n      return items\r\n    }\r\n    Object.entries(columnFilterState).forEach(([key, value]) => {\r\n      const columnFilter = String(value).toLowerCase()\r\n      if (columnFilter && rawColumnNames.includes(key)) {\r\n        items = items.filter(item => {\r\n          return String(item[key]).toLowerCase().includes(columnFilter)\r\n        })\r\n      }\r\n    })\r\n    return items\r\n  })();\r\n  let filterableCols = (()=>{\r\n    return rawColumnNames.filter(name => {\r\n      return generatedColumnNames.includes(name)\r\n    })\r\n  })();\r\n  let tableFiltered = (()=>{\r\n    let items = columnFiltered.slice()\r\n    if (!tableFilterState || (tableFilter && tableFilter.external)) {\r\n      return items\r\n    }\r\n    const filter = tableFilterState.toLowerCase()\r\n    const hasFilter = (item) => String(item).toLowerCase().includes(filter)\r\n    items = items.filter(item => {\r\n      return filterableCols.filter(key => hasFilter(item[key])).length\r\n    })\r\n    return items\r\n  })();\r\n  let sortedItems = (()=>{\r\n    const col = sorterState.column\r\n    if (!col || !rawColumnNames.includes(col) || sorter.external) {\r\n      return tableFiltered\r\n    }\r\n    //if values in column are to be sorted by numeric value they all have to be type number\r\n    const flip = sorterState.asc ? 1 : -1\r\n    return tableFiltered.slice().sort((a,b) => {\r\n      return (a[col] > b[col]) ? 1 * flip : ((b[col] > a[col]) ? -1 * flip : 0)\r\n    })\r\n  })();\r\n  let tableClasses = (()=>{\r\n    return [\r\n      'table',\r\n      addTableClasses,\r\n      {\r\n        [`table-${size}`]: size,\r\n        'table-dark': dark,\r\n        'table-striped': striped,\r\n        'b-table-fixed': fixed,\r\n        'table-hover': hover,\r\n        'table-bordered': border,\r\n        'border': outlined\r\n      }\r\n    ]\r\n  })();\r\n  let columnNames = (()=>{\r\n    if (fields) {\r\n      return fields.map(f => {\r\n        return f.label !== undefined ? f.label : pretifyName(f.key || f)\r\n      })\r\n    }\r\n    return rawColumnNames.map(el => pretifyName(el))\r\n  })();\r\n  let sortingIconStyles = (()=>{\r\n    return {'position-relative pr-4' : sorter }\r\n  })();\r\n  let colspan = (()=>{\r\n    return rawColumnNames.length\r\n  })();\r\n  let totalPages = (()=>{\r\n    return Math.ceil((sortedItems.length) / perPageItems) || 1\r\n  })();\r\n  //\r\n  let computedPage = pagination ? page : activePage;\r\n  let firstItemIndex = (computedPage - 1) * perPageItems || 0;\r\n  let paginatedItems = sortedItems.slice(\r\n      firstItemIndex,\r\n      firstItemIndex + perPageItems\r\n    )\r\n  let currentItems = computedPage ? paginatedItems : sortedItems;\r\n\r\n  let tableFilterData;\r\n  if (tableFilter)\r\n  tableFilterData = {\r\n    label: tableFilter.label || 'Filter:',\r\n    placeholder: tableFilter.placeholder || 'type string...'\r\n  }\r\n\r\n  // watch\r\n\r\n  //itemsPerPage\r\n  useMemo(()=>{\r\n    if (compData.firstRun) return;\r\n    setPerPageItems(itemsPerPage);\r\n  }, [itemsPerPage]);\r\n\r\n  //sorterValue\r\n  useMemo(()=>{\r\n    const asc = sorterValue.asc === false ? false : true;\r\n    setSorterState(Object.assign({}, { asc, column: sorterValue.column }));\r\n  }, [sorterValue]);\r\n\r\n  //tableFilterValue\r\n  useMemo(()=>{\r\n    if (compData.firstRun) return;\r\n    setTableFilterState(tableFilterValue);\r\n  }, [tableFilterValue]);\r\n\r\n  //columnFilterValue\r\n  useMemo(()=>{\r\n    setColumnFilterState(Object.assign({}, columnFilterValue));\r\n  }, [columnFilterValue]);\r\n\r\n  //items\r\n  useMemo(()=>{\r\n    compData.oldItems = items;\r\n    if (compData.firstRun) return;\r\n    if (items.length !== compData.oldItems.length ||\r\n      JSON.stringify(items) !== JSON.stringify(compData.oldItems)) {\r\n      setPassedItems(items||[]);\r\n    }\r\n  }, [items]);\r\n\r\n  //totalPages\r\n  useMemo(()=>{\r\n    onChange && onChange('pages-change', totalPages);\r\n  }, [totalPages]);\r\n\r\n  //get render par\r\n  if (change)\r\n    change();\r\n\r\n  // render\r\n\r\n  //custom\r\n  //if (custom)\r\n  //  return (<CTableCustom {...attributes} custom={customContent}>{children}</CTableCustom>);\r\n\r\n  compData.firstRun = false;\r\n\r\n  let paginationProps;\r\n  if (typeof pagination === 'object')\r\n    paginationProps = {...pagination}\r\n  else {\r\n    paginationProps = {}\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <div ref={innerRef}>\r\n      {\r\n        itemsPerPageSelect || tableFilter ?\r\n        <div className=\"row my-2 mx-0\">\r\n          {\r\n            tableFilter ?\r\n            <div className=\"col-sm-6 form-inline p-0\">\r\n              <label className=\"mr-2\">{tableFilterData.label}</label>\r\n              <input\r\n                className=\"form-control table-filter\"\r\n                type=\"text\"\r\n                placeholder={tableFilterData.placeholder}\r\n                onInput={(e)=>{tableFilterChange(e.target.value, 'input')}}\r\n                onChange={(e)=>{tableFilterChange(e.target.value, 'change')}}\r\n                value={tableFilterState}\r\n              />\r\n            </div>:''\r\n          }\r\n          {\r\n            itemsPerPageSelect ?\r\n            <div\r\n              className={'col-sm-6 p-0' + (!tableFilter ? 'offset-sm-6' : '')}\r\n            >\r\n              <div className=\"form-inline justify-content-sm-end\">\r\n                <label className=\"mr-2\">Items per page:</label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={paginationChange}\r\n                  value={0}\r\n                >\r\n                  <option value=\"\" disabled hidden>\r\n                    {perPageItems}\r\n                  </option>\r\n                  {[5,10,20,50].map((number, key)=>{\r\n                    return (\r\n                      <option\r\n                        val={number}\r\n                        key={key}\r\n                      >\r\n                        {number}\r\n                      </option>\r\n                    )\r\n                  })}\r\n                </select>\r\n              </div>\r\n            </div>:''\r\n          }\r\n        </div>:''\r\n      }\r\n    </div>\r\n\r\n    <Slot content={overTableSlot} />\r\n\r\n    <div className={`position-relative ${responsive ? 'table-responsive' : '' }`}>\r\n      <table className={classNames(tableClasses)}>\r\n        <thead>\r\n          <tr>\r\n            {\r\n              columnNames.map((name, index)=>{\r\n                return (\r\n                  <th\r\n                    onClick={()=>{changeSort(rawColumnNames[index], index)}}\r\n                    className={classNames([headerClass(index), sortingIconStyles])}\r\n                    style={headerStyles(index)}\r\n                    key={index}\r\n                  >\r\n                    <Slot content={columnHeaderSlot[`${rawColumnNames[index]}`]}>\r\n                      <div className=\"d-inline\">{name}</div>\r\n                    </Slot>\r\n                    {\r\n                      isSortable(index)?\r\n                        <Slot\r\n                          content={sortingIconSlot}\r\n                          state={getIconState(index)}\r\n                          classes={iconClasses(index)}\r\n                        >\r\n                          <CIcon\r\n                            className={classNames(iconClasses(index))}\r\n                            width=\"18\"\r\n                            content=\"$options.icons.cilArrowTop\"\r\n                            name=\"cil-arrow-top\"\r\n                          />\r\n                        </Slot>:''\r\n                    }\r\n                  </th>\r\n                )\r\n              })\r\n            }\r\n          </tr>\r\n          {\r\n            columnFilter ?\r\n              <tr className=\"table-sm\">\r\n                {\r\n                  rawColumnNames.map((colName, index)=>{\r\n                    return (\r\n                      <th className={classNames(headerClass(index))} key={index}>\r\n                        <Slot content={columnFilterSlot[`${rawColumnNames[index]}`]}>\r\n                          {\r\n                            !fields || fields[index].filter !== false ?\r\n                              <input\r\n                                className=\"w-100 table-filter\"\r\n                                onInput={(e)=>{columnFilterEvent(colName, e.target.value, 'input')}}\r\n                                onChange={(e)=>{columnFilterEvent(colName, e.target.value, 'change')}}\r\n                                value={columnFilterState[colName]}\r\n                              />:''\r\n                          }\r\n                        </Slot>\r\n                      </th>\r\n                    )\r\n                  })\r\n                }\r\n              </tr>:''\r\n          }\r\n        </thead>\r\n        <tbody\r\n          style={clickableRows ? {cursor: 'pointer'} : null}\r\n          className=\"position-relative\"\r\n        >\r\n          {currentItems.map((item, itemIndex)=>{\r\n            return (\r\n              <React.Fragment>\r\n              <tr\r\n                className={classNames(item._classes)}\r\n                tabIndex={clickableRows ? 0 : null}\r\n                onClick={()=>{rowClicked(item, itemIndex + firstItemIndex)}}\r\n                key={itemIndex}\r\n              >\r\n                {\r\n                  rawColumnNames.map((colName, index)=>{\r\n                    if (scopedSlots[colName])\r\n                      return(\r\n                        <Slot\r\n                          content={scopedSlots[colName](item, itemIndex + firstItemIndex)}\r\n                          key={index}\r\n                        />\r\n                      )\r\n                    else\r\n                      return (\r\n                        <td\r\n                          className={classNames(cellClass(item, colName, index))}\r\n                          key={index}\r\n                        >\r\n                          {String(item[colName])}\r\n                        </td>\r\n                      )\r\n                  })\r\n                }\r\n              </tr>\r\n              {\r\n                scopedSlots.details?\r\n                  <tr\r\n                    className=\"p-0\"\r\n                    style={{border: 'none !important'}}\r\n                    key={'details' + itemIndex}\r\n                  >\r\n                    <td\r\n                      colSpan={colspan}\r\n                      className=\"p-0\"\r\n                      style={{border: 'none !important'}}\r\n                    >\r\n                      <Slot\r\n                        content={scopedSlots.details(item, itemIndex + firstItemIndex)}\r\n                      />\r\n                    </td>\r\n                  </tr>:''\r\n              }\r\n              </React.Fragment>\r\n            )\r\n          })}\r\n          {\r\n            !currentItems.length ?\r\n              <tr>\r\n                <td colSpan={colspan}>\r\n                  <Slot content={noItemViewSlot}>\r\n                    <div className=\"text-center my-5\">\r\n                      <h2>\r\n                        {passedItems.length ? 'No filtering results ' : 'No items' }\r\n                        <CIcon\r\n                          width=\"30\"\r\n                          name=\"cilBan\"\r\n                          content=\"$options.icons.cilBan\"\r\n                          className=\"text-danger mb-2\"\r\n                        />\r\n                      </h2>\r\n                    </div>\r\n                  </Slot>\r\n                </td>\r\n              </tr>:''\r\n          }\r\n        </tbody>\r\n        {\r\n          footer && currentItems.length > 0 ?\r\n            <tfoot>\r\n              <tr>\r\n                {\r\n                  columnNames.map((name, index)=>{\r\n                    return(\r\n                      <th\r\n                        onClick={changeSort(rawColumnNames[index], index)}\r\n                        className={classNames([headerClass(index), sortingIconStyles])}\r\n                        style={headerStyles(index)}\r\n                        key={index}\r\n                      >\r\n                        <Slot content={columnHeaderSlot[`${rawColumnNames[index]}`]}>\r\n                          <div className=\"d-inline\">{name}</div>\r\n                        </Slot>\r\n                        {\r\n                          isSortable(index) ?\r\n                            <Slot\r\n                              content={sortingIconSlot}\r\n                              state={getIconState(index)}\r\n                            >\r\n                              <CIcon\r\n                                width=\"18\"\r\n                                name=\"cil-arrow-top\"\r\n                                content=\"$options.icons.cilArrowTop\"\r\n                                className={classNames(iconClasses(index))}\r\n                              />\r\n                            </Slot>:''\r\n                        }\r\n                      </th>\r\n                    )\r\n                  })\r\n                }\r\n              </tr>\r\n            </tfoot> : ''\r\n        }\r\n        <Slot content={captionSlot} />\r\n      </table>\r\n\r\n      {\r\n        loading ?\r\n          <Slot content={children}>\r\n            <div style={{\r\n              position: 'absolute',\r\n              left:'0',\r\n              top:'0',\r\n              bottom:'0',\r\n              right:'0',\r\n              backgroundColor:'rgb(255,255,255,0.4)'\r\n            }}>\r\n              <div style={{\r\n                position:'absolute',\r\n                bottom:'50%',\r\n                left:'50%',\r\n                transform:'translateX(-50%)'\r\n              }}>\r\n                <CSpinner color=\"success\"/>\r\n              </div>\r\n            </div>\r\n          </Slot>:''\r\n      }\r\n\r\n    </div>\r\n\r\n    <Slot content={underTableSlot} />\r\n\r\n    {\r\n      //:activePage.sync=\"page\"\r\n      //v-bind={typeof pagination === 'object' ? {...pagination} : null}\r\n      pagination ?\r\n        <CPagination\r\n          style={{display: totalPages > 0 ? 'inline' : 'none'}}\r\n          pages={totalPages}\r\n          {...paginationProps}\r\n        />:''\r\n    }\r\n\r\n    </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nCDataTable.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  overTableSlot: PropTypes.node,\r\n  colNameSlot: PropTypes.node,//?\r\n  columnHeaderSlot: PropTypes.array,\r\n  sortingIconSlot: PropTypes.node,\r\n  columnFilterSlot: PropTypes.node,\r\n  detailsSlot: PropTypes.node,//?\r\n  noItemViewSlot: PropTypes.node,\r\n  captionSlot: PropTypes.node,\r\n  underTableSlot: PropTypes.node,\r\n  scopedSlots: PropTypes.object,\r\n  fields: PropTypes.array,\r\n  pagination: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  activePage: PropTypes.number,\r\n  itemsPerPage: PropTypes.number,\r\n  items: PropTypes.array,\r\n  sorter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  clickableRows: PropTypes.bool,\r\n  columnFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  tableFilterValue: PropTypes.string,\r\n  tableFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n  addTableClasses: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\r\n  size: PropTypes.string,\r\n  dark: PropTypes.bool,\r\n  striped: PropTypes.bool,\r\n  fixed: PropTypes.bool,\r\n  hover: PropTypes.bool,\r\n  border: PropTypes.bool,\r\n  outlined: PropTypes.bool,\r\n  responsive: PropTypes.bool,\r\n  footer: PropTypes.bool,\r\n  itemsPerPageSelect: PropTypes.bool,\r\n  loading: PropTypes.bool,\r\n  change: PropTypes.func, //+\r\n  onChange: PropTypes.func,\r\n  sorterValue: PropTypes.object,\r\n  columnFilterValue: PropTypes.object\r\n}\r\n\r\nCDataTable.defaultProps = {\r\n  itemsPerPage: 10,\r\n  responsive: true,\r\n  columnHeaderSlot: [],\r\n  columnFilterSlot: [],\r\n  sorterValue: {}\r\n}\r\n\r\nCDataTable.Context = React.createContext({});\r\n\r\nexport default CDataTable;\r\n"}},{"id":"b48256b3-892c-56f2-b0a4-b2d5fbf3bbcf","name":"CDropdown","fields":{"code":"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CDropdownCustom from './CDropdownCustom';\r\n\r\n//component - CoreUI / CDropdown\r\n\r\nconst CDropdown = props=>{\r\n\r\n  let {\r\n    custom,\r\n    //\r\n    toggle,\r\n    show,\r\n    defaultOpen,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //custom\r\n\r\n  const [isOpen, setIsOpen] = useState(defaultOpen || false);\r\n\r\n  if (!custom){\r\n    const userToggle = toggle;\r\n    show = isOpen;\r\n    toggle = ()=>{\r\n      setIsOpen(!isOpen);\r\n      if (userToggle)\r\n        userToggle();\r\n    }\r\n  }\r\n\r\n  //render\r\n\r\n  return <CDropdownCustom\r\n    {...attributes}\r\n    show={show}\r\n    toggle={toggle}\r\n  />;\r\n\r\n}\r\n\r\nCDropdown.propTypes = {\r\n  ...CDropdownCustom.propTypes,\r\n  custom: PropTypes.bool,\r\n  //\r\n  defaultOpen: PropTypes.bool,\r\n};\r\n\r\nexport default CDropdown;\r\n"}},{"id":"4a46d777-4aea-5121-8fac-57d011346264","name":"CDropdownCustom","fields":{"code":"import React, {useEffect, useRef} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules, omit, keyCodes} from './Shared/helper.js';\r\nimport {Manager} from 'react-popper';\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CDropdownCustom\r\n\r\nconst CDropdownCustom = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    show,\r\n    group,\r\n    size,\r\n    inNav,\r\n    setActiveFromChild,\r\n    active,\r\n    addonType,\r\n    ...attributes\r\n  } = omit(props, ['toggle', 'disabled', 'inNavbar', 'direction']);\r\n\r\n  const fields = useRef({\r\n    firstRender: true,\r\n    ref: {current: null}\r\n  }).current;\r\n\r\n  const reference = (r)=>{\r\n    fields.ref.current = r;\r\n    innerRef && innerRef(r);\r\n  }\r\n\r\n  const getContainer = ()=>{\r\n    if (fields._$container) return fields._$container;\r\n    fields._$container = ReactDOM.findDOMNode(fields.ref.current);\r\n    return fields._$container;\r\n  }\r\n\r\n  const getMenuCtrl = ()=>{\r\n    if (fields._$menuCtrl) return fields._$menuCtrl;\r\n    fields._$menuCtrl = getContainer().querySelector('[aria-expanded]');\r\n    return fields._$menuCtrl;\r\n  }\r\n\r\n  const getMenuItems = ()=>{\r\n    return [].slice.call(getContainer().querySelectorAll('[role=\"menuitem\"]'));\r\n  }\r\n\r\n  const addEvents = ()=>{\r\n    ['click', 'touchstart', 'keyup'].forEach(event =>\r\n      document.addEventListener(event, handleDocumentClick, true)\r\n    );\r\n    fields.handleDocumentClick = handleDocumentClick;\r\n  }\r\n\r\n  const removeEvents = ()=>{\r\n    ['click', 'touchstart', 'keyup'].forEach(event =>\r\n      document.removeEventListener(event, fields.handleDocumentClick, true)\r\n    );\r\n  }\r\n\r\n  const handleDocumentClick = e=>{\r\n    if (e && (e.which === 3 || (e.type === 'keyup' && e.which !== keyCodes.tab))) return;\r\n    const container = getContainer();\r\n    if (container.contains(e.target) && container !== e.target && (e.type !== 'keyup' || e.which === keyCodes.tab)) {\r\n      return;\r\n    }\r\n    toggle(e);\r\n  }\r\n\r\n  const handleKeyDown = e=>{\r\n    if (\r\n      /input|textarea/i.test(e.target.tagName)\r\n      || (keyCodes.tab === e.which && e.target.getAttribute('role') !== 'menuitem')\r\n    ) {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    if (fields.disabled) return;\r\n    if (getMenuCtrl() === e.target) {\r\n      if (\r\n        !fields.isOpen\r\n        && ([keyCodes.space, keyCodes.enter, keyCodes.up, keyCodes.down].indexOf(e.which) > -1)\r\n      ) {\r\n        toggle(e);\r\n        setTimeout(()=>getMenuItems()[0].focus());\r\n      }\r\n    }\r\n    if (fields.isOpen && (e.target.getAttribute('role') === 'menuitem')) {\r\n      if ([keyCodes.tab, keyCodes.esc].indexOf(e.which) > -1) {\r\n        toggle(e);\r\n        getMenuCtrl().focus();\r\n      } else if ([keyCodes.space, keyCodes.enter].indexOf(e.which) > -1) {\r\n        e.target.click();\r\n        getMenuCtrl().focus();\r\n      } else if (\r\n        [keyCodes.down, keyCodes.up].indexOf(e.which) > -1\r\n        || ([keyCodes.n, keyCodes.p].indexOf(e.which) > -1 && e.ctrlKey)\r\n      ) {\r\n        const $menuitems = getMenuItems();\r\n        let index = $menuitems.indexOf(e.target);\r\n        if (keyCodes.up === e.which || (keyCodes.p === e.which && e.ctrlKey)) {\r\n          index = index !== 0 ? index - 1 : $menuitems.length - 1;\r\n        } else if (keyCodes.down === e.which || (keyCodes.n === e.which && e.ctrlKey)) {\r\n          index = index === $menuitems.length - 1 ? 0 : index + 1;\r\n        }\r\n        $menuitems[index].focus();\r\n      } else if (keyCodes.end === e.which) {\r\n        const $menuitems = getMenuItems();\r\n        $menuitems[$menuitems.length - 1].focus();\r\n      } else if (keyCodes.home === e.which) {\r\n        const $menuitems = getMenuItems();\r\n        $menuitems[0].focus();\r\n      } else if ((e.which >= 48) && (e.which <= 90)) {\r\n        const $menuitems = getMenuItems();\r\n        const charPressed = String.fromCharCode(e.which).toLowerCase();\r\n        for (let i = 0; i < $menuitems.length; i += 1) {\r\n          const firstLetter = $menuitems[i].textContent && $menuitems[i].textContent[0].toLowerCase();\r\n          if (firstLetter === charPressed) {\r\n            $menuitems[i].focus();\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleProps = ()=>{\r\n    if (props.show) {\r\n      addEvents();\r\n    } else {\r\n      removeEvents();\r\n    }\r\n  }\r\n\r\n  const toggle = e=>{\r\n    if (fields.disabled) {\r\n      return e && e.preventDefault();\r\n    }\r\n    return props.toggle(e);\r\n  }\r\n\r\n  //effect\r\n\r\n  useEffect(() => {\r\n    if (fields.firstRender){\r\n      return\r\n    }\r\n    handleProps();\r\n  }, [props.show]);\r\n\r\n  useEffect(() => {\r\n    fields.firstRender = false;\r\n    handleProps();\r\n    return function cleanup() {\r\n      removeEvents();\r\n    };\r\n  }, []);\r\n\r\n  //render\r\n\r\n  fields.disabled = props.disabled;\r\n  fields.isOpen = props.show;\r\n\r\n  const direction = props.direction; //(props.direction === 'down' && dropup) ? 'up' :\r\n\r\n  //attributes.tag\r\n  let Tag = attributes.tag || (inNav ? 'li' : 'div');\r\n\r\n  let subItemIsActive = false;\r\n\r\n  if (setActiveFromChild){\r\n    React.Children.map(props.children[1].props.children,\r\n      (dropdownItem) => {\r\n        if (dropdownItem && dropdownItem.props.active) subItemIsActive = true;\r\n      }\r\n    );\r\n  }\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    direction !== 'down' && `drop${direction}`,\r\n    inNav && active ? 'active' : false,\r\n    setActiveFromChild && subItemIsActive ? 'active' : false,\r\n    {\r\n      [`input-group-${addonType}`]: addonType,\r\n      'btn-group': group,\r\n      [`btn-group-${size}`]: !!size,\r\n      'dropdown': !group && !addonType,\r\n      'show': show,\r\n      'nav-item': inNav\r\n    }\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Context.Provider value={{\r\n      toggle: props.toggle,\r\n      isOpen: props.show,\r\n      direction: props.direction, //(props.direction === 'down' && props.dropup) ? 'up' :\r\n      inNavbar: props.inNavbar,\r\n    }}>\r\n      <Tag\r\n        {...attributes}\r\n        className={classes}\r\n        onKeyDown={handleKeyDown}\r\n        ref={reference}\r\n      >\r\n        <Manager>\r\n          {props.children}\r\n        </Manager>\r\n      </Tag>\r\n    </Context.Provider>\r\n  );\r\n\r\n}\r\n\r\nCDropdownCustom.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n  group: PropTypes.bool,\r\n  show: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  active: PropTypes.bool,\r\n  addonType: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['prepend', 'append'])]),\r\n  size: PropTypes.string,\r\n  toggle: PropTypes.func,\r\n  inNav: PropTypes.bool,\r\n  inNavbar: PropTypes.bool,\r\n  setActiveFromChild: PropTypes.bool,\r\n};\r\n\r\nCDropdownCustom.defaultProps = {\r\n  show: false,\r\n  direction: 'down',\r\n  active: false,\r\n  addonType: false,\r\n  inNav: false,\r\n  inNavbar: false,\r\n  setActiveFromChild: false,\r\n  group: true\r\n};\r\n\r\nexport default CDropdownCustom;\r\n"}},{"id":"924c3dc1-7c5f-5f0b-bdf6-7c64b4e57e6b","name":"CDropdownItem","fields":{"code":"import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, omit, tagPropType} from './Shared/helper.js';\r\nimport {Context} from './CDropdownCustom';\r\n\r\n//component - CoreUI / CDropdownItem\r\n\r\nconst CDropdownItem = props=>{\r\n\r\n  let {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    color,\r\n    divider,\r\n    header,\r\n    active,\r\n    ...attributes\r\n  } = omit(props, ['toggle']);\r\n\r\n  const context = useContext(Context);\r\n\r\n  const onClick = e=>{\r\n    if (props.disabled || props.header || props.divider) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    if (props.onClick) {\r\n      props.onClick(e);\r\n    }\r\n    if (props.toggle) {\r\n      context.toggle(e);\r\n    }\r\n  }\r\n\r\n  const getTabIndex = ()=>{\r\n    if (props.disabled || props.header || props.divider) {\r\n      return '-1';\r\n    }\r\n    return '0';\r\n  }\r\n\r\n  //render\r\n\r\n  const tabIndex = getTabIndex();\r\n  const role = tabIndex > -1 ? 'menuitem' : undefined;\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    header ? 'dropdown-header' : divider ? 'dropdown-divider' : 'dropdown-item',\r\n    active ? 'active' : null,\r\n    color ? 'bg-'+color : null,\r\n    {\r\n      disabled: attributes.disabled,\r\n    }\r\n  ), cssModule);\r\n\r\n  if (Tag === 'button') {\r\n    if (header) {\r\n      Tag = 'h6';\r\n    } else if (divider) {\r\n      Tag = 'div';\r\n    } else if (props.href) {\r\n      Tag = 'a';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Tag\r\n      type={(Tag === 'button' && (attributes.onClick || props.toggle)) ? 'button' : undefined}\r\n      {...attributes}\r\n      tabIndex={tabIndex}\r\n      role={role}\r\n      className={classes}\r\n      onClick={onClick}\r\n      ref={innerRef}\r\n    />\r\n  );\r\n\r\n}\r\n\r\nCDropdownItem.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  color: PropTypes.string,\r\n  href: PropTypes.string,\r\n  divider: PropTypes.bool,\r\n  header: PropTypes.bool,\r\n  active: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  toggle: PropTypes.bool\r\n};\r\n\r\nCDropdownItem.defaultProps = {\r\n  tag: 'button',\r\n  toggle: true\r\n};\r\n\r\nexport default CDropdownItem;\r\n"}},{"id":"a90d2ab0-0126-5a35-8986-697f874d79a0","name":"CDropdownMenu","fields":{"code":"import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport {Popper} from 'react-popper';\r\nimport {Context} from './CDropdownCustom';\r\n\r\n//component - CoreUI / CDropdownMenu\r\n\r\nconst CDropdownMenu = props=>{\r\n\r\n  const {\r\n    className,\r\n    children,\r\n    cssModule,\r\n    right,\r\n    tag,\r\n    flip,\r\n    modifiers,\r\n    persist,\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const noFlipModifier = { flip: { enabled: false } };\r\n\r\n  const directionPositionMap = {\r\n    up: 'top',\r\n    left: 'left',\r\n    right: 'right',\r\n    down: 'bottom',\r\n  };\r\n\r\n  const context = useContext(Context);\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'dropdown-menu',\r\n    {\r\n      'dropdown-menu-right': right,\r\n      'show': context.isOpen,\r\n    }\r\n  ), cssModule);\r\n\r\n  let Tag = tag;\r\n  let placement;\r\n  let myModifiers = modifiers;\r\n\r\n  if (persist || (context.isOpen && !context.inNavbar)) {\r\n    Tag = Popper;\r\n    const position1 = directionPositionMap[context.direction] || 'bottom';\r\n    const position2 = right ? 'end' : 'start';\r\n    placement = `${position1}-${position2}`;\r\n    //attributes.component = tag;\r\n    myModifiers = !flip ? {\r\n      ...modifiers,\r\n      ...noFlipModifier,\r\n    } : modifiers;\r\n  }\r\n\r\n  /*\r\n  x-placement={attributes.placement}\r\n  //ref={innerRef}\r\n  */\r\n  return (\r\n    <Tag\r\n      placement = {placement}\r\n      modifiers = {myModifiers}\r\n    >\r\n      {({ ref, style, placement, arrowProps }) => {\r\n        //console.log(style, children);\r\n        return (\r\n          <div\r\n            {...attributes}\r\n            tabIndex=\"-1\"\r\n            role=\"menu\"\r\n            aria-hidden={!context.isOpen}\r\n            className={classes}\r\n            ref={innerRef}\r\n            data-placement={placement}\r\n          >\r\n            {children}\r\n          </div>\r\n        )}\r\n      }\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\n\r\nCDropdownMenu.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node.isRequired,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  right: PropTypes.bool,\r\n  flip: PropTypes.bool,\r\n  modifiers: PropTypes.object,\r\n  persist: PropTypes.bool,\r\n};\r\n\r\nCDropdownMenu.defaultProps = {\r\n  tag: 'div',\r\n  flip: true,\r\n};\r\n\r\nexport default CDropdownMenu;\r\n"}},{"id":"89bf3b90-6b41-5e26-a052-0f1af6f7bb95","name":"CDropdownToggle","fields":{"code":"import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport {Reference} from 'react-popper';\r\nimport CButton from './CButton';\r\nimport {Context} from './CDropdownCustom';\r\n\r\n//component - CoreUI / CDropdownToggle\r\n\r\nconst CDropdownToggle = props=>{\r\n\r\n  const {\r\n    className,\r\n    color,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    caret,\r\n    split,\r\n    nav,\r\n    header,\r\n    tag,\r\n    togglerHtml,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const context = useContext(Context);\r\n\r\n  const onClick = e=>{\r\n    if (props.disabled) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    if (props.nav && !props.tag) {\r\n      e.preventDefault();\r\n    }\r\n    if (props.onClick) {\r\n      props.onClick(e);\r\n    }\r\n    context.toggle(e);\r\n  }\r\n\r\n  //render\r\n\r\n  const ariaLabel = attributes['aria-label'] || 'Toggle Dropdown';\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    {\r\n      'dropdown-toggle': caret || split,\r\n      'dropdown-toggle-split': split,\r\n      'nav-link': nav && !header,\r\n      'c-header-nav-link': nav && header\r\n    }\r\n  ), cssModule);\r\n\r\n  const children = togglerHtml || attributes.children || <span className=\"sr-only\">{ariaLabel}</span>;\r\n\r\n  let Tag;\r\n  let isButton = false;\r\n\r\n  if (nav  && !tag) {\r\n    Tag = 'a';\r\n    attributes.href = '#';\r\n  } else if (!tag) {\r\n    Tag = CButton;\r\n    attributes.color = color;\r\n    attributes.cssModule = cssModule;\r\n    isButton = true;\r\n  } else {\r\n    Tag = tag;\r\n  }\r\n\r\n  if (context.inNavbar) {\r\n    if (isButton)\r\n      return (\r\n        <Tag\r\n          {...attributes}\r\n          className={classes}\r\n          onClick={onClick}\r\n          aria-expanded={context.isOpen}\r\n        >\r\n          {children}\r\n        </Tag>\r\n      );\r\n    else\r\n      return (\r\n        <Tag\r\n          {...attributes}\r\n          className={classes}\r\n          onClick={onClick}\r\n          aria-expanded={context.isOpen}\r\n          ref={innerRef}\r\n        >\r\n          {children}\r\n        </Tag>\r\n      );\r\n  }\r\n\r\n  return (\r\n    <Reference>\r\n      {({ ref }) => (\r\n        <Tag\r\n          ref={ref}\r\n          {...attributes}\r\n          className={classes}\r\n          onClick={onClick}\r\n          aria-expanded={context.isOpen}\r\n          ref={innerRef}\r\n        >\r\n          {children}\r\n        </Tag>\r\n      )}\r\n    </Reference>\r\n  );\r\n}\r\n\r\nCDropdownToggle.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  caret: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  'aria-haspopup': PropTypes.bool,\r\n  split: PropTypes.bool,\r\n  togglerHtml: PropTypes.node,\r\n  nav: PropTypes.bool,\r\n  header: PropTypes.bool,\r\n};\r\n\r\nCDropdownToggle.defaultProps = {\r\n  'aria-haspopup': true\r\n};\r\n\r\nexport default CDropdownToggle;\r\n"}},{"id":"782391b0-8f0c-5a08-a967-112fdc77091a","name":"CEmbed","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, tagPropType} from './Shared/helper.js';\r\nimport CEmbedObject from './CEmbedObject';\r\n\r\n//component - CoreUI / CEmbed\r\n\r\nconst CEmbed = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    innerRef,\r\n    //\r\n    ratio,\r\n    type,\r\n    src,\r\n    objectClassName,\r\n    objectProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    ratio ? `embed-responsive-${ratio}` : null,\r\n    'embed-responsive'\r\n  ), cssModule);\r\n\r\n  const objectClasses = mapToCssModules(classNames(\r\n    objectClassName\r\n  ), cssModule);\r\n\r\n  if (!custom){\r\n    return (\r\n      <Tag className={classes} {...attributes} ref={innerRef}>\r\n        <CEmbedObject {...objectProps} className={objectClasses} type={type} src={src} />\r\n      </Tag>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCEmbed.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  ratio: PropTypes.string,\r\n  objectClassName: PropTypes.string,\r\n  objectProps: PropTypes.object,\r\n  ///\r\n  type: PropTypes.string,\r\n  src: PropTypes.string,\r\n};\r\n\r\nCEmbed.defaultProps = {\r\n  tag: 'span',\r\n  ratio: '16by9',\r\n  type: 'iframe',\r\n};\r\n\r\nexport default CEmbed;\r\n"}},{"id":"7b869b16-d8e8-555b-aff4-1af38533ea4c","name":"CEmbedObject","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, tagPropType} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CEmbedObject\r\n\r\nconst CEmbedObject = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'embed-responsive-item'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCEmbedObject.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCEmbedObject.defaultProps = {\r\n  tag: 'iframe'\r\n};\r\n\r\nexport default CEmbedObject;\r\n"}},{"id":"5fac423e-e94f-53b8-a7f3-3547e10e14e3","name":"CFade","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, omit, pick, TransitionPropTypeKeys, TransitionTimeouts, tagPropType} from './Shared/helper.js';\r\nimport {Transition} from 'react-transition-group';\r\n\r\n//component - CoreUI / CFade\r\n\r\nconst CFade = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    children,\r\n    //\r\n    innerRef,\r\n    baseClass,\r\n    baseClassActive,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const transitionProps = pick(attributes, TransitionPropTypeKeys);\r\n  const childProps = omit(attributes, TransitionPropTypeKeys);\r\n\r\n  return (\r\n    <Transition {...transitionProps}>\r\n      {(status) => {\r\n        const isActive = status === 'entered';\r\n        const classes = mapToCssModules(classNames(\r\n          className,\r\n          baseClass,\r\n          isActive && baseClassActive\r\n        ), cssModule);\r\n        return (\r\n          <Tag className={classes} {...childProps} ref={innerRef}>\r\n            {children}\r\n          </Tag>\r\n        );\r\n      }}\r\n    </Transition>\r\n  );\r\n\r\n}\r\n\r\nCFade.propTypes = {\r\n  ...Transition.propTypes,\r\n  tag: tagPropType,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node\r\n  ]),\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  baseClass: PropTypes.string,\r\n  baseClassActive: PropTypes.string\r\n};\r\n\r\nCFade.defaultProps = {\r\n  ...Transition.defaultProps,\r\n  tag: 'div',\r\n  //\r\n  baseClass: 'fade',\r\n  baseClassActive: 'show',\r\n  timeout: TransitionTimeouts.Fade,\r\n  appear: true,\r\n  enter: true,\r\n  exit: true,\r\n  in: true,\r\n};\r\n\r\nexport default CFade;\r\n"}},{"id":"2b1a7712-be78-5a8b-acf8-b2c028d823a9","name":"CFooter","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CFooter\r\n\r\nconst CFooter = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    fixed,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    fixed ? 'c-footer-fixed' : null,\r\n    'c-footer'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCFooter.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fixed: PropTypes.bool\r\n};\r\n\r\nCFooter.defaultProps = {\r\n  tag: 'footer',\r\n  fixed: false\r\n};\r\n\r\nexport default CFooter;\r\n"}},{"id":"3896b6c7-02ad-5097-8901-33742a6cb985","name":"CForm","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CForm\r\n\r\nconst CForm = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    innerRef,\r\n    //\r\n    inline,\r\n    wasValidated,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    inline ? 'form-inline' : false,\r\n    wasValidated ? 'was-validated' : false\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCForm.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  inline: PropTypes.bool,\r\n  wasValidated: PropTypes.bool\r\n};\r\n\r\nCForm.defaultProps = {\r\n  tag: 'form',\r\n};\r\n\r\nexport default CForm;\r\n"}},{"id":"a4eb303f-4488-5bd6-81db-a7a050029790","name":"CFormFeedback","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CFormFeedback\r\n\r\nconst CFormFeedback = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    valid,\r\n    tooltip,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const validMode = tooltip ? 'tooltip' : 'feedback';\r\n  const classes = mapToCssModules(\r\n    classNames(\r\n      className,\r\n      valid ? `valid-${validMode}` : `invalid-${validMode}`\r\n    ),\r\n    cssModule\r\n  );\r\n\r\n  return <Tag {...attributes} className={classes} ref={innerRef} />;\r\n\r\n}\r\n\r\nCFormFeedback.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  valid: PropTypes.bool,\r\n  tooltip: PropTypes.bool\r\n};\r\n\r\nCFormFeedback.defaultProps = {\r\n  tag: 'div',\r\n  valid: undefined\r\n};\r\n\r\nexport default CFormFeedback;\r\n"}},{"id":"54ae70ba-771e-5850-bd16-8dde3569932d","name":"CFormGroup","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CFormGroup\r\n\r\nconst CFormGroup = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    row,\r\n    disabled,\r\n    check,\r\n    inline,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    row ? 'row' : false,\r\n    check ? 'form-check' : 'form-group',\r\n    check && inline ? 'form-check-inline' : false,\r\n    check && disabled ? 'disabled' : false\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCFormGroup.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  row: PropTypes.bool,\r\n  check: PropTypes.bool,\r\n  inline: PropTypes.bool,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nCFormGroup.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CFormGroup;\r\n"}},{"id":"9a9f31d0-c217-5008-bdcf-fccf1fced7d7","name":"CFormText","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CFormText\r\n\r\nconst CFormText = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    innerRef,\r\n    //\r\n    inline,\r\n    color,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    !inline ? 'form-text' : false,\r\n    color ? `text-${color}` : false\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCFormText.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  inline: PropTypes.bool,\r\n  color: PropTypes.string\r\n};\r\n\r\nCFormText.defaultProps = {\r\n  tag: 'small',\r\n  color: 'muted',\r\n};\r\n\r\nexport default CFormText;\r\n"}},{"id":"b072d066-7893-519c-806f-5734157c5fb5","name":"CHeader","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CHeader\r\n\r\nconst CHeader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    fixed,\r\n    colorScheme,\r\n    withSubheader,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = classNames(className,\r\n  'c-header',\r\n  'c-header-'+colorScheme,\r\n  fixed ? 'c-header-fixed' : null,\r\n  withSubheader ? 'c-header-with-subheader' : null);\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCHeader.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fixed: PropTypes.bool,\r\n  withSubheader: PropTypes.bool,\r\n  colorScheme: PropTypes.string,\r\n};\r\n\r\nCHeader.defaultProps = {\r\n  tag: 'header',\r\n  fixed: true,\r\n  colorScheme: 'light'\r\n};\r\n\r\nexport default CHeader;\r\n"}},{"id":"5c3d9304-c7f0-598c-abb9-c28b8ad29280","name":"CHeaderBrand","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CHeaderBrand\r\n\r\nconst CHeaderBrand = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-header-brand'\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCHeaderBrand.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCHeaderBrand.defaultProps = {\r\n  tag: 'img'\r\n};\r\n\r\nexport default CHeaderBrand;\r\n"}},{"id":"4db6a230-78b3-5d4b-bf22-2be5202f73ad","name":"CHeaderNav","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CHeaderNav\r\n\r\nconst CHeaderNav = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'c-header-nav'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCHeaderNav.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCHeaderNav.defaultProps = {\r\n  tag: 'ul'\r\n};\r\n\r\nexport default CHeaderNav;\r\n"}},{"id":"ce888504-11fd-5dbb-bbc8-edb2ace11bb5","name":"CHeaderNavItem","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CHeaderNavLink from './CHeaderNavLink';\r\n\r\n//component - CoreUI / CHeaderNavItem\r\n\r\nconst CHeaderNavItem = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    to,\r\n    linkClassName,\r\n    linkProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'c-header-nav-item',\r\n  ), cssModule);\r\n\r\n  if (!custom){\r\n    return (\r\n      <Tag {...attributes} className={classes} ref={innerRef}>\r\n        <CHeaderNavLink {...linkProps} className={linkClassName} to={to}>\r\n          {children}\r\n        </CHeaderNavLink>\r\n      </Tag>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef}>\r\n      {children}\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCHeaderNavItem.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  to: PropTypes.string,\r\n  linkClassName: PropTypes.string,\r\n  linkProps: PropTypes.object\r\n};\r\n\r\nCHeaderNavItem.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CHeaderNavItem;\r\n"}},{"id":"1bece072-f0dd-57d5-b970-fd7c3d4f6492","name":"CHeaderNavLink","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\nimport CLink from './CLink';\r\n\r\n//component - CoreUI / CHeaderNavLink\r\n\r\nconst CHeaderNavLink = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'c-header-nav-link',\r\n  ), cssModule);\r\n\r\n  return (\r\n    <CLink {...attributes} className={classes} />\r\n  );\r\n\r\n}\r\n\r\nCHeaderNavLink.propTypes = {\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCHeaderNavLink.defaultProps = {\r\n};\r\n\r\nexport default CHeaderNavLink;\r\n"}},{"id":"4076de10-ab44-50ea-b87a-f0ff2e318c47","name":"CHeaderSubheader","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CHeaderSubheader\r\n\r\nconst CHeaderSubheader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'c-subheader'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCHeaderSubheader.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCHeaderSubheader.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CHeaderSubheader;\r\n"}},{"id":"e906f9dd-6868-5b2f-ba80-24bd1a89c2a7","name":"CImg","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CImg\r\n\r\nconst CImg = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    fluid,\r\n    block,\r\n    thumbnail,\r\n    shape,\r\n    align,\r\n    alt,\r\n    src,\r\n    width,\r\n    height,\r\n    placeholderColor,\r\n    active,\r\n    fluidGrow,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // vars\r\n\r\n  const isActive = (()=>{\r\n      //active prop is present in CImgLazy component, here always undefined\r\n      return active !== false\r\n  })();\r\n\r\n  const alignClass = (()=>{\r\n    if (align === 'center') {\r\n      return 'mx-auto'\r\n    } else if (align === 'right') {\r\n      return 'float-right'\r\n    } else if (align === 'left') {\r\n      return 'float-left'\r\n    }\r\n    return null\r\n  })();\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    alignClass,\r\n    thumbnail ? 'img-thumbnail' : null,\r\n    fluid || fluidGrow ? 'img-fluid' : null,\r\n    fluidGrow ? 'w-100' : null,\r\n    block ? 'd-block' : null,\r\n    shape ? shape : null,\r\n  ), cssModule);\r\n\r\n  return (\r\n    src && isActive?\r\n      <img\r\n        {...attributes}\r\n        className={classes}\r\n        src={src}\r\n        alt={alt}\r\n        width={width}\r\n        height={height}\r\n        ref={innerRef} /> :\r\n      <svg\r\n        {...attributes}\r\n        className={classes}\r\n        width={width}\r\n        height={height}\r\n        style={{'backgroundColor': isActive ? placeholderColor : 'transparent' }}\r\n        ref={innerRef}\r\n      />\r\n  );\r\n\r\n}\r\n\r\nCImg.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  src: PropTypes.string,\r\n  alt: PropTypes.string,\r\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  block: PropTypes.bool,\r\n  fluid: PropTypes.bool,\r\n  fluidGrow: PropTypes.bool,\r\n  active: PropTypes.bool,\r\n  shape: PropTypes.string,//oneOf(['', 'rounded']),\r\n  thumbnail: PropTypes.bool,\r\n  align: PropTypes.oneOf(['', 'left', 'right', 'center']),\r\n  placeholderColor: PropTypes.string\r\n};\r\n\r\nCImg.defaultProps = {\r\n  placeholderColor: 'transparent'\r\n};\r\n\r\nexport default CImg;\r\n"}},{"id":"25583f9a-06f1-5918-83f1-4109fc5197dc","name":"CInput","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, warnOnce, tagPropType} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CInput\r\n\r\nconst CInput = props=>{\r\n\r\n  let {\r\n    tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    type,\r\n    bsSize,\r\n    valid,\r\n    invalid,\r\n    addon,\r\n    static: staticInput,\r\n    plaintext,\r\n    ...attributes\r\n  } = props;\r\n\r\n  /*\r\n  let fields = useRef({}).current;\r\n\r\n  const getRef = (ref)=>{\r\n    fields.ref = ref;\r\n    innerRef && innerRef(ref);\r\n  }\r\n\r\n  const focus = ()=>{\r\n    if (fields.ref) {\r\n      fields.ref.focus();\r\n    }\r\n  }\r\n  */\r\n\r\n  // render\r\n\r\n  const checkInput = ['radio', 'checkbox'].indexOf(type) > -1;\r\n  const isNotaNumber = new RegExp('\\\\D', 'g');\r\n\r\n  const fileInput = type === 'file';\r\n  const textareaInput = type === 'textarea';\r\n  const selectInput = type === 'select';\r\n  let Tag = tag || (selectInput || textareaInput ? type : 'input');\r\n\r\n  let formControlClass = 'form-control';\r\n\r\n  if (plaintext || staticInput) {\r\n    formControlClass = `${formControlClass}-plaintext`;\r\n    Tag = tag || 'input';\r\n  } else if (fileInput) {\r\n    formControlClass = `${formControlClass}-file`;\r\n  } else if (checkInput) {\r\n    if (addon) {\r\n      formControlClass = null;\r\n    } else {\r\n      formControlClass = 'form-check-input';\r\n    }\r\n  }\r\n\r\n  if (attributes.size && isNotaNumber.test(attributes.size)) {\r\n    warnOnce(\r\n      'Please use the prop \"bsSize\" instead of the \"size\" to bootstrap\\'s input sizing.'\r\n    );\r\n    bsSize = attributes.size;\r\n    delete attributes.size;\r\n  }\r\n\r\n  const classes = mapToCssModules(\r\n    classNames(\r\n      className,\r\n      invalid && 'is-invalid',\r\n      valid && 'is-valid',\r\n      bsSize ? `form-control-${bsSize}` : false,\r\n      formControlClass\r\n    ),\r\n    cssModule\r\n  );\r\n\r\n  if (Tag === 'input' || (tag && typeof tag === 'function')) {\r\n    attributes.type = type;\r\n  }\r\n\r\n  if (\r\n    attributes.children &&\r\n    !(\r\n      plaintext ||\r\n      staticInput ||\r\n      type === 'select' ||\r\n      typeof Tag !== 'string' ||\r\n      Tag === 'select'\r\n    )\r\n  ) {\r\n    warnOnce(\r\n      `Input with a type of \"${type}\" cannot have children. Please use \"value\"/\"defaultValue\" instead.`\r\n    );\r\n    delete attributes.children;\r\n  }\r\n\r\n  return <Tag {...attributes} className={classes} ref={innerRef} />;\r\n\r\n}\r\n\r\nCInput.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  type: PropTypes.string,\r\n  size: PropTypes.string,\r\n  bsSize: PropTypes.string,\r\n  valid: PropTypes.bool,\r\n  invalid: PropTypes.bool,\r\n  plaintext: PropTypes.bool,\r\n  addon: PropTypes.bool,\r\n  static: PropTypes.bool\r\n};\r\n\r\nCInput.defaultProps = {\r\n  type: 'text'\r\n};\r\n\r\nexport default CInput;\r\n"}},{"id":"a3d24f21-dc7b-5263-ac71-96fb9cd899e3","name":"CInputGroup","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CInputGroup\r\n\r\nconst CInputGroup = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    size,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'input-group',\r\n    size ? `input-group-${size}` : null\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCInputGroup.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  size: PropTypes.string\r\n};\r\n\r\nCInputGroup.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CInputGroup;\r\n"}},{"id":"ec546cc4-03a4-51bb-8624-53cee2ee261b","name":"CInputGroupAddon","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CInputGroupText from './CInputGroupText';\r\n\r\n//component - CoreUI / CInputGroupAddon\r\n\r\nconst CInputGroupAddon = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    addonType,\r\n    inputProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'input-group-' + addonType\r\n  ), cssModule);\r\n\r\n  if (typeof children === 'string') {\r\n    return (\r\n      <Tag {...attributes} className={classes}>\r\n        <CInputGroupText {...inputProps}>\r\n          {children}\r\n        </CInputGroupText>\r\n      </Tag>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef}>\r\n      {children}\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCInputGroupAddon.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\r\n  inputProps: PropTypes.object\r\n};\r\n\r\nCInputGroupAddon.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CInputGroupAddon;\r\n"}},{"id":"0f5b38c8-2b34-5540-bf06-4620462a7eb3","name":"CInputGroupText","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CInputGroupText\r\n\r\nconst CInputGroupText = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'input-group-text'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCInputGroupText.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n};\r\n\r\nCInputGroupText.defaultProps = {\r\n  tag: 'span'\r\n};\r\n\r\nexport default CInputGroupText;\r\n"}},{"id":"e0c5f42a-937c-5fcb-aae1-a3fa37eae90c","name":"CJumbotron","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CJumbotron\r\n\r\nconst CJumbotron = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    fluid,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'jumbotron',\r\n    fluid ? 'jumbotron-fluid' : false\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCJumbotron.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fluid: PropTypes.bool\r\n};\r\n\r\nCJumbotron.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CJumbotron;\r\n"}},{"id":"9553678f-1d66-5404-a0fe-f4dc9c7c7f6b","name":"CLabel","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules, deprecated} from './Shared/helper.js';\r\nimport isobject from 'lodash.isobject';\r\n\r\nconst colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\r\n\r\nconst stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\r\n\r\nconst columnProps = PropTypes.oneOfType([\r\n  PropTypes.string,\r\n  PropTypes.number,\r\n  PropTypes.shape({\r\n    size: stringOrNumberProp,\r\n    push: deprecated(stringOrNumberProp, 'Please use the prop \"order\"'),\r\n    pull: deprecated(stringOrNumberProp, 'Please use the prop \"order\"'),\r\n    order: stringOrNumberProp,\r\n    offset: stringOrNumberProp,\r\n  }),\r\n]);\r\n\r\nconst getColumnSizeClass = (isXs, colWidth, colSize)=>{\r\n  if (colSize === true || colSize === '') {\r\n    return isXs ? 'col' : `col-${colWidth}`;\r\n  } else if (colSize === 'auto') {\r\n    return isXs ? 'col-auto' : `col-${colWidth}-auto`;\r\n  }\r\n  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;\r\n};\r\n\r\n//component - CoreUI / CLabel\r\n\r\nconst CLabel = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    hidden,\r\n    widths,\r\n    check,\r\n    size,\r\n    for: htmlFor,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const colClasses = [];\r\n\r\n  widths.forEach((colWidth, i) => {\r\n\r\n    let columnProp = props[colWidth];\r\n    delete attributes[colWidth];\r\n\r\n    if (!columnProp && columnProp !== '') {\r\n      return;\r\n    }\r\n\r\n    const isXs = !i;\r\n    let colClass;\r\n\r\n    if (isobject(columnProp)) {\r\n      const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;\r\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\r\n      colClasses.push(mapToCssModules(classNames({\r\n        [colClass]: columnProp.size || columnProp.size === '',\r\n        [`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || columnProp.order === 0,\r\n        [`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || columnProp.offset === 0\r\n      })), cssModule);\r\n    } else {\r\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\r\n      colClasses.push(colClass);\r\n    }\r\n\r\n  });\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    hidden ? 'sr-only' : false,\r\n    check ? 'form-check-label' : false,\r\n    size ? `col-form-label-${size}` : false,\r\n    colClasses,\r\n    colClasses.length ? 'col-form-label' : false\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag htmlFor={htmlFor} {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCLabel.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  hidden: PropTypes.bool,\r\n  check: PropTypes.bool,\r\n  size: PropTypes.string,\r\n  for: PropTypes.string,\r\n  xs: columnProps,\r\n  sm: columnProps,\r\n  md: columnProps,\r\n  lg: columnProps,\r\n  xl: columnProps,\r\n  widths: PropTypes.array\r\n};\r\n\r\nCLabel.defaultProps = {\r\n  tag: 'label',\r\n  widths: colWidths\r\n};\r\n\r\nexport default CLabel;\r\n"}},{"id":"c4e02a00-9dd2-57dd-9c54-4686f2cd3699","name":"CLink","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n//component - CoreUI / CLink\r\n\r\nconst CLink = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    active,\r\n    disabled,\r\n    href,\r\n    to,\r\n    ...attributes\r\n  } = props;\r\n\r\n  let href2 = href;\r\n\r\n  const onClick = e=>{\r\n    if (props.disabled) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    if (href2 === '#') {\r\n      e.preventDefault();\r\n    }\r\n    if (props.onClick) {\r\n      props.onClick(e);\r\n    }\r\n  }\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    active ? 'active' : null,\r\n    disabled ? 'disabled' : null\r\n  ), cssModule);\r\n\r\n  //<span {...attributes} className={classes} ref={innerRef} />\r\n\r\n  to || (href2 || (href2='#'));\r\n\r\n  return (\r\n    to ?\r\n      <NavLink to={to} {...attributes} className={classes} ref={innerRef} /> :\r\n        <a href={href2} {...attributes} className={classes} onClick={onClick} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCLink.propTypes = {\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  href: PropTypes.string,\r\n  to: PropTypes.string,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nCLink.defaultProps = {\r\n};\r\n\r\nexport default CLink;\r\n"}},{"id":"68538cf2-864e-5480-9ee4-e3ffacecfdd2","name":"CListGroup","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CListGroup\r\n\r\nconst CListGroup = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    horizontal,\r\n    flush,\r\n    variant,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'list-group',\r\n    horizontal ? `list-group-horizontal-${horizontal}` : false,\r\n    flush ? 'list-group-flush' : false,\r\n    variant ? 'list-group-'+variant : false\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCListGroup.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  flush: PropTypes.bool,\r\n  horizontal: PropTypes.string,\r\n  role: PropTypes.string,\r\n  variant: PropTypes.string\r\n};\r\n\r\nCListGroup.defaultProps = {\r\n  tag: 'ul',\r\n  role: 'list-items'\r\n};\r\n\r\nexport default CListGroup;\r\n"}},{"id":"9648e4d2-2fca-5959-a6e5-a02de57d04a6","name":"CListGroupHeading","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CListGroupHeading\r\n\r\nconst CListGroupHeading = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'list-group-item-heading'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCListGroupHeading.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.any,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCListGroupHeading.defaultProps = {\r\n  tag: 'h5'\r\n};\r\n\r\nexport default CListGroupHeading;\r\n"}},{"id":"e4afb761-786f-5801-b249-e652d26ad2e3","name":"CListGroupItem","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CLink from './CLink';\r\n\r\n//component - CoreUI / CListGroupItem\r\n\r\nconst CListGroupItem = props=>{\r\n\r\n  let {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    active,\r\n    disabled,\r\n    action,\r\n    color,\r\n    accent,\r\n    ...attributes\r\n  } = props;\r\n\r\n  if (disabled) {\r\n    attributes.onClick = e=>{\r\n      e.preventDefault();\r\n    };\r\n  }\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    active ? 'active' : false,\r\n    disabled ? 'disabled' : false,\r\n    action||attributes.href||attributes.to||Tag=='button' ? 'list-group-item-action' : false,\r\n    color ? `list-group-item-${color}` : false,\r\n    accent ? `list-group-item-accent-${accent}` : false,\r\n    'list-group-item'\r\n  ), cssModule);\r\n\r\n  if (props.href || props.to){\r\n    Tag = CLink;\r\n    return (\r\n      <Tag {...attributes} className={classes} />\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <Tag {...attributes} className={classes} ref={innerRef} />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCListGroupItem.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.any,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  accent: PropTypes.string,\r\n  action: PropTypes.bool\r\n};\r\n\r\nCListGroupItem.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CListGroupItem;\r\n"}},{"id":"5746476c-83aa-5d37-940c-4027ede66006","name":"CListGroupText","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CListGroupText\r\n\r\nconst CListGroupText = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'list-group-item-text'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCListGroupText.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.any,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCListGroupText.defaultProps = {\r\n  tag: 'p'\r\n};\r\n\r\nexport default CListGroupText;\r\n"}},{"id":"11dd729e-c010-53f2-8082-eb49cbdd0282","name":"CMedia","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CMedia\r\n\r\nconst CMedia = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    asideRight,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    asideRight ? 'd-flex flex-row-reverse' : null,\r\n    'media',\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Context.Provider value={{\r\n      asideRight: asideRight\r\n    }}>\r\n      <Tag {...attributes} className={classes} ref={innerRef} />\r\n    </Context.Provider>\r\n  );\r\n\r\n}\r\n\r\nCMedia.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  asideRight: PropTypes.bool\r\n};\r\n\r\nCMedia.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CMedia;\r\n"}},{"id":"06ee0fda-c09f-58ba-9cda-845f3935116e","name":"CMediaAside","fields":{"code":"import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\nimport {Context} from './CMedia';\r\n\r\n//component - CoreUI / CMediaAside\r\n\r\nconst CMediaAside = props=>{\r\n\r\n  let {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    //asideImageProps,\r\n    asideVerticalPosition,\r\n    asideRight,\r\n    addAsideMargin,\r\n    ...attributes\r\n  } = props;\r\n\r\n  /*\r\n  const computedAsideImageProps = ()=>{\r\n    return Object.assign(\r\n      {\r\n        placeholderColor: '#777777',\r\n        width: '64px',\r\n        height: asideVerticalPosition === 'stretch' ? '100%' : '64px'\r\n      },\r\n      asideImageProps || {}\r\n    )\r\n  }\r\n  */\r\n\r\n  const context = useContext(Context);\r\n\r\n  if (!asideRight && context.asideRight)\r\n    asideRight = true;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    addAsideMargin ? `m${asideRight? 'l' : 'r' }-3` : '',\r\n    `align-self-${asideVerticalPosition}`\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCMediaAside.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  asideVerticalPosition: PropTypes.string,\r\n  asideRight: PropTypes.bool,\r\n  asideImageProps: PropTypes.object,\r\n  addAsideMargin: PropTypes.bool\r\n};\r\n\r\nCMediaAside.defaultProps = {\r\n  tag: 'div',\r\n  asideVerticalPosition: 'start'\r\n};\r\n\r\nexport default CMediaAside;\r\n"}},{"id":"22b01fde-26f7-5861-b54f-f0e75ad34ec3","name":"CMediaBody","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CMediaBody\r\n\r\nconst CMediaBody = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'media-body'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCMediaBody.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCMediaBody.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CMediaBody;\r\n"}},{"id":"142e4069-f04b-5c46-890f-8f39e406ba9d","name":"CModal","fields":{"code":"import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules,\r\n  getOriginalBodyPadding,\r\n  conditionallyUpdateScrollbar,\r\n  setScrollbarWidth,\r\n  omit,\r\n  focusableElements,\r\n  TransitionTimeouts} from './Shared/helper.js';\r\nimport CPortal from './CPortal';\r\nimport CFade from './CFade';\r\n\r\nfunction noop() { }\r\n\r\nconst FadePropTypes = PropTypes.shape(CFade.propTypes);\r\n\r\n//component - CoreUI / CModal\r\n\r\nconst CModal = props=>{\r\n\r\n  const [isOpen, setIsOpen] = useState(props.show);\r\n\r\n  const fields = useRef({\r\n    _element: null,\r\n    _originalBodyPadding: null,\r\n    lastProps: {}\r\n  }).current;\r\n\r\n  const onOpened = (node, isAppearing)=>{\r\n    props.onOpened();\r\n    (props.modalTransition.onEntered || noop)(node, isAppearing);\r\n  }\r\n\r\n  const onClosed = node=>{\r\n    props.onClosed();\r\n    (props.modalTransition.onExited || noop)(node);\r\n    destroy();\r\n    if (fields._isMounted) {\r\n      setIsOpen(false);\r\n    }\r\n  }\r\n\r\n  const setFocus = ()=>{\r\n    if (fields._dialog && fields._dialog.parentNode && typeof fields._dialog.parentNode.focus === 'function') {\r\n      fields._dialog.parentNode.focus();\r\n    }\r\n  }\r\n\r\n  const getFocusableChildren = ()=>{\r\n    return fields._element.querySelectorAll(focusableElements.join(', '));\r\n  }\r\n\r\n  const getFocusedChild = ()=>{\r\n    let currentFocus;\r\n    const focusableChildren = getFocusableChildren();\r\n    try {\r\n      currentFocus = document.activeElement;\r\n    } catch (err) {\r\n      currentFocus = focusableChildren[0];\r\n    }\r\n    return currentFocus;\r\n  }\r\n\r\n  const handleBackdropClick = e=>{\r\n    if (e.target === fields._mouseDownElement) {\r\n      e.stopPropagation();\r\n      if (!isOpen || props.backdrop !== true) return;\r\n      const backdrop = fields._dialog ? fields._dialog.parentNode : null;\r\n      if (backdrop && e.target === backdrop && props.toggle) {\r\n        props.toggle(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleTab = e=>{\r\n    if (e.which !== 9) return;\r\n    const focusableChildren = getFocusableChildren();\r\n    const totalFocusable = focusableChildren.length;\r\n    const currentFocus = getFocusedChild();\r\n    let focusedIndex = 0;\r\n    for (let i = 0; i < totalFocusable; i += 1) {\r\n      if (focusableChildren[i] === currentFocus) {\r\n        focusedIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    if (e.shiftKey && focusedIndex === 0) {\r\n      e.preventDefault();\r\n      focusableChildren[totalFocusable - 1].focus();\r\n    } else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {\r\n      e.preventDefault();\r\n      focusableChildren[0].focus();\r\n    }\r\n  }\r\n\r\n  const handleBackdropMouseDown = e=>{\r\n    fields._mouseDownElement = e.target;\r\n  }\r\n\r\n  const handleEscape = e=>{\r\n    if (props.show && props.keyboard && e.keyCode === 27 && props.toggle) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      props.toggle(e);\r\n    }\r\n  }\r\n\r\n  const init = ()=>{\r\n    try {\r\n      fields._triggeringElement = document.activeElement;\r\n    } catch (err) {\r\n      fields._triggeringElement = null;\r\n    }\r\n    fields._element = document.createElement('div');\r\n    fields._element.setAttribute('tabindex', '-1');\r\n    fields._element.style.position = 'relative';\r\n    fields._element.style.zIndex = props.zIndex;\r\n    fields._originalBodyPadding = getOriginalBodyPadding();\r\n    conditionallyUpdateScrollbar();\r\n    document.body.appendChild(fields._element);\r\n    if (CModal.openCount === 0) {\r\n      document.body.className = classNames(\r\n        document.body.className,\r\n        mapToCssModules('modal-open', props.cssModule)\r\n      );\r\n    }\r\n    CModal.openCount += 1;\r\n  }\r\n\r\n  const destroy = ()=>{\r\n    if (fields._element) {\r\n      document.body.removeChild(fields._element);\r\n      fields._element = null;\r\n    }\r\n    if (fields._triggeringElement) {\r\n      if (fields._triggeringElement.focus) fields._triggeringElement.focus();\r\n      fields._triggeringElement = null;\r\n    }\r\n    if (CModal.openCount <= 1) {\r\n      const modalOpenClassName = mapToCssModules('modal-open', props.cssModule);\r\n      const modalOpenClassNameRegex = new RegExp(`(^| )${modalOpenClassName}( |$)`);\r\n      document.body.className = document.body.className.replace(modalOpenClassNameRegex, ' ').trim();\r\n    }\r\n    CModal.openCount -= 1;\r\n    setScrollbarWidth(fields._originalBodyPadding);\r\n  }\r\n\r\n  const setState = (oVal, nVal, setF)=>{\r\n    if (nVal===oVal)\r\n      return;\r\n    setF(nVal);\r\n  }\r\n\r\n  // effect\r\n\r\n  useEffect(() => {\r\n    if (props.onEnter) {\r\n      props.onEnter();\r\n    }\r\n    if (isOpen && props.autoFocus) {\r\n      setFocus();\r\n    }\r\n    fields._isMounted = true;\r\n    return function cleanup() {\r\n      if (props.onExit) {\r\n        props.onExit();\r\n      }\r\n      if (isOpen) {\r\n        destroy();\r\n      }\r\n      fields._isMounted = false;\r\n    };\r\n  },\r\n  []);\r\n\r\n  useEffect(() => {\r\n    if (props.autoFocus && isOpen && !fields.lastIsOpen) {\r\n      setFocus();\r\n    }\r\n    if (fields._element && fields.lastProps.zIndex !== props.zIndex) {\r\n      fields._element.style.zIndex = props.zIndex;\r\n    }\r\n  },\r\n  [isOpen]);\r\n\r\n  useEffect(() => {\r\n    fields.lastProps = {...props};\r\n    fields.lastIsOpen = isOpen;\r\n    fields.firstRender = false;\r\n  });\r\n\r\n  // render\r\n\r\n  const renderModalDialog = ()=>{\r\n    const attributes = omit(props, Object.keys(CModal.propTypes));\r\n    const dialogBaseClass = 'modal-dialog';\r\n    return (\r\n      <div\r\n        {...attributes}\r\n        className={mapToCssModules(classNames(dialogBaseClass, props.className, {\r\n          [`modal-${props.size}`]: props.size,\r\n          [`${dialogBaseClass}-centered`]: props.centered,\r\n        }), props.cssModule)}\r\n        role=\"document\"\r\n        ref={(c) => {\r\n          fields._dialog = c;\r\n        }}\r\n      >\r\n        <div\r\n          className={mapToCssModules(\r\n            classNames('modal-content', props.contentClassName),\r\n            props.cssModule\r\n          )}\r\n        >\r\n          {props.children}\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n  if (props.show && !fields.lastProps.show){\r\n    setState(isOpen, props.show, setIsOpen);\r\n  }\r\n  if (!fields.firstRender){\r\n    if (isOpen && !fields.lastIsOpen){\r\n      init();\r\n    }\r\n  }\r\n\r\n  if (isOpen) {\r\n\r\n    const {\r\n      cssModule,\r\n      innerRef,\r\n      wrapClassName,\r\n      modalClassName,\r\n      backdropClassName,\r\n      show: isOpen,\r\n      backdrop,\r\n      role,\r\n      labelledBy,\r\n      external\r\n    } = props;\r\n\r\n    const modalAttributes = {\r\n      onClick: handleBackdropClick,\r\n      onMouseDown: handleBackdropMouseDown,\r\n      onKeyUp: handleEscape,\r\n      onKeyDown: handleTab,\r\n      style: { display: 'block' },\r\n      'aria-labelledby': labelledBy,\r\n      role,\r\n      tabIndex: '-1'\r\n    };\r\n\r\n    const hasTransition = props.fade;\r\n\r\n    const modalTransition = {\r\n      ...CFade.defaultProps,\r\n      ...props.modalTransition,\r\n      baseClass: hasTransition ? props.modalTransition.baseClass : '',\r\n      timeout: hasTransition ? props.modalTransition.timeout : 0,\r\n    };\r\n\r\n    const backdropTransition = {\r\n      ...CFade.defaultProps,\r\n      ...props.backdropTransition,\r\n      baseClass: hasTransition ? props.backdropTransition.baseClass : '',\r\n      timeout: hasTransition ? props.backdropTransition.timeout : 0,\r\n    };\r\n\r\n    const Backdrop = backdrop && (\r\n      hasTransition ?\r\n        (<CFade\r\n          {...backdropTransition}\r\n          in={isOpen && !!backdrop}\r\n          cssModule={cssModule}\r\n          className={mapToCssModules(classNames('modal-backdrop', backdropClassName), cssModule)}\r\n        />)\r\n        : <div className={mapToCssModules(classNames('modal-backdrop', 'show', backdropClassName), cssModule)} />\r\n    );\r\n\r\n    return (\r\n      <CPortal node={fields._element}>\r\n        <div className={mapToCssModules(wrapClassName)}>\r\n          <CFade\r\n            {...modalAttributes}\r\n            {...modalTransition}\r\n            in={isOpen}\r\n            onEntered={onOpened}\r\n            onExited={onClosed}\r\n            cssModule={cssModule}\r\n            className={mapToCssModules(classNames('modal', modalClassName), cssModule)}\r\n            innerRef={innerRef}\r\n          >\r\n            {external}\r\n            {renderModalDialog()}\r\n          </CFade>\r\n          {Backdrop}\r\n        </div>\r\n      </CPortal>\r\n    );\r\n  }\r\n\r\n  return null;\r\n\r\n}\r\n\r\nCModal.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  show: PropTypes.bool,\r\n  autoFocus: PropTypes.bool,\r\n  centered: PropTypes.bool,\r\n  size: PropTypes.string,\r\n  toggle: PropTypes.func,\r\n  keyboard: PropTypes.bool,\r\n  role: PropTypes.string,\r\n  labelledBy: PropTypes.string,\r\n  backdrop: PropTypes.oneOfType([\r\n    PropTypes.bool,\r\n    PropTypes.oneOf(['static'])\r\n  ]),\r\n  onEnter: PropTypes.func,\r\n  onExit: PropTypes.func,\r\n  onOpened: PropTypes.func,\r\n  onClosed: PropTypes.func,\r\n  wrapClassName: PropTypes.string,\r\n  modalClassName: PropTypes.string,\r\n  backdropClassName: PropTypes.string,\r\n  contentClassName: PropTypes.string,\r\n  external: PropTypes.node,\r\n  fade: PropTypes.bool,\r\n  zIndex: PropTypes.oneOfType([\r\n    PropTypes.number,\r\n    PropTypes.string,\r\n  ]),\r\n  backdropTransition: FadePropTypes,\r\n  modalTransition: FadePropTypes\r\n};\r\n\r\nCModal.defaultProps = {\r\n  show: false,\r\n  autoFocus: true,\r\n  centered: false,\r\n  role: 'dialog',\r\n  backdrop: true,\r\n  keyboard: true,\r\n  zIndex: 1050,\r\n  fade: true,\r\n  onOpened: noop,\r\n  onClosed: noop,\r\n  modalTransition: {\r\n    timeout: TransitionTimeouts.Modal,\r\n  },\r\n  backdropTransition: {\r\n    mountOnEnter: true,\r\n    timeout: TransitionTimeouts.Fade\r\n  },\r\n};\r\n\r\nCModal.openCount = 0;\r\n\r\nexport default CModal;\r\n"}},{"id":"a991de59-5d7c-52e4-8c6e-a12a51c76466","name":"CModalBody","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CModalBody\r\n\r\nconst CModalBody = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'modal-body'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCModalBody.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCModalBody.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CModalBody;\r\n"}},{"id":"8744042e-5d62-5930-bc1f-aa7e40aa1b4c","name":"CModalFooter","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CModalFooter\r\n\r\nconst CModalFooter = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'modal-footer'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCModalFooter.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCModalFooter.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CModalFooter;\r\n"}},{"id":"426b82d9-7681-5cf5-bcac-e78994c025b4","name":"CModalHeader","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CModalHeader\r\n\r\nconst CModalHeader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    toggle,\r\n    wrapTag: WrapTag,\r\n    closeAriaLabel,\r\n    charCode,\r\n    close,\r\n    mainClassName,\r\n    mainProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  let closeButton;\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'modal-header'\r\n  ), cssModule);\r\n\r\n  const mainClasses = mapToCssModules(classNames(\r\n    mainClassName,\r\n    'modal-title'\r\n  ), cssModule);\r\n\r\n  if (!close && toggle) {\r\n    const closeIcon = typeof charCode === 'number' ? String.fromCharCode(charCode) : charCode;\r\n    closeButton = (\r\n      <button type=\"button\" onClick={toggle} className={mapToCssModules('close', cssModule)} aria-label={closeAriaLabel}>\r\n        <span aria-hidden=\"true\">{closeIcon}</span>\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <WrapTag {...attributes} className={classes} ref={innerRef}>\r\n      <Tag className={mainClasses} {...mainProps}>\r\n        {children}\r\n      </Tag>\r\n      {close || closeButton}\r\n    </WrapTag>\r\n  );\r\n\r\n}\r\n\r\nCModalHeader.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  wrapTag: tagPropType,\r\n  toggle: PropTypes.func,\r\n  closeAriaLabel: PropTypes.string,\r\n  charCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  close: PropTypes.object,\r\n  mainClassName: PropTypes.string,\r\n  mainProps: PropTypes.object\r\n};\r\n\r\nCModalHeader.defaultProps = {\r\n  tag: 'h5',\r\n  wrapTag: 'div',\r\n  closeAriaLabel: 'Close',\r\n  charCode: 215\r\n};\r\n\r\nexport default CModalHeader;\r\n"}},{"id":"a5313e86-4628-52c0-998a-39a0a018b744","name":"CNav","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CNav\r\n\r\nconst CNav = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    variant,\r\n    vertical,\r\n    horizontal,\r\n    justified,\r\n    fill,\r\n    inCard,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const getVerticalClass = vertical=>{\r\n    if (vertical === false) {\r\n      return false;\r\n    } else if (vertical === true || vertical === 'xs') {\r\n      return 'flex-column';\r\n    }\r\n    return `flex-${vertical}-column`;\r\n  };\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'nav',\r\n    horizontal ? `justify-content-${horizontal}` : false,\r\n    variant=='tabs' ? 'nav-tabs' : variant=='pills' ? 'nav-pills' : null,\r\n    getVerticalClass(vertical),\r\n    {\r\n      'card-header-tabs': inCard && variant=='tabs',\r\n      'card-header-pills': inCard && variant=='pills',\r\n      'nav-justified': justified,\r\n      'nav-fill': fill,\r\n    }\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCNav.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  variant: PropTypes.oneOf(['', 'tabs', 'pills']),\r\n  vertical: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  horizontal: PropTypes.string,\r\n  justified: PropTypes.bool,\r\n  fill: PropTypes.bool,\r\n  inCard: PropTypes.bool\r\n};\r\n\r\nCNav.defaultProps = {\r\n  tag: 'ul',\r\n  vertical: false,\r\n};\r\n\r\nexport default CNav;\r\n"}},{"id":"1e7fe468-1314-55be-9531-7cbe720e5a5f","name":"CNavItem","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CNavLink from './CNavLink';\r\n\r\n//component - CoreUI / CNavItem\r\n\r\nconst CNavItem = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    active,\r\n    linkClassName,\r\n    linkProps,\r\n    to,\r\n    href,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'nav-item',\r\n    active ? 'active' : false\r\n  ), cssModule);\r\n\r\n  const linkClasses = mapToCssModules(classNames(\r\n    linkClassName,\r\n  ), cssModule);\r\n\r\n  if (!custom){\r\n    return (\r\n      <Tag {...attributes} className={classes} ref={innerRef}>\r\n        <CNavLink {...linkProps} className={linkClasses} to={to} href={href}>\r\n          {children}\r\n        </CNavLink>\r\n      </Tag>\r\n    );\r\n  }\r\n\r\n  return (\r\n      <Tag {...attributes} className={classes} ref={innerRef}>\r\n        {children}\r\n      </Tag>\r\n  );\r\n\r\n}\r\n\r\nCNavItem.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool,\r\n  custom: PropTypes.bool,\r\n  linkClassName: PropTypes.string,\r\n  linkProps: PropTypes.object,\r\n  to: PropTypes.string,\r\n  href: PropTypes.string\r\n};\r\n\r\nCNavItem.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CNavItem;\r\n"}},{"id":"53c29d70-c9ec-539e-9c4b-d62d187fc27a","name":"CNavLink","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules} from './Shared/helper.js';\r\nimport CLink from './CLink';\r\n\r\n//component - CoreUI / CNavLink\r\n\r\nconst CNavLink = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'nav-link',\r\n  ), cssModule);\r\n\r\n  return (\r\n    <CLink {...attributes} className={classes} />\r\n  );\r\n\r\n}\r\n\r\nCNavLink.propTypes = {\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  onClick: PropTypes.func,\r\n  href: PropTypes.string,\r\n  to: PropTypes.string\r\n};\r\n\r\nCNavLink.defaultProps = {\r\n};\r\n\r\nexport default CNavLink;\r\n"}},{"id":"5a3a270f-1ba2-520e-9ef4-c823db3acf54","name":"CNavbar","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {mapToCssModules, tagPropType} from './Shared/helper.js';\r\n\r\nconst getExpandClass = expand=>{\r\n  if (expand === false) {\r\n    return false;\r\n  } else if (expand === true || expand === 'xs') {\r\n    return 'navbar-expand';\r\n  }\r\n  return `navbar-expand-${expand}`;\r\n};\r\n\r\n//component - CoreUI / CNavbar\r\n\r\nconst CNavbar = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    expandable,\r\n    light,\r\n    fixed,\r\n    sticky,\r\n    color,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'navbar',\r\n    getExpandClass(expandable),\r\n    light ? 'navbar-light' : 'navbar-dark',\r\n    {\r\n      [`bg-${color}`]: color,\r\n      [`fixed-${fixed}`]: fixed,\r\n      [`sticky-${sticky}`]: sticky,\r\n    }\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCNavbar.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  light: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  fixed: PropTypes.string,\r\n  sticky: PropTypes.string,\r\n  expandable: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n};\r\n\r\nCNavbar.defaultProps = {\r\n  tag: 'nav',\r\n  expandable: false,\r\n};\r\n\r\nexport default CNavbar;\r\n"}},{"id":"8025078a-db13-5238-bd0c-3cd779aeafce","name":"CNavbarBrand","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CNavbarBrand\r\n\r\nconst CNavbarBrand = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    children,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const imgSrc = brand=>{\r\n    return brand.src ? brand.src : '';\r\n  }\r\n  const imgWidth = brand=>{\r\n    return brand.width ? brand.width : 'auto';\r\n  }\r\n  const imgHeight = brand=>{\r\n    return brand.height ? brand.height : 'auto';\r\n  }\r\n  const imgAlt = brand=>{\r\n    return brand.alt ? brand.alt : '';\r\n  }\r\n  const navbarBrandImg = (props, classBrand, key)=>{\r\n    return (\r\n      <img\r\n          src={imgSrc(props)}\r\n          width={imgWidth(props)}\r\n          height={imgHeight(props)}\r\n          alt={imgAlt(props)}\r\n          className={classBrand}\r\n          key={key.toString()}\r\n      />\r\n    );\r\n  }\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'navbar-brand'\r\n  );\r\n\r\n  const img = [];\r\n  if (props.brand) {\r\n    const classBrand = 'navbar-brand';//navbar-brand\r\n    img.push(navbarBrandImg(props.brand, classBrand, img.length + 1));\r\n  }\r\n  if (props.full) {\r\n    const classBrand = 'navbar-brand-full';\r\n    img.push(navbarBrandImg(props.full, classBrand, img.length + 1));\r\n  }\r\n  if (props.minimized) {\r\n    const classBrand = 'navbar-brand-minimized';\r\n    img.push(navbarBrandImg(props.minimized, classBrand, img.length + 1));\r\n  }\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef}>\r\n      {children || img}\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCNavbarBrand.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  brand: PropTypes.any,\r\n  full: PropTypes.any,\r\n  minimized: PropTypes.any\r\n};\r\n\r\nCNavbarBrand.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CNavbarBrand;\r\n"}},{"id":"9da050a2-636c-534e-a7dd-50a6f43fa92d","name":"CNavbarNav","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CNavbarNav\r\n\r\nconst CNavbarNav = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'navbar-nav',\r\n    'nav'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCNavbarNav.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCNavbarNav.defaultProps = {\r\n  tag: 'ul'\r\n};\r\n\r\nexport default CNavbarNav;\r\n"}},{"id":"8773b177-7130-5968-9c0c-5ddb749db7fd","name":"CNavbarText","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CNavbarText\r\n\r\nconst CNavbarText = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'navbar-text'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCNavbarText.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCNavbarText.defaultProps = {\r\n  tag: 'ul'\r\n};\r\n\r\nexport default CNavbarText;\r\n"}},{"id":"835c1f56-72a6-533d-a292-fa1fd91c906b","name":"CPagination","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CPaginationItem from './CPaginationItem';\r\nimport CPaginationLink from './CPaginationLink';\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CPagination\r\n\r\nconst CPagination = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    listClassName,\r\n    pageFrom,\r\n    pageTo,\r\n    pageMin,\r\n    pageMax,\r\n    activePage,\r\n    size,\r\n    firstButtonHtml,\r\n    previousButtonHtml,\r\n    nextButtonHtml,\r\n    lastButtonHtml,\r\n    hideDots,\r\n    //hideArrows,\r\n    //hideDoubleArrows,\r\n    listTag: ListTag,\r\n    'aria-label': label,\r\n    listProps,\r\n    onClick,\r\n    ...attributes\r\n  } = props;\r\n\r\n\r\n  const paginationClick = (e, type, n)=>{\r\n    onClick && onClick(e, type, n);\r\n  }\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className\r\n  ), cssModule);\r\n\r\n  const listClasses = mapToCssModules(classNames(\r\n    listClassName,\r\n    'pagination',\r\n    {\r\n      [`pagination-${size}`]: !!size,\r\n    }\r\n  ), cssModule);\r\n\r\n  let autoChildren;\r\n\r\n  if (!custom){\r\n    let list=[];\r\n    for (let i=pageFrom;i<=pageTo;i++)\r\n      list.push(<CPaginationItem custom key={i} active={activePage==i?true:false}><CPaginationLink type=\"number\" n={i}>{i}</CPaginationLink></CPaginationItem>);\r\n    const pagesBefore = pageFrom>pageMin;\r\n    const pagesAfter = pageTo<pageMax;\r\n    autoChildren = (\r\n      <React.Fragment>\r\n        {pagesBefore&&firstButtonHtml?<CPaginationItem custom><CPaginationLink type=\"first\">{firstButtonHtml}</CPaginationLink></CPaginationItem>:''}\r\n        {pagesBefore&&previousButtonHtml?<CPaginationItem custom><CPaginationLink type=\"previous\">{previousButtonHtml}</CPaginationLink></CPaginationItem>:''}\r\n        {!hideDots&&pagesBefore?<CPaginationItem custom><CPaginationLink type=\"less\">...</CPaginationLink></CPaginationItem>:''}\r\n        {list}\r\n        {!hideDots&&pagesAfter?<CPaginationItem custom><CPaginationLink type=\"more\">...</CPaginationLink></CPaginationItem>:''}\r\n        {pagesAfter&&nextButtonHtml?<CPaginationItem custom><CPaginationLink type=\"next\">{nextButtonHtml}</CPaginationLink></CPaginationItem>:''}\r\n        {pagesAfter&&lastButtonHtml?<CPaginationItem custom><CPaginationLink type=\"last\">{lastButtonHtml}</CPaginationLink></CPaginationItem>:''}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Context.Provider value={{\r\n      paginationClick\r\n    }}>\r\n      <Tag {...attributes} className={classes} aria-label={label} ref={innerRef}>\r\n        <ListTag className={listClasses} {...listProps}>\r\n          {autoChildren||children}\r\n        </ListTag>\r\n      </Tag>\r\n    </Context.Provider>\r\n  );\r\n\r\n}\r\n\r\nCPagination.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  pageMin: PropTypes.number,\r\n  pageMax: PropTypes.number,\r\n  pageFrom: PropTypes.number,\r\n  pageTo: PropTypes.number,\r\n  activePage: PropTypes.number,\r\n  size: PropTypes.string,\r\n  listTag: tagPropType,\r\n  hideDots: PropTypes.bool,\r\n  hideArrows: PropTypes.bool,\r\n  hideDoubleArrows: PropTypes.bool,\r\n  firstButtonHtml: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  previousButtonHtml: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  nextButtonHtml: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  lastButtonHtml: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  'aria-label': PropTypes.string,\r\n  listClassName: PropTypes.string,\r\n  listProps: PropTypes.object,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nCPagination.defaultProps = {\r\n  tag: 'nav',\r\n  listTag: 'ul',\r\n  'aria-label': 'pagination',\r\n  pageFrom: 2,\r\n  pageTo: 3,\r\n  pageMin: 1,\r\n  pageMax: 5,\r\n  activePage: 2,\r\n  firstButtonHtml: <React.Fragment>&laquo;</React.Fragment>,\r\n  previousButtonHtml: <React.Fragment>&lsaquo;</React.Fragment>,\r\n  nextButtonHtml: <React.Fragment>&rsaquo;</React.Fragment>,\r\n  lastButtonHtml: <React.Fragment>&raquo;</React.Fragment>,\r\n};\r\n\r\nexport default CPagination;\r\n"}},{"id":"e3b2bbdb-f15a-558e-9d3a-1a34e53a37fd","name":"CPaginationItem","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport CPaginationLink from './CPaginationLink';\r\n\r\n//component - CoreUI / CPaginationItem\r\n\r\nconst CPaginationItem = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    active,\r\n    disabled,\r\n    linkClassName,\r\n    linkProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'page-item',\r\n    {\r\n      'active': active,\r\n      'disabled': disabled,\r\n    }\r\n  ), cssModule);\r\n\r\n  const linkClasses = mapToCssModules(classNames(\r\n    linkClassName,\r\n  ), cssModule);\r\n\r\n  if (!custom){\r\n    return (\r\n      <Tag {...attributes} className={classes} ref={innerRef}>\r\n        <CPaginationLink className={linkClasses} {...linkProps}>\r\n          {children}\r\n        </CPaginationLink>\r\n      </Tag>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef}>\r\n      {children}\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCPaginationItem.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  active: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  linkClassName: PropTypes.string,\r\n  linkProps: PropTypes.object\r\n};\r\n\r\nCPaginationItem.defaultProps = {\r\n  tag: 'li',\r\n  active: false\r\n};\r\n\r\nexport default CPaginationItem;\r\n"}},{"id":"b444b366-e998-59fd-918e-b9390645bc1a","name":"CPaginationLink","fields":{"code":"import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport {Context} from './CPagination';\r\n\r\n//component - CoreUI / CPaginationLink\r\n\r\nconst CPaginationLink = props=>{\r\n\r\n  let {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    next,\r\n    previous,\r\n    onClick,\r\n    type,\r\n    n,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const context = useContext(Context);\r\n\r\n  const linkClick = (e)=>{\r\n    onClick && onClick(e, type, n);\r\n    context.paginationClick && context.paginationClick(e, type, n);\r\n  }\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'page-link'\r\n  ), cssModule);\r\n\r\n  let defaultAriaLabel;\r\n  if (previous) {\r\n    defaultAriaLabel = 'Previous';\r\n  } else if (next) {\r\n    defaultAriaLabel = 'Next';\r\n  }\r\n  const ariaLabel = props['aria-label'] || defaultAriaLabel;\r\n\r\n  let defaultCaret;\r\n  if (previous) {\r\n    defaultCaret = <React.Fragment>&lsaquo;</React.Fragment>;\r\n  } else if (next) {\r\n    defaultCaret = <React.Fragment>&rsaquo;</React.Fragment>;\r\n  }\r\n\r\n  let children = props.children;\r\n\r\n  if (children && Array.isArray(children) && children.length === 0) {\r\n    children = null;\r\n  }\r\n\r\n  if (!attributes.href && Tag === 'a') {\r\n    Tag = 'button';\r\n  }\r\n\r\n  if (previous || next) {\r\n    children = [\r\n      <span\r\n        aria-hidden=\"true\"\r\n        key=\"caret\"\r\n      >\r\n        {children || defaultCaret}\r\n      </span>,\r\n      <span\r\n        className=\"sr-only\"\r\n        key=\"sr\"\r\n      >\r\n        {ariaLabel}\r\n      </span>,\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <Tag\r\n      {...attributes}\r\n      className={classes}\r\n      onClick={linkClick}\r\n      aria-label={ariaLabel}\r\n      ref={innerRef}\r\n    >\r\n      {children}\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCPaginationLink.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  next: PropTypes.bool,\r\n  type: PropTypes.string,\r\n  n: PropTypes.number,\r\n  previous: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  'aria-label': PropTypes.string\r\n};\r\n\r\nCPaginationLink.defaultProps = {\r\n  tag: 'a',\r\n};\r\n\r\nexport default CPaginationLink;\r\n"}},{"id":"f9f0707d-b8a9-5d56-955b-bffc4204c912","name":"CPopover","fields":{"code":"import React, {useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CTooltip from './CTooltip.js'\r\nimport 'tippy.js/dist/border.css';\r\nimport './CPopover.css'\r\nimport { renderToString } from 'react-dom/server'\r\n\r\n//component - CoreUI / CPopover\r\nconst template = `<h3 class=\"popover-header\">H</h3><div class=\"popover-body\">C</div>`\r\nconst generateContent = (content, header) => {\r\n  return template.replace('H', renderToString(header))\r\n                 .replace('C', renderToString(content))\r\n}\r\n\r\nconst CPopover = props => {\r\n\r\n  let {\r\n    //\r\n    header,\r\n    children,\r\n    content,\r\n    ...config\r\n  } = props;\r\n\r\n  const computedContent = useCallback(\r\n    generateContent(content, header),\r\n    [content, header]\r\n  );\r\n  const advancedOptions = {\r\n    ...(config ? config.advancedOptions || {}: {}),\r\n    allowHTML: true,\r\n    theme: 'cpopover'\r\n  }\r\n  const computedConfig = {\r\n    ...config,\r\n    advancedOptions\r\n  }\r\n\r\n  return (\r\n    <CTooltip content={computedContent} {...computedConfig}>\r\n      {children}\r\n    </CTooltip>\r\n  );\r\n\r\n}\r\n\r\nCPopover.propTypes = {\r\n  children: PropTypes.node,\r\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n  header: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\r\n}\r\n\r\nCPopover.defaultProps = {\r\n  content: ''\r\n};\r\n\r\nexport default CPopover;\r\n"}},{"id":"4b4ee19e-cc32-5474-8b67-2387dba8b43d","name":"CPopoverBody","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CPopoverBody\r\n\r\nconst CPopoverBody = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'popover-body'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCPopoverBody.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCPopoverBody.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CPopoverBody;\r\n"}},{"id":"a81dab7c-2b59-50e3-a256-a1b362ce1811","name":"CPopoverHeader","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CPopoverHeader\r\n\r\nconst CPopoverHeader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'popover-header'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCPopoverHeader.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCPopoverHeader.defaultProps = {\r\n  tag: 'h3'\r\n};\r\n\r\nexport default CPopoverHeader;\r\n"}},{"id":"bf8e11d1-39a8-59d8-9c4f-31e327080237","name":"CPortal","fields":{"code":"import {useEffect, useRef} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {canUseDOM} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CPortal\r\n\r\nconst CPortal = props=>{\r\n\r\n  const fields = useRef({defaultNode: null}).current;\r\n\r\n  // effect\r\n\r\n  useEffect(() => {\r\n    return function cleanup() {\r\n      if (fields.defaultNode) {\r\n        document.body.removeChild(fields.defaultNode);\r\n      }\r\n      fields.defaultNode = null;\r\n    };\r\n  },\r\n  [fields.defaultNode]);\r\n\r\n  // render\r\n\r\n  if (!canUseDOM) {\r\n    return null;\r\n  }\r\n\r\n  if (!props.node && !fields.defaultNode) {\r\n    fields.defaultNode = document.createElement('div');\r\n    document.body.appendChild(fields.defaultNode);\r\n  }\r\n\r\n  return ReactDOM.createPortal(\r\n    props.children,\r\n    props.node || fields.defaultNode\r\n  );\r\n\r\n}\r\n\r\nCPortal.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  //\r\n  node: PropTypes.any\r\n};\r\n\r\nexport default CPortal;\r\n"}},{"id":"de730b74-9854-595f-a7ab-c41db6ca3bda","name":"CProgress","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport toNumber from 'lodash.tonumber';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CProgress\r\n\r\nconst CProgress = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    barClassName,\r\n    barProps,\r\n    height,\r\n    value,\r\n    max,\r\n    animated,\r\n    striped,\r\n    color,\r\n    bar,\r\n    multi,\r\n    showPercentage,\r\n    showValue,\r\n    precision,\r\n    size,\r\n    ...attributes\r\n  } = props;\r\n\r\n  let valueNumber = toNumber(value);\r\n  let percent = (valueNumber / toNumber(max)) * 100;\r\n\r\n  // render\r\n\r\n  const progressClasses = mapToCssModules(classNames(\r\n    className,\r\n    size ? 'progress-'+size : null,\r\n    'progress'\r\n  ), cssModule);\r\n\r\n  const progressBarClasses = mapToCssModules(classNames(\r\n    'progress-bar',\r\n    bar ? className || barClassName : barClassName,\r\n    animated ? 'progress-bar-animated' : null,\r\n    color ? `bg-${color}` : null,\r\n    striped || animated ? 'progress-bar-striped' : null\r\n  ), cssModule);\r\n\r\n  if (precision)\r\n    percent = percent.toPrecision(precision);\r\n  if (precision)\r\n    valueNumber = valueNumber.toPrecision(precision);\r\n\r\n  const ProgressBar = multi ? children : (\r\n    <div\r\n      className={progressBarClasses}\r\n      style={{ width: `${percent}%` }}\r\n      role=\"progressbar\"\r\n      aria-valuenow={value}\r\n      aria-valuemin=\"0\"\r\n      aria-valuemax={max}\r\n      {...barProps}\r\n    >\r\n      {showPercentage?percent+'%': showValue?value: children}\r\n    </div>\r\n  );\r\n\r\n  if (bar) {\r\n    return ProgressBar;\r\n  }\r\n\r\n  let style;\r\n  if (height)\r\n    style = {height};\r\n  else\r\n    style = {};\r\n\r\n  return (\r\n    <Tag {...attributes} style={style} className={progressClasses} ref={innerRef}>\r\n      {ProgressBar}\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCProgress.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  barClassName: PropTypes.string,\r\n  barProps: PropTypes.object,\r\n  height: PropTypes.string,\r\n  bar: PropTypes.bool,\r\n  multi: PropTypes.bool,\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n  ]),\r\n  max: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n  ]),\r\n  animated: PropTypes.bool,\r\n  striped: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  precision: PropTypes.number,\r\n  showPercentage: PropTypes.bool,\r\n  showValue: PropTypes.bool,\r\n  size: PropTypes.string\r\n};\r\n\r\nCProgress.defaultProps = {\r\n  tag: 'div',\r\n  value: 0,\r\n  max: 100,\r\n};\r\n\r\nexport default CProgress;\r\n"}},{"id":"9a137eab-5082-5a1e-ad4e-a80e42e4f539","name":"CRow","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CRow\r\n\r\nconst CRow = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    gutters,\r\n    form,\r\n    alignHorizontal,\r\n    alignVertical,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    !gutters ? 'no-gutters' : null,\r\n    alignHorizontal ? `justify-content-${alignHorizontal}` : null,\r\n    alignVertical ? `align-${alignVertical}` : null,\r\n    form ? 'form-row' : 'row'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCRow.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  gutters: PropTypes.bool,\r\n  form: PropTypes.bool,\r\n  alignHorizontal: PropTypes.string,\r\n  alignVertical: PropTypes.string\r\n};\r\n\r\nCRow.defaultProps = {\r\n  tag: 'div',\r\n  gutters: true\r\n};\r\n\r\nexport default CRow;\r\n"}},{"id":"2d24be76-2a01-5dd5-8eb5-d780d9d892f2","name":"CSidebar","fields":{"code":"import React, {useState, useRef, useMemo, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport ClickOutHandler from 'react-onclickout'\r\nimport './Shared/element-closest'\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CSidebar\r\n\r\nconst CSidebar = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    breakpoint,\r\n    show,\r\n    fixed,\r\n    unfoldable,\r\n    minimize,\r\n    size,\r\n    hideOnMobileClick,\r\n    aside,\r\n    colorScheme,\r\n    overlaid,\r\n    dropdownMode,\r\n    onChange,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(show);\r\n  const compData = useRef({reRender:false, ref: {}}).current;\r\n\r\n  //let ref={};\r\n  const reference = (r)=>{\r\n    compData.ref.current = r;\r\n    innerRef && innerRef(r);\r\n  }\r\n\r\n  //methods\r\n\r\n  const closeSidebar = ()=>{\r\n    if (isOpen==='responsive')\r\n    return;\r\n    setIsOpen('responsive');\r\n    onChange && onChange('close');\r\n  }\r\n  const isOnMobile = ()=>{\r\n    return Boolean(getComputedStyle(compData.ref.current).getPropertyValue('--is-mobile'))\r\n  }\r\n  const onSidebarClick = (e)=>{\r\n    const hiddingElementClicked = e.target.className.includes && e.target.className.includes('c-sidebar-nav-link')\r\n    if (\r\n      hiddingElementClicked &&\r\n      hideOnMobileClick &&\r\n      isOnMobile()\r\n    ) {\r\n      closeSidebar()\r\n    }\r\n  }\r\n  const onClickOut = ()=>{\r\n    if (compData.reRender){\r\n      return;\r\n    }\r\n    closeSidebar()\r\n  }\r\n\r\n  useMemo(()=>{\r\n    if (compData.nextRender){\r\n      compData.reRender = true;\r\n      setIsOpen(show);\r\n    }\r\n  },[show]);\r\n\r\n  useEffect(()=>{\r\n    compData.reRender = false;\r\n  })\r\n\r\n\r\n  compData.nextRender = true;\r\n\r\n  // render\r\n\r\n  const haveResponsiveClass = breakpoint && isOpen === 'responsive'\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar',\r\n    colorScheme ? `c-sidebar-${colorScheme}` : null,\r\n    isOpen===true ? 'c-sidebar-show' : null,\r\n    haveResponsiveClass ? `c-sidebar-${breakpoint}-show` : null,\r\n    fixed && !overlaid ? 'c-sidebar-fixed' : null,\r\n    aside ? 'c-sidebar-right' : null,\r\n    minimize && !unfoldable ? 'c-sidebar-minimized' : null,\r\n    minimize && unfoldable ? 'c-sidebar-unfoldable' : null,\r\n    overlaid ? 'c-sidebar-overlaid' : null,\r\n    size ? `c-sidebar-${size}` : null\r\n  );\r\n\r\n  /*\r\n  const clickOutClasses = classNames(\r\n    'c-sidebar-backdrop',\r\n    isOpen ? 'd-show' : 'd-none'\r\n  );\r\n  const style = {\r\n    background: isOpen? 'black' : 'white'\r\n  }\r\n  */\r\n\r\n  const state = {\r\n    minimize: minimize && !unfoldable\r\n  }\r\n\r\n  if (isOpen)\r\n    return (\r\n      <ClickOutHandler onClickOut={onClickOut}>\r\n        <Context.Provider value={{\r\n          dropdownMode: dropdownMode,\r\n          state\r\n        }}>\r\n          <Tag {...attributes} className={classes} ref={reference} onClick={onSidebarClick}>\r\n            {children}\r\n          </Tag>\r\n        </Context.Provider>\r\n      </ClickOutHandler>\r\n    );\r\n  else\r\n    return (\r\n      <Context.Provider value={{\r\n        dropdownMode: dropdownMode,\r\n        state\r\n      }}>\r\n        <Tag {...attributes} className={classes} ref={reference} onClick={onSidebarClick}>\r\n          {children}\r\n        </Tag>\r\n      </Context.Provider>\r\n    );\r\n\r\n}\r\n\r\nCSidebar.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  fixed: PropTypes.bool,\r\n  unfoldable: PropTypes.bool,\r\n  overlaid: PropTypes.bool,\r\n  breakpoint: PropTypes.oneOf([false, '', 'sm', 'md', 'lg', 'xl']),\r\n  minimize: PropTypes.bool,\r\n  show: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  size: PropTypes.oneOf(['', 'sm', 'lg', 'xl']),\r\n  hideOnMobileClick: PropTypes.bool,\r\n  aside: PropTypes.bool,\r\n  colorScheme: PropTypes.string,\r\n  dropdownMode: PropTypes.oneOf(['', 'openActive', 'close', 'closeInactive', 'noAction']),\r\n  onChange: PropTypes.func\r\n};\r\n\r\nCSidebar.defaultProps = {\r\n  tag: 'div',\r\n  fixed: true,\r\n  breakpoint: 'lg',\r\n  show: 'responsive',\r\n  hideOnMobileClick: true,\r\n  colorScheme: 'dark',\r\n  dropdownMode: 'openActive',\r\n};\r\n\r\nexport default CSidebar;\r\n"}},{"id":"82334da6-6c72-5d7c-ae4f-354345a98389","name":"CSidebarBrand","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CLink from './CLink';\r\n\r\n//component - CoreUI / CSidebarBrand\r\n\r\nconst CSidebarBrand = props=>{\r\n\r\n  let {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    img,\r\n    imgFull,\r\n    imgMinimized,\r\n    wrappedInLink,\r\n    linkClassName,\r\n    linkProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const imgSrc = brand=>{\r\n    return brand.src ? brand.src : '';\r\n  }\r\n  const imgWidth = brand=>{\r\n    return brand.width ? brand.width : 'auto';\r\n  }\r\n  const imgHeight = brand=>{\r\n    return brand.height ? brand.height : 'auto';\r\n  }\r\n  const imgAlt = brand=>{\r\n    return brand.alt ? brand.alt : '';\r\n  }\r\n  const navbarBrandImg = (props, classBrand, key)=>{\r\n    /*\r\n    const {\r\n      src,\r\n      width,\r\n      alt,\r\n      height,\r\n      ...attributes\r\n    } = props;\r\n    */\r\n    return (\r\n      <img\r\n          src={imgSrc(props)}\r\n          width={imgWidth(props)}\r\n          height={imgHeight(props)}\r\n          alt={imgAlt(props)}\r\n          className={classBrand}\r\n          {...props}\r\n          key={key.toString()}\r\n      />\r\n    );\r\n  }\r\n\r\n  // render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar-brand'\r\n  );\r\n\r\n  if (custom){\r\n    return (\r\n      <Tag className={classes} {...attributes} ref={innerRef}>\r\n        {children}\r\n      </Tag>\r\n    );\r\n  }\r\n\r\n  const classesLink = classNames(\r\n    linkClassName,\r\n    'c-sidebar-brand'\r\n  );\r\n\r\n  const imgChildren = [];\r\n  if (imgFull) {\r\n    imgChildren.push(navbarBrandImg(imgFull||img, 'c-sidebar-brand-full', 1));\r\n  }\r\n  if (imgMinimized) {\r\n    imgChildren.push(navbarBrandImg(imgMinimized||img, 'c-sidebar-brand-minimized', imgChildren.length + 1));\r\n  }\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef}>\r\n      {\r\n        wrappedInLink ?\r\n          <CLink className={classesLink} {...linkProps} >\r\n            {imgChildren}\r\n          </CLink>\r\n        :imgChildren\r\n      }\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCSidebarBrand.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  img: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  imgFull: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  imgMinimized: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  linkClassName: PropTypes.string,\r\n  linkProps: PropTypes.object,\r\n  wrappedInLink: PropTypes.oneOfType([PropTypes.object, PropTypes.string])\r\n};\r\n\r\nCSidebarBrand.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSidebarBrand;\r\n"}},{"id":"2b3173a3-1696-5d16-ab2c-4fcf6c7331aa","name":"CSidebarClose","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CButtonClose from './CButtonClose';\r\n\r\n//component - CoreUI / CSidebarClose\r\n\r\nconst CSidebarClose = props=>{\r\n\r\n  const {\r\n    className,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = classNames(\r\n    'c-sidebar-close',\r\n    className\r\n  );\r\n\r\n  return (\r\n    <CButtonClose {...attributes} className={classes}>\r\n      <svg className=\"c-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n        <title>x</title>\r\n        <path d=\"M20.030 5.030l-1.061-1.061-6.97 6.97-6.97-6.97-1.061 1.061 6.97 6.97-6.97 6.97 1.061 1.061 6.97-6.97 6.97 6.97 1.061-1.061-6.97-6.97 6.97-6.97z\"></path>\r\n      </svg>\r\n    </CButtonClose>\r\n  );\r\n\r\n}\r\n\r\nCSidebarClose.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarClose.defaultProps = {\r\n};\r\n\r\nexport default CSidebarClose;\r\n"}},{"id":"34c48812-3e77-5a25-93bc-f50a1d601cbb","name":"CSidebarFooter","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CSidebarFooter\r\n\r\nconst CSidebarFooter = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = classNames(className, 'c-sidebar-footer');\r\n\r\n  return (\r\n    children ?\r\n      <Tag className={classes} {...attributes} ref={innerRef}>\r\n        {children}\r\n      </Tag>\r\n     : null\r\n  );\r\n\r\n}\r\n\r\nCSidebarFooter.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarFooter.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSidebarFooter;\r\n"}},{"id":"1af04ccb-a71f-5195-a052-6ca68acdb105","name":"CSidebarForm","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CSidebarForm\r\n\r\nconst CSidebarForm = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(className, 'c-sidebar-form');\r\n\r\n  return (\r\n    children ?\r\n      <Tag className={classes} {...attributes} ref={innerRef}>\r\n        {children}\r\n      </Tag>\r\n     : null\r\n  );\r\n\r\n}\r\n\r\nCSidebarForm.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarForm.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSidebarForm;\r\n"}},{"id":"703eb404-e67b-5570-a752-99aa0997f25d","name":"CSidebarHeader","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CSidebarHeader\r\n\r\nconst CSidebarHeader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar-header'\r\n  );\r\n\r\n  return (\r\n    children ?\r\n      <Tag className={classes} {...attributes} ref={innerRef}>\r\n        {children}\r\n      </Tag>\r\n     : null\r\n  );\r\n\r\n}\r\n\r\nCSidebarHeader.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarHeader.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CSidebarHeader;\r\n"}},{"id":"6af58e41-3501-5989-9708-665739ce3bd2","name":"CSidebarMinimizer","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CSidebarMinimizer\r\n\r\nconst CSidebarMinimizer = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar-minimizer'\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCSidebarMinimizer.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  type: PropTypes.string\r\n};\r\n\r\nCSidebarMinimizer.defaultProps = {\r\n  tag: 'button',\r\n  type: 'button'\r\n};\r\n\r\nexport default CSidebarMinimizer;\r\n"}},{"id":"ee06554c-8320-54c1-b178-6f01125a3d9b","name":"CSidebarNav","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport CSidebarNavTitle from './CSidebarNavTitle';\r\nimport CSidebarNavDivider from './CSidebarNavDivider';\r\nimport CSidebarNavDropdown from './CSidebarNavDropdown';\r\nimport CSidebarNavItem from './CSidebarNavItem';\r\n\r\n//component - CoreUI / CSidebarNav\r\n\r\nconst CSidebarNav = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    navConfig,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const isExternal = url=>{\r\n    const link = url ? url.substring(0, 4) : '';\r\n    return link === 'http';\r\n  }\r\n\r\n  // render items\r\n\r\n  // nav dropdown\r\n  const navDropdown = (item, key)=>{\r\n    return (\r\n        <CSidebarNavDropdown\r\n          key={key}\r\n          icon={item.icon}\r\n          name={item.name}\r\n          show={props.location.pathname.indexOf(item.url)>-1}\r\n        >\r\n          {navList(item.children)}\r\n        </CSidebarNavDropdown>\r\n    )\r\n  }\r\n  // nav item with nav link\r\n  const navItem = (item, key)=>{\r\n\r\n    let badgeProps;\r\n    if (item.badge){\r\n      badgeProps={\r\n        text: item.badge.text,\r\n        color: item.badge.variant,\r\n        className: item.badge.class\r\n      }\r\n    }\r\n    else {\r\n      badgeProps={};\r\n    }\r\n\r\n\r\n    let linkProps;\r\n    //\r\n    if (item.attributes){\r\n      linkProps = item.attributes;\r\n      //replace, innerRef (func, object)\r\n      //activeStyle, exact: bool, strict: bool\r\n    }\r\n    else {\r\n      linkProps = {};\r\n    }\r\n    //\r\n    let disabled = false;\r\n    if (item.attributes && item.attributes.disabled){\r\n      disabled = true;\r\n    }\r\n    disabled && (linkProps['disabled'] = disabled);\r\n\r\n\r\n    let classes;\r\n    if (item.class)\r\n      classes = item.class;\r\n    else {\r\n      classes = '';\r\n    }\r\n\r\n    if (isExternal(item.url))\r\n      linkProps['href'] = item.url;\r\n    else\r\n      linkProps['to'] = item.url;\r\n\r\n    let compProps;\r\n    if (item.itemAttr)\r\n      compProps = item.itemAttr;\r\n    else {\r\n      compProps = {}\r\n    }\r\n\r\n    return <CSidebarNavItem\r\n      {...compProps}\r\n      className={classes}\r\n      key={key}\r\n      icon = {item.icon}\r\n      badge = {badgeProps}\r\n      linkClassName={props.location&&props.location.pathname.indexOf(item.url)>-1 ? 'c-active' : null}\r\n      linkProps={linkProps}\r\n      >\r\n        {item.name}\r\n      </CSidebarNavItem>\r\n\r\n  }\r\n\r\n  // simple wrapper for nav-title item\r\n  const navWrapper = item=>{\r\n    return item.wrapper && item.wrapper.element ? React.createElement(item.wrapper.element, item.wrapper.attributes, item.name) : item.name;\r\n  }\r\n  // nav list section title\r\n  const navTitle = (title, key)=>{\r\n    return <CSidebarNavTitle key={key} className={title.class}>{navWrapper(title)}</CSidebarNavTitle>;\r\n  }\r\n\r\n  // nav list divider\r\n  const navDivider = (divider, key)=>{\r\n    return <CSidebarNavDivider key={key} className={divider.class} />;\r\n  }\r\n\r\n  // nav label with nav link\r\n  const navLabel = (item, key)=>{\r\n\r\n    const classes = classNames(\r\n      item.label.class ? item.label.class : null,\r\n      item.label.variant ? 'text-'+item.label.variant : null,\r\n    )\r\n\r\n    return <CSidebarNavItem\r\n      key={key}\r\n      linkClassName={classes}\r\n      linkProps={{\r\n        icon: item.icon ? item.icon : 'user',\r\n        to: item.url,\r\n        label: true\r\n      }}\r\n      >\r\n        {item.name}\r\n      </CSidebarNavItem>\r\n\r\n  }\r\n\r\n  // select nav type\r\n  const navType = (item, idx)=>{\r\n    return (\r\n      item.title ? navTitle(item, idx)\r\n        : item.divider ? navDivider(item, idx)\r\n          : item.label ? navLabel(item, idx)\r\n            : item.children ? navDropdown(item, idx)\r\n              : navItem(item, idx)\r\n    );\r\n  }\r\n\r\n  // nav list\r\n  const navList = items=>{\r\n    return items.map((item, index) => navType(item, index));\r\n  }\r\n\r\n  //render\r\n\r\n  delete attributes.Tag;\r\n\r\n  const navClasses = classNames(\r\n    className,\r\n    'c-sidebar-nav',\r\n    'h-100'\r\n  );\r\n\r\n  //state\r\n\r\n  const isRtl = getComputedStyle(document.querySelector('html')).direction === 'rtl'\r\n\r\n  // sidebar-nav root\r\n\r\n  return (\r\n      <PerfectScrollbar options={{ suppressScrollX: !isRtl }} className={navClasses} ref={innerRef} component={Tag} {...attributes}>\r\n        {navConfig.items ? navList(navConfig.items) : null}\r\n        {children}\r\n      </PerfectScrollbar>\r\n  );\r\n}\r\n\r\nCSidebarNav.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  location: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  navConfig: PropTypes.any\r\n};\r\n\r\nCSidebarNav.defaultProps = {\r\n  tag: 'ul',\r\n  navConfig: {}\r\n};\r\n\r\nexport default CSidebarNav;\r\n"}},{"id":"d2619008-21ec-576f-8ea0-8262fd094382","name":"CSidebarNavDivider","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CSidebarNavDivider\r\n\r\nconst CSidebarNavDivider = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar-nav-divider'\r\n  );\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCSidebarNavDivider.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarNavDivider.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CSidebarNavDivider;\r\n"}},{"id":"90d61212-e7b3-561b-8766-ff5faa2a6c9b","name":"CSidebarNavDropdown","fields":{"code":"import React, {useState, useContext, useMemo, useRef, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { CIcon } from '@coreui/icons-react';\r\n\r\nimport {Context} from './CSidebar';\r\n\r\n//component - CoreUI / CSidebarNavDropdown\r\n\r\nconst CSidebarNavDropdown = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    //\r\n    innerRef,\r\n    icon,\r\n    fontIcon,\r\n    name,\r\n    show,\r\n    toggle,\r\n    toggleItem,\r\n    route,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(show);\r\n  const compData = useRef({}).current;\r\n\r\n  // context\r\n  const context = useContext(Context);\r\n\r\n  let dropdownMode;\r\n\r\n  // methods\r\n\r\n  const onClick = (e)=>{\r\n    setIsOpen(!isOpen);\r\n    toggle && toggle(e);\r\n  }\r\n  const onItemClick = (e)=>{\r\n    toggleItem && toggleItem(e);\r\n  }\r\n\r\n  // computed\r\n\r\n  if (context.dropdownMode)\r\n    dropdownMode = context.dropdownMode;\r\n  else\r\n    dropdownMode = 'openActive';\r\n\r\n  //watch\r\n  //show\r\n  useMemo(()=>{\r\n    if (compData.nextRender)\r\n      setIsOpen(show);\r\n  },[show]);\r\n  //dropdownMode\r\n  useMemo(()=>{\r\n    const mode = dropdownMode;\r\n    if (mode === 'close') {\r\n      setIsOpen(false);\r\n    } else if (mode === 'closeInactive' && route) {\r\n      setIsOpen(route.fullPath.includes(route));\r\n    }  else if (mode === 'openActive' && !isOpen && route) {\r\n      setIsOpen(route.fullPath.includes(route));\r\n    }\r\n  },[route]);\r\n\r\n  //effect\r\n  useEffect(() => {\r\n    compData.nextRender = true;\r\n  }, []);\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar-nav-dropdown',\r\n    isOpen ? 'c-show' : null\r\n  );\r\n\r\n  let iconProps;\r\n  if (typeof icon === 'object')\r\n    iconProps = icon;\r\n  else\r\n    iconProps = {name:icon};\r\n\r\n  const iconClasses = classNames(\r\n    'c-sidebar-nav-icon',\r\n    fontIcon ? fontIcon : null\r\n  );\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef}>\r\n      <a className=\"c-sidebar-nav-dropdown-toggle\" onClick={onClick}>\r\n        {icon ? <CIcon className=\"c-sidebar-nav-icon\" {...iconProps} /> : ''}\r\n        {fontIcon ? <i className={iconClasses}></i> : ''}\r\n        {name}\r\n      </a>\r\n      <ul className=\"c-sidebar-nav-dropdown-items\" onClick={onItemClick}>\r\n        {children}\r\n      </ul>\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCSidebarNavDropdown.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  name: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  fontIcon: PropTypes.string,\r\n  show: PropTypes.bool,\r\n  toggle: PropTypes.func,\r\n  toggleItem: PropTypes.func,\r\n  route: PropTypes.string\r\n};\r\n\r\nCSidebarNavDropdown.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CSidebarNavDropdown;\r\n"}},{"id":"f58932ac-12ce-5e71-a383-658d39ba6c30","name":"CSidebarNavItem","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CSidebarNavLink from './CSidebarNavLink';\r\n\r\n//component - CoreUI / CSidebarNavItem\r\n\r\nconst CSidebarNavItem = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    linkClassName,\r\n    linkProps,\r\n    ///\r\n    icon,\r\n    to,\r\n    href,\r\n    badge,\r\n    ...attributes\r\n  } = props;\r\n\r\n  let link = {...linkProps};\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar-nav-item'\r\n  );\r\n\r\n  const linkClasses = classNames(\r\n    linkClassName\r\n  );\r\n\r\n  !link && (link={})\r\n  icon && (link.icon = icon);\r\n  !to && href && (link.href = href);\r\n  to && (link.to = to);\r\n  badge && (link.badgeProps = badge);\r\n\r\n  return (\r\n    !custom ?\r\n      <Tag className={classes} {...attributes} ref={innerRef}>\r\n        <CSidebarNavLink className={linkClasses} {...link}>\r\n          {children}\r\n        </CSidebarNavLink>\r\n      </Tag> :\r\n      <Tag className={classes} {...attributes} ref={innerRef}>\r\n        {children}\r\n      </Tag>\r\n  );\r\n\r\n}\r\n\r\nCSidebarNavItem.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  linkClassName: PropTypes.string,\r\n  linkProps: PropTypes.object,\r\n  to: PropTypes.string,\r\n  href: PropTypes.string,\r\n  ///\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  badge: PropTypes.object,\r\n};\r\n\r\nCSidebarNavItem.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CSidebarNavItem;\r\n"}},{"id":"613e5de3-6a9c-522e-97f6-99303bf521f9","name":"CSidebarNavLink","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CLink from './CLink';\r\nimport CBadge from './CBadge';\r\nimport { CIcon } from '@coreui/icons-react';\r\n\r\n//component - CoreUI / CSidebarNavLink\r\n\r\nconst CSidebarNavLink = props=>{\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    custom,\r\n    //\r\n    label,\r\n    icon,\r\n    fontIcon,\r\n    badgeClassName,\r\n    badgeProps,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    label ? 'c-sidebar-nav-label' : 'c-sidebar-nav-link'\r\n  );\r\n\r\n  let iconProps;\r\n  if (typeof icon === 'object')\r\n    iconProps = icon;\r\n  else\r\n    iconProps = {name:icon};\r\n\r\n  if (!custom){\r\n    const iconClasses = classNames(\r\n      'c-sidebar-nav-icon',\r\n      fontIcon ? fontIcon : null\r\n    );\r\n    const badgeClasses = classNames(\r\n      badgeClassName\r\n    );\r\n    return (\r\n      <CLink {...attributes} className={classes}>\r\n        {icon?<CIcon className=\"c-sidebar-nav-icon\" {...iconProps} />:''}\r\n        {fontIcon?<i className={iconClasses} />:''}\r\n        {children}\r\n        {badgeProps?<CBadge className={badgeClasses} {...badgeProps}>{badgeProps.text}</CBadge>:''}\r\n      </CLink>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CLink {...attributes} className={classes}/>\r\n  );\r\n\r\n}\r\n\r\nCSidebarNavLink.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  icon: PropTypes.oneOfType(['string', 'object']),\r\n  label: PropTypes.bool,\r\n  fontIcon: PropTypes.string,\r\n  badgeProps: PropTypes.object,\r\n  badgeClassName: PropTypes.object\r\n};\r\n\r\nCSidebarNavLink.defaultProps = {\r\n};\r\n\r\nexport default CSidebarNavLink;\r\n"}},{"id":"6b94e9d4-94d1-547f-a517-ffe9f9dd58da","name":"CSidebarNavTitle","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CSidebarNavTitle\r\n\r\nconst CSidebarNavTitle = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'c-sidebar-nav-title'\r\n  );\r\n\r\n  return (\r\n    <Tag className={classes} {...attributes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCSidebarNavTitle.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string])\r\n};\r\n\r\nCSidebarNavTitle.defaultProps = {\r\n  tag: 'li'\r\n};\r\n\r\nexport default CSidebarNavTitle;\r\n"}},{"id":"dd10c81f-9bee-51f2-b670-58fe64caf125","name":"CSpinner","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CSpinner\r\n\r\nconst CSpinner = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    variant,\r\n    size,\r\n    color,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(\r\n    classNames(\r\n      className,\r\n      `spinner-${variant}`,\r\n      size ? `spinner-${variant}-${size}` : false,\r\n      color ? `text-${color}` : false\r\n    ),\r\n    cssModule\r\n  );\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} role=\"status\" ref={innerRef}>\r\n      {\r\n        children &&\r\n        <span className={mapToCssModules('sr-only', cssModule)}>\r\n          {children}\r\n        </span>\r\n      }\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCSpinner.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.string,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  variant: PropTypes.string,\r\n  size: PropTypes.string,\r\n  color: PropTypes.string\r\n};\r\n\r\nCSpinner.defaultProps = {\r\n  tag: 'div',\r\n  variant: 'border',\r\n  children: 'Loading...'\r\n};\r\n\r\nexport default CSpinner;\r\n"}},{"id":"3cb81eca-92f2-585b-9aec-b775b9d7f46f","name":"CSwitch","fields":{"code":"import React, {useEffect, useState, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n//component - CoreUI / CSwitch\r\n\r\nconst CSwitch = props=>{\r\n\r\n  let {\r\n    className,\r\n    //\r\n    innerRef,\r\n    type,\r\n    size,\r\n    disabled,\r\n    color,\r\n    labelOn,\r\n    labelOff,\r\n    variant,\r\n    shape,\r\n\r\n    name,\r\n    required,\r\n    value,\r\n    ...attributes\r\n    //label,\r\n    //outline,\r\n  } = props;\r\n\r\n  const fields = useRef({firstRender: true}).current;\r\n  const [checked, setChecked] = useState(props.defaultChecked || props.checked);\r\n  //const [selected, setSelected] = useState([]);\r\n\r\n  //effect - update\r\n  useEffect(() => {\r\n    if (fields.firstRender) return;\r\n    setChecked(props.checked);\r\n  },\r\n  [props.checked]);\r\n\r\n  useEffect(() => {\r\n    fields.firstRender = false;\r\n  },\r\n  []);\r\n\r\n  //events\r\n  const onChange = e=>{\r\n    const target = e.target;\r\n    setChecked(target.checked);\r\n    if (props.onChange) {\r\n      props.onChange(e);\r\n    }\r\n  }\r\n\r\n  //render\r\n\r\n  delete attributes.checked;\r\n  delete attributes.defaultChecked;\r\n  delete attributes.onChange;\r\n\r\n  /*\r\n  const outlineString = this.outline ? '-outline' : ''\r\n      const outlinedAltString = this.outline === 'alt' ? '-alt' : ''\r\n      return [\r\n        'c-switch form-check-label',\r\n        `c-switch${outlineString}-${this.color}${outlinedAltString}`,\r\n        {\r\n          [`c-switch-${this.size}`]: this.size,\r\n          [`c-switch-${this.shape}`]: this.shape,\r\n          'c-switch-label': this.labelOn || this.labelOff\r\n        }\r\n      ]\r\n  */\r\n  /*\r\n  let outline='';\r\n  switch (variant) {\r\n    case '3d':\r\n\r\n      break;\r\n    case 'opposite':\r\n      variant=\"alt\";\r\n      break;\r\n    case '3d-opposite':\r\n\r\n      break;\r\n  }\r\n  */\r\n\r\n  //console.log(variant);\r\n\r\n  const variant2 = ['opposite', 'outline'].indexOf(variant)>-1 ? `-${variant}` : ''\r\n  let classes = classNames(\r\n    className,\r\n    'c-switch form-check-label',\r\n    labelOn||labelOff ? 'c-switch-label' : false,\r\n    size ? `c-switch-${size}` : '',\r\n    shape ? `c-switch-${shape}` : '',\r\n    color ? `c-switch${variant2}-${color}` : '',\r\n    variant=='3d' ? 'c-switch-3d' : ''\r\n  );\r\n\r\n  const inputClasses = classNames(\r\n    'c-switch-input',\r\n    'c-form-check-input',\r\n  );\r\n\r\n  const sliderClasses = classNames(\r\n    'c-switch-slider'\r\n  );\r\n\r\n  //classes = \"c-switch form-check-label c-switch-label c-switch-opposite c-switch-primary c-switch-lg\"\r\n\r\n  return (\r\n    <label {...attributes} className={classes} ref={innerRef}>\r\n      <input className={inputClasses} type={type} onChange={onChange} checked={checked} name={name} required={required} disabled={disabled} value={value} />\r\n      <span className={sliderClasses} data-checked={labelOn} data-unchecked={labelOff}></span>\r\n    </label>\r\n  );\r\n\r\n}\r\n\r\nCSwitch.propTypes = {\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  size: PropTypes.oneOf(['', 'lg', 'sm']),\r\n  shape: PropTypes.oneOf(['', 'pill', 'square']),\r\n  variant: PropTypes.oneOf(['', '3d', '3d-opposite', 'opposite', 'outline']),\r\n  color: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  labelOn: PropTypes.string,\r\n  labelOff: PropTypes.string,\r\n  type: PropTypes.oneOf(['checkbox', 'radio']),\r\n\r\n  value: PropTypes.string,\r\n  defaultChecked: PropTypes.bool,\r\n  name: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  form: PropTypes.any,//?\r\n  required: PropTypes.bool,\r\n  onChange: PropTypes.func\r\n\r\n  //label: PropTypes.bool,\r\n  /*\r\n  outline: PropTypes.oneOfType([\r\n    PropTypes.bool,\r\n    PropTypes.string,\r\n    PropTypes.oneOf(['', 'alt'])\r\n  ]),\r\n  */\r\n\r\n};\r\n\r\nCSwitch.defaultProps = {\r\n  size: '',\r\n  checked: false,\r\n  type: 'checkbox',\r\n  variant: '',\r\n\r\n  defaultChecked: false,\r\n  disabled: false,\r\n  required: false,\r\n  //labelOn: 'On',\r\n  //labelOff: 'Off',\r\n  //label: false,\r\n  //outline: false,\r\n};\r\n\r\nexport default CSwitch;\r\n"}},{"id":"be08b8b1-af63-5d4a-b01a-190a8feb7995","name":"CTabContent","fields":{"code":"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n//import {polyfill} from 'react-lifecycles-compat';\r\n\r\nexport const Context = React.createContext({});\r\n\r\n//component - CoreUI / CTabContent\r\n\r\nconst CTabContent = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    activeTab: activeTabProp,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const [activeTab, setActiveTab] = useState(activeTabProp);\r\n\r\n  if (activeTab!==activeTabProp)\r\n    setActiveTab(activeTabProp);\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    'tab-content',\r\n    className),\r\n    cssModule\r\n  );\r\n\r\n  return (\r\n    <Context.Provider value={{\r\n      activeTabId: activeTab\r\n    }}>\r\n      <Tag {...attributes} className={classes} ref={innerRef} />\r\n    </Context.Provider>\r\n  );\r\n\r\n}\r\n\r\nCTabContent.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  activeTab: PropTypes.any\r\n};\r\n\r\nCTabContent.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\n//polyfill(CTabContent);\r\n\r\nexport default CTabContent;\r\n"}},{"id":"ad569745-e5ed-5beb-b255-f82cb3ff92a2","name":"CTabPane","fields":{"code":"import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport {Context} from './CTabContent.js';\r\n\r\n//component - CoreUI / CTabPane\r\n\r\nconst CTabPane = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    tabId,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const context = useContext(Context);\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    'tab-pane',\r\n    className,\r\n    { 'active': tabId === context.activeTabId }\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCTabPane.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  tabId: PropTypes.any\r\n};\r\n\r\nCTabPane.defaultProps = {\r\n  tag: 'div',\r\n};\r\n\r\nexport default CTabPane;\r\n"}},{"id":"315b7226-0f7c-5529-b62f-14198d0b71a5","name":"CTable","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CTable\r\n\r\nconst CTable = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    size,\r\n    bordered,\r\n    borderless,\r\n    striped,\r\n    dark,\r\n    hover,\r\n    responsive,\r\n    responsiveTag: ResponsiveTag,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'table',\r\n    size ? 'table-' + size : false,\r\n    bordered ? 'table-bordered' : false,\r\n    borderless ? 'table-borderless' : false,\r\n    striped ? 'table-striped' : false,\r\n    dark ? 'table-dark' : false,\r\n    hover ? 'table-hover' : false,\r\n  ), cssModule);\r\n\r\n  let table;\r\n  if (custom)\r\n    table = <Tag {...attributes} className={classes} />;\r\n  else {\r\n    table = (\r\n      <Tag {...attributes} className={classes}>\r\n        <tbody>\r\n          {attributes.children}\r\n        </tbody>\r\n      </Tag>\r\n    )\r\n  }\r\n\r\n  if (responsive) {\r\n    const responsiveClassName = responsive === true ? 'table-responsive' : `table-responsive-${responsive}`;\r\n    return (\r\n      <ResponsiveTag className={responsiveClassName} ref={innerRef}>\r\n        {table}\r\n      </ResponsiveTag>\r\n    );\r\n  }\r\n\r\n  return table;\r\n\r\n}\r\n\r\nCTable.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  size: PropTypes.string,\r\n  bordered: PropTypes.bool,\r\n  borderless: PropTypes.bool,\r\n  striped: PropTypes.bool,\r\n  dark: PropTypes.bool,\r\n  hover: PropTypes.bool,\r\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  responsiveTag: tagPropType\r\n};\r\n\r\nCTable.defaultProps = {\r\n  tag: 'table',\r\n  responsiveTag: 'div',\r\n};\r\n\r\nexport default CTable;\r\n"}},{"id":"91382492-3445-5d60-8ac7-f2eb3a179b91","name":"CToast","fields":{"code":"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\nimport Slot from './Shared/Slot';\r\nimport CToastHeader from './CToastHeader';\r\nimport CToastBody from './CToastBody';\r\nimport CButtonClose from './CButtonClose';\r\nimport CFade from './CFade';\r\nimport style from './CToast.module.css';\r\n\r\n//component - CoreUI / CToast\r\n\r\nconst CToast = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    show,\r\n    header,\r\n    headerSlot,\r\n    autohide,\r\n    closeButton,\r\n    fade,\r\n    transition,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const [shown, setShown] = useState(show);\r\n\r\n  const transitionPar = {\r\n    ...CFade.defaultProps,\r\n    ...transition,\r\n    baseClass: fade ? transition.baseClass : '',\r\n    timeout: fade ? transition.timeout : 0,\r\n  };\r\n\r\n  let timeout;\r\n\r\n  const setAutohide = ()=>{\r\n    timeout = setTimeout(()=>{\r\n      setShown(false);\r\n    }, autohide);\r\n  }\r\n\r\n  const onMouseOver = ()=>{\r\n    clearTimeout(timeout);\r\n  }\r\n  const onMouseOut = ()=>{\r\n    if (autohide)\r\n      setAutohide();\r\n  }\r\n  const onClick = ()=>{\r\n    setShown(false);\r\n  }\r\n\r\n  if (autohide){\r\n    setAutohide();\r\n  }\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'toast',\r\n    'mytoast',\r\n  ), Object.assign(style, cssModule));\r\n\r\n  if (!shown)\r\n    return null;\r\n\r\n  if (!custom)\r\n    return (\r\n      <CFade\r\n        {...attributes}\r\n        {...transitionPar}\r\n        tag={Tag}\r\n        className={classes}\r\n        in={true}\r\n        role=\"alert\"\r\n        innerRef={innerRef}\r\n      >\r\n        <Tag\r\n          {...attributes}\r\n          aria-live=\"assertive\"\r\n          aria-atomic=\"true\"\r\n          onMouseOver={onMouseOver}\r\n          onMouseOut={onMouseOut}\r\n          className={classes}\r\n        >\r\n          <CToastHeader>\r\n          {\r\n            headerSlot || header?\r\n              <Slot content={headerSlot}>\r\n                <strong className=\"mr-auto\">{header}</strong>\r\n              </Slot>:''\r\n          }\r\n          {\r\n            closeButton?\r\n              <CButtonClose className='ml-2 mb-1' onClick={onClick}/>:''\r\n          }\r\n          </CToastHeader>\r\n          <CToastBody>\r\n            {attributes.children}\r\n          </CToastBody>\r\n        </Tag>\r\n      </CFade>\r\n    );\r\n\r\n  return (\r\n    <Tag {...attributes} onMouseOver={onMouseOver} onMouseOut={onMouseOut} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCToast.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  headerSlot: PropTypes.node,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  show: PropTypes.bool,\r\n  header: PropTypes.string,\r\n  autohide: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\r\n  closeButton: PropTypes.bool,\r\n  fade: PropTypes.bool,\r\n  transition: PropTypes.shape(CFade.propTypes),\r\n  role: PropTypes.string\r\n};\r\n\r\nCToast.defaultProps = {\r\n  tag: 'div',\r\n  autohide: 1500,\r\n  closeButton: true,\r\n  fade: true,\r\n  transition: {\r\n    ...CFade.defaultProps,\r\n    unmountOnExit: true,\r\n  },\r\n  role: 'alert',\r\n};\r\n\r\nexport default CToast;\r\n"}},{"id":"f0a4ab87-03c5-52df-b797-58d4d1f60440","name":"CToastBody","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CToastBody\r\n\r\nconst CToastBody = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'toast-body'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCToastBody.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nCToastBody.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CToastBody;\r\n"}},{"id":"3ad3651b-0244-56ec-8101-93c2e0559ce0","name":"CToastHeader","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CToastHeader\r\n\r\nconst CToastHeader = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'toast-header'\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCToastHeader.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nCToastHeader.defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nexport default CToastHeader;\r\n"}},{"id":"8ea334d7-b0bd-5c95-9577-a736b5b0245d","name":"CToaster","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n\r\n//component - CoreUI / CToaster\r\n\r\nconst CToaster = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    className,\r\n    cssModule,\r\n    //\r\n    innerRef,\r\n    position,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    'toaster',\r\n    (position && position !== 'static') ? 'toaster-'+position : null\r\n  ), cssModule);\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} ref={innerRef} />\r\n  );\r\n\r\n}\r\n\r\nCToaster.propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  position: PropTypes.oneOf([\r\n          '', 'static', 'top-right', 'top-left', 'top-center', 'top-full',\r\n          'bottom-right', 'bottom-left', 'bottom-center', 'bottom-full'\r\n        ])\r\n};\r\n\r\nCToaster.defaultProps = {\r\n  tag: 'div',\r\n  position: 'top-right',\r\n};\r\n\r\nexport default CToaster;\r\n"}},{"id":"a5a526d8-078b-5da4-8882-4f6bba97ad32","name":"CToggler","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {tagPropType, mapToCssModules} from './Shared/helper.js';\r\n//import {Context} from './CDropdownCustom';\r\n\r\n//component - CoreUI / CToggler\r\n\r\nconst CToggler = props=>{\r\n\r\n  const {\r\n    tag: Tag,\r\n    children,\r\n    className,\r\n    cssModule,\r\n    custom,\r\n    //\r\n    innerRef,\r\n    toggle,\r\n    inHeader,\r\n    inNavbar,\r\n    ...attributes\r\n  } = props;\r\n\r\n  //const context = useContext(Context);\r\n\r\n  //events\r\n  const onClick = e=>{\r\n    e.preventDefault();\r\n    //if (context.toggle)\r\n    //  context.toggle();\r\n    if (toggle)\r\n      toggle(e);\r\n  }\r\n\r\n  //render\r\n\r\n  const togglerType = inNavbar ? 'navbar' : inHeader ? 'header' : null;\r\n\r\n  const classes = mapToCssModules(classNames(\r\n    className,\r\n    togglerType ? `c-${togglerType}-toggler` : null,\r\n  ), cssModule);\r\n\r\n  if (!custom){\r\n    const classesTrigger = mapToCssModules(classNames(\r\n      togglerType ? `c-${togglerType}-toggler-icon` : null,\r\n    ), cssModule);\r\n    return (\r\n      <Tag {...attributes} className={classes} onClick={onClick}>\r\n        <span className={classesTrigger} />\r\n      </Tag>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Tag {...attributes} className={classes} onClick={onClick} ref={innerRef}>\r\n      {children}\r\n    </Tag>\r\n  );\r\n\r\n}\r\n\r\nCToggler.propTypes = {\r\n  tag: tagPropType,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  custom: PropTypes.bool,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\r\n  inHeader: PropTypes.bool,\r\n  inNavbar: PropTypes.bool,\r\n  type: PropTypes.string,\r\n  toggle: PropTypes.func\r\n};\r\n\r\nCToggler.defaultProps = {\r\n  tag: 'button',\r\n  type: 'button'\r\n};\r\n\r\nexport default CToggler;\r\n"}},{"id":"84144bb8-b125-53d5-abf4-4d288931cd9e","name":"CTooltip","fields":{"code":"import React, {useState, useEffect, useRef, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport tippy from 'tippy.js'\r\nimport 'tippy.js/dist/tippy.css';\r\nimport { renderToString } from 'react-dom/server'\r\n\r\n// TODO: reference to tippy instance as a prop? possibility of components as a content?\r\n\r\n//component - CoreUI / CTooltip\r\nconst generateKey = () => Math.random().toString(36).substr(2)\r\n\r\nconst CTooltip = props=>{\r\n\r\n  let {\r\n    //\r\n    children,\r\n    allowHTML,\r\n    content,\r\n    delay,\r\n    duration,\r\n    hideOnClick,\r\n    interactive,\r\n    offset,\r\n    placement,\r\n    showOnCreate,\r\n    trigger,\r\n    advancedOptions\r\n  } = props;\r\n\r\n  const computedContent = useCallback(\r\n    () => typeof content === 'string' ? content : renderToString(content),\r\n    [content]\r\n  );\r\n\r\n  const config = {\r\n    allowHTML,\r\n    content: computedContent,\r\n    delay,\r\n    duration,\r\n    hideOnClick,\r\n    interactive,\r\n    offset,\r\n    placement,\r\n    showOnCreate,\r\n    trigger,\r\n    ...advancedOptions\r\n  }\r\n\r\n  const key = useState(generateKey())[0]\r\n  const instance = useRef()\r\n\r\n  useEffect(() => {\r\n    if (instance.current) {\r\n      instance.current.setProps(config)\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    const node = document.querySelector(`[data-tooltip=\"${key}\"]`)\r\n    instance.current = tippy(node, config)\r\n    return () => instance.current.destroy()\r\n  }, [key])\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        React.cloneElement(children, {\r\n          'data-tooltip': key\r\n        })\r\n      }\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nCTooltip.propTypes = {\r\n  allowHTML: PropTypes.bool,\r\n  config: PropTypes.object,\r\n  children: PropTypes.node,\r\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n  delay: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\r\n  duration: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\r\n  hideOnClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n  interactive: PropTypes.bool,\r\n  offset: PropTypes.array,\r\n  //TODO posible positions check\r\n  placement: PropTypes.string,\r\n  showOnCreate: PropTypes.bool,\r\n  trigger: PropTypes.string,\r\n  advancedOptions: PropTypes.object\r\n}\r\n\r\nCTooltip.defaultProps = {\r\n  allowHTML: false,\r\n  content: '',\r\n  delay: 0,\r\n  duration: [300, 250],\r\n  hideOnClick: true,\r\n  interactive: false,\r\n  offset: [0, 10],\r\n  placement: 'top',\r\n  showOnCreate: false,\r\n  trigger: 'mouseenter focus',\r\n  advancedOptions: {}\r\n};\r\n\r\nexport default CTooltip;\r\n"}},{"id":"993febf0-99e3-5409-a296-a553fdabb36d","name":"CWidgetBrand","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n//\r\nimport CCard from './CCard';\r\n//import CProgress from './CProgress';\r\nimport CCardBody from './CCardBody';\r\nimport CCardHeader from './CCardHeader';\r\nimport Slot from './Shared/Slot.js';\r\nimport CCol from './CCol';\r\n\r\n//component - CoreUI / CWidget3\r\n\r\nconst CWidgetBrand = props=>{\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n\r\n    color,\r\n    rightHeader,\r\n    rightFooter,\r\n    leftHeader,\r\n    leftFooter,\r\n    addHeaderClasses,\r\n    bodySlot,\r\n    ...attributes\r\n  } = props;\r\n\r\n  // render\r\n\r\n  const classes = mapToCssModules(\r\n    classNames(\r\n      className,\r\n      \"content-center text-white p-0\",\r\n      color ? `bg-${color}` : '',\r\n      addHeaderClasses\r\n    ),\r\n    cssModule\r\n  );\r\n\r\n  return (\r\n    <CCard {...attributes} custom>\r\n      <CCardHeader\r\n        className={classes}\r\n      >\r\n        <Slot content={children} />\r\n      </CCardHeader>\r\n      <Slot content={bodySlot}>\r\n        <CCardBody className=\"row text-center\">\r\n          <CCol>\r\n            {\r\n              rightHeader?\r\n                <div className=\"text-value-lg\">\r\n                  {rightHeader}\r\n                </div>:''\r\n            }\r\n            {\r\n              rightFooter?\r\n                <div className=\"text-uppercase text-muted small\">\r\n                  {rightFooter}\r\n                </div>:''\r\n            }\r\n          </CCol>\r\n          <div className=\"c-vr\"></div>\r\n          <CCol>\r\n            {\r\n              leftHeader?\r\n                <div className=\"text-value-lg\">\r\n                  {rightHeader}\r\n                </div>:''\r\n            }\r\n            {\r\n              leftFooter?\r\n                <div className=\"text-uppercase text-muted small\">\r\n                  {rightFooter}\r\n                </div>:''\r\n            }\r\n          </CCol>\r\n        </CCardBody>\r\n      </Slot>\r\n    </CCard>\r\n  )\r\n\r\n}\r\n\r\nCWidgetBrand.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  //dataBox: PropTypes.func,\r\n  //old\r\n  color: PropTypes.string,\r\n  rightHeader: PropTypes.string,\r\n  rightFooter: PropTypes.string,\r\n  leftHeader: PropTypes.string,\r\n  leftFooter: PropTypes.string,\r\n  addHeaderClasses: PropTypes.oneOfType([String, Array, Object]),\r\n  bodySlot: PropTypes.node\r\n};\r\n\r\nCWidgetBrand.defaultProps = {\r\n  //dataBox: () => ({ variant: 'facebook', friends: '-', feeds: '-' }),\r\n};\r\n\r\nexport default CWidgetBrand;\r\n"}},{"id":"b228b7be-f265-566b-9aed-8924bb875caf","name":"CWidgetDropdown","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//\r\nimport CCard from './CCard';\r\nimport CCardBody from './CCardBody';\r\nimport Slot from './Shared/Slot.js';\r\n\r\n//component - CoreUI / CWidgetDropdown\r\n\r\nconst CWidgetDropdown = props=>{\r\n\r\n  const {\r\n    children,\r\n    //\r\n    header,\r\n    text,\r\n    color,\r\n    dropdownSlot,\r\n\r\n    mainText,\r\n    ...attributes\r\n  } = props;\r\n\r\n  return (\r\n    <CCard {...attributes} custom className=\"text-white\" color={color}>\r\n      <CCardBody className=\"pb-0 d-flex justify-content-between\">\r\n        <div>\r\n          {header?<div className=\"text-value-lg\">{header}</div>:''}\r\n          {mainText?<div>{text}</div>:''}\r\n        </div>\r\n        <Slot content={dropdownSlot} />\r\n      </CCardBody>\r\n      {children}\r\n    </CCard>\r\n  )\r\n\r\n}\r\n\r\nCWidgetDropdown.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  text: PropTypes.string,\r\n  color: PropTypes.string,\r\n  toggle: PropTypes.func,\r\n  dropdownSlot: PropTypes.node,\r\n  //old\r\n  mainText: PropTypes.string,\r\n  //smallText: PropTypes.string,\r\n  value: PropTypes.string,\r\n  variant: PropTypes.string,\r\n};\r\n\r\nCWidgetDropdown.defaultProps = {\r\n  header: '89.9%',\r\n  text: 'text',\r\n  mainText: 'Widget title',\r\n  //smallText: 'Widget helper text',\r\n  // color: '',\r\n  value: '25',\r\n  variant: '',\r\n};\r\n\r\nexport default CWidgetDropdown;\r\n"}},{"id":"e0873c55-82a8-552c-86e2-174113954367","name":"CWidgetIcon","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n//\r\nimport CCard from './CCard';\r\nimport CCardBody from './CCardBody';\r\nimport CCardFooter from './CCardFooter';\r\nimport { CIcon } from '@coreui/icons-react';\r\n\r\n//component - CoreUI / CWidgetIcon\r\n\r\nconst CWidgetIcon = props=>{\r\n\r\n  const {\r\n    className,\r\n    cssModule,\r\n    //\r\n    header,\r\n    mainText,\r\n    icon,\r\n    color,\r\n    footer,\r\n    link,\r\n    variant,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const padding = (variant === '0' ? { card: 'p-3', icon: 'p-3' } : (variant === '1' ? {\r\n    card: 'p-0', icon: 'p-4', lead: 'pt-3',\r\n  } : { card: 'p-0', icon: 'p-4 px-5', lead: 'pt-3' }));\r\n\r\n  const card = { style: 'd-flex', color: color, icon: icon, classes: '' };\r\n  card.classes = mapToCssModules(classNames(className, card.style, padding.card, 'align-items-center'), cssModule);\r\n\r\n  const lead = { style: 'text-value', color: color, classes: '' };\r\n  lead.classes = classNames(lead.style, 'text-' + card.color);\r\n\r\n  const blockIcon = function (icon) {\r\n    const classes = classNames('bg-' + card.color, 'text-white', padding.icon, 'mr-3 float-left');\r\n    return <div className={classes}><CIcon name={icon} /></div>\r\n  };\r\n\r\n  const cardFooter = function () {\r\n    if (footer) {\r\n      return (\r\n        <CCardFooter className=\"px-3 py-2\">\r\n          <a className=\"align-items-center btn-block d-flex justify-content-between text-muted\" href={link}>\r\n            <span className=\"small font-weight-bold\">\r\n              View More\r\n            </span>\r\n            <CIcon className=\"float-right\" name=\"cil-chevron-right\" size=\"lg\" />\r\n          </a>\r\n        </CCardFooter>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CCard {...attributes} custom>\r\n      <CCardBody className={card.classes} {...attributes}>\r\n        <div>\r\n          {blockIcon(card.icon)}\r\n        </div>\r\n        <div>\r\n          <div className={lead.classes}>{header}</div>\r\n          <div className=\"text-muted text-uppercase font-weight-bold small\">{mainText}</div>\r\n        </div>\r\n      </CCardBody>\r\n      {cardFooter()}\r\n    </CCard>\r\n  );\r\n\r\n}\r\n\r\nCWidgetIcon.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  mainText: PropTypes.string,\r\n  icon: PropTypes.string,\r\n  color: PropTypes.string,\r\n  variant: PropTypes.string,\r\n  footer: PropTypes.bool,\r\n  link: PropTypes.string,\r\n};\r\n\r\nCWidgetIcon.defaultProps = {\r\n  header: '$1,999.50',\r\n  mainText: 'Widget title',\r\n  icon: 'cil-settings',\r\n  color: 'primary',\r\n  variant: '0',\r\n  link: '#',\r\n};\r\n\r\nexport default CWidgetIcon;\r\n"}},{"id":"3563d873-2c90-5300-841a-b2cefdb32e95","name":"CWidgetProgress","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n//\r\nimport CCard from './CCard';\r\nimport CProgress from './CProgress';\r\n//import CCardBody from './CCardBody';\r\n//import CCardHeader from './CCardHeader';\r\n//import CCardFooter from './CCardFooter';\r\n\r\n//component - CoreUI / CWidgetProgress\r\n\r\nconst CWidgetProgress = props=>{\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    header,\r\n    mainText,\r\n    smallText,\r\n    color,\r\n    value,\r\n    variant,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const progress = { style: '', color: color, value: value };\r\n  const card = { style: '', bgColor: '' };\r\n\r\n  if (variant === 'inverse') {\r\n    progress.style = 'progress-white';\r\n    progress.color = '';\r\n    card.style = 'text-white';\r\n    card.bgColor = 'bg-' + color;\r\n  }\r\n\r\n  const classes = mapToCssModules(classNames(className, card.style, card.bgColor), cssModule);\r\n  progress.style = classNames('progress-xs my-3', progress.style);\r\n\r\n  return (\r\n    <CCard {...attributes} className={classes}>\r\n      <div className=\"h4 m-0\">{header}</div>\r\n      <div>{mainText}</div>\r\n      <CProgress className={progress.style} color={progress.color} value={progress.value} />\r\n      <small className=\"text-muted\">{smallText}</small>\r\n      <div>{children}</div>\r\n    </CCard>\r\n  );\r\n\r\n}\r\n\r\nCWidgetProgress.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  mainText: PropTypes.string,\r\n  smallText: PropTypes.string,\r\n  color: PropTypes.string,\r\n  value: PropTypes.string,\r\n  variant: PropTypes.string,\r\n};\r\n\r\nCWidgetProgress.defaultProps = {\r\n  header: '89.9%',\r\n  mainText: 'Widget title',\r\n  smallText: 'Widget helper text',\r\n  // color: '',\r\n  value: '25',\r\n  variant: ''\r\n};\r\n\r\nexport default CWidgetProgress;\r\n"}},{"id":"7be3575e-8666-545d-9318-e8ed1e71db62","name":"CWidgetProgressIcon","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n//\r\nimport CCard from './CCard';\r\nimport CProgress from './CProgress';\r\nimport { CIcon } from '@coreui/icons-react';\r\n\r\n//component - CoreUI / CWidget4\r\n\r\nconst CWidgetProgressIcon = props=>{\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    header,\r\n    value,\r\n    icon,\r\n    color,\r\n    invert,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const progress = { style: '', color: color, value: value };\r\n  const card = { style: '', bgColor: '', icon: icon };\r\n\r\n  if (invert) {\r\n    progress.style = 'progress-white';\r\n    progress.color = '';\r\n    card.style = 'text-white';\r\n    card.bgColor = 'bg-' + color;\r\n  }\r\n\r\n  const classes = mapToCssModules(classNames(className, card.style, card.bgColor), cssModule);\r\n  progress.style = classNames('progress-xs mt-3 mb-0', progress.style);\r\n\r\n  return (\r\n    <CCard {...attributes} className={classes}>\r\n      <div className=\"text-muted text-right mb-4\">\r\n        <CIcon name={card.icon} size=\"xl\" />\r\n      </div>\r\n      <div className=\"text-value-lg\">{header}</div>\r\n      <small className=\"text-muted text-uppercase font-weight-bold\">{children}</small>\r\n      <CProgress className={progress.style} color={progress.color} value={progress.value} />\r\n    </CCard>\r\n  );\r\n\r\n}\r\n\r\nCWidgetProgressIcon.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  icon: PropTypes.string,\r\n  color: PropTypes.string,\r\n  value: PropTypes.string,\r\n  invert: PropTypes.bool,\r\n};\r\n\r\nCWidgetProgressIcon.defaultProps = {\r\n  header: '87.500',\r\n  icon: 'cil-people',\r\n  color: 'info',\r\n  value: '25',\r\n  children: 'Visitors',\r\n  invert: false,\r\n};\r\n\r\nexport default CWidgetProgressIcon;\r\n"}},{"id":"f62e056c-e740-55d0-9acd-7938d4cf1b27","name":"CWidgetSimple","fields":{"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport {mapToCssModules} from './Shared/helper.js';\r\n//\r\nimport CCard from './CCard';\r\n//import CProgress from './CProgress';\r\nimport CCardBody from './CCardBody';\r\n//import CCardHeader from './CCardHeader';\r\n//import CCardFooter from './CCardFooter';\r\n\r\n//component - CoreUI / CWidgetSimple\r\n\r\nconst CWidgetSimple = props=>{\r\n\r\n  const {\r\n    children,\r\n    className,\r\n    cssModule,\r\n    //\r\n    header,\r\n    mainText,\r\n    color,\r\n    variant,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const card = { style: '', bgColor: '' };\r\n\r\n  if (variant === 'inverse') {\r\n    card.style = 'text-white';\r\n    card.bgColor = 'bg-' + color;\r\n  }\r\n\r\n  const classes = mapToCssModules(classNames(className, card.style, card.bgColor), cssModule);\r\n\r\n  return (\r\n    <CCard {...attributes} custom className={classes}>\r\n      <CCardBody className=\"text-center\">\r\n        {/*\r\n        <CButtonGroup className=\"float-right\">\r\n          <CButtonDropdown id='card1' isOpen={this.state.card1} toggle={() => { this.setState({ card1: !this.state.card1 }); }}>\r\n            <CDropdownToggle caret className=\"p-0\" color=\"transparent\">\r\n              <i className=\"icon-settings\"></i>\r\n            </CDropdownToggle>\r\n            <CDropdownMenu right>\r\n              <CDropdownItem>Action</CDropdownItem>\r\n              <CDropdownItem>Another action</CDropdownItem>\r\n              <CDropdownItem>Something else here</CDropdownItem>\r\n            </CDropdownMenu>\r\n          </CButtonDropdown>\r\n        </CButtonGroup>\r\n        */}\r\n        <div className=\"text-muted small text-uppercase font-weight-bold\">{header}</div>\r\n        <div className=\"text-value-xl py-3\">{mainText}</div>\r\n        {children}\r\n      </CCardBody>\r\n    </CCard>\r\n  );\r\n\r\n}\r\n\r\nCWidgetSimple.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  //\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n  header: PropTypes.string,\r\n  mainText: PropTypes.string,\r\n  color: PropTypes.string,\r\n  variant: PropTypes.string,\r\n};\r\n\r\nCWidgetSimple.defaultProps = {\r\n  header: 'title',\r\n  mainText: 'text',\r\n  color: '',\r\n  variant: '',\r\n};\r\n\r\nexport default CWidgetSimple;\r\n"}},{"id":"01003dd5-fd5c-5388-8c55-032df7dfa949","name":"index","fields":{"code":"// CoreUI 3 index\r\n\r\nexport {default as CAlert} from './CAlert';\r\nexport {default as CBadge} from './CBadge';\r\nexport {default as CButton} from './CButton';\r\nexport {default as CButtonClose} from './CButtonClose';\r\nexport {default as CButtonGroup} from './CButtonGroup';\r\nexport {default as CButtonToolbar} from './CButtonToolbar';\r\nexport {default as CCard} from './CCard';\r\nexport {default as CCardColumns} from './CCardColumn';\r\nexport {default as CCardDeck} from './CCardDeck';\r\nexport {default as CCardBody} from './CCardBody';\r\nexport {default as CCardHeader} from './CCardHeader';\r\nexport {default as CCardFooter} from './CCardFooter';\r\nexport {default as CCardGroup} from './CCardGroup';\r\nexport {default as CCardImg} from './CCardImg';\r\nexport {default as CCardImgOverlay} from './CCardImgOverlay';\r\nexport {default as CCardLink} from './CCardLink';\r\nexport {default as CCardTitle} from './CCardTitle';\r\nexport {default as CCardSubtitle} from './CCardSubtitle';\r\nexport {default as CCardText} from './CCardText';\r\nexport {default as CRow} from './CRow';\r\nexport {default as CCol} from './CCol';\r\nexport {default as CContainer} from './CContainer';\r\nexport {default as CJumbotron} from './CJumbotron';\r\nexport {default as CLabel} from './CLabel';\r\nexport {default as CMedia} from './CMedia';\r\nexport {default as CMediaBody} from './CMediaBody';\r\nexport {default as CMediaAside} from './CMediaAside';\r\nexport {default as CPagination} from './CPagination';\r\nexport {default as CPaginationItem} from './CPaginationItem';\r\nexport {default as CPaginationLink} from './CPaginationLink';\r\nexport {default as CSpinner} from './CSpinner';\r\nexport {default as CTabPane} from './CTabPane';\r\nexport {default as CTabContent} from './CTabContent';\r\nexport {default as CPopover} from './CPopover';\r\nexport {default as CPopoverBody} from './CPopoverBody';\r\nexport {default as CPopoverHeader} from './CPopoverHeader';\r\n//export {default as CPopperContent} from './CPopperContent';\r\n//export {default as CPopperTargetHelper} from './CPopperTargetHelper';\r\nexport {default as CProgress} from './CProgress';\r\nexport {default as CPortal} from './CPortal';\r\nexport {default as CDropdown} from './CDropdown';\r\nexport {default as CDropdownItem} from './CDropdownItem';\r\nexport {default as CDropdownMenu} from './CDropdownMenu';\r\nexport {default as CDropdownToggle} from './CDropdownToggle';\r\nexport {default as CForm} from './CForm';\r\nexport {default as CFormFeedback} from './CFormFeedback';\r\nexport {default as CFormGroup} from './CFormGroup';\r\nexport {default as CFormText} from './CFormText';\r\nexport {default as CInput} from './CInput';\r\nexport {default as CInputGroup} from './CInputGroup';\r\nexport {default as CInputGroupAddon} from './CInputGroupAddon';\r\nexport {default as CInputGroupText} from './CInputGroupText';\r\nexport {default as CListGroup} from './CListGroup';\r\nexport {default as CListGroupItem} from './CListGroupItem';\r\nexport {default as CListGroupItemHeading} from './CListGroupHeading';\r\nexport {default as CListGroupItemText} from './CListGroupText';\r\nexport {default as CModal} from './CModal';\r\nexport {default as CModalBody} from './CModalBody';\r\nexport {default as CModalHeader} from './CModalHeader';\r\nexport {default as CModalFooter} from './CModalFooter';\r\nexport {default as CDataTable} from './CDataTable';\r\nexport {default as CFade} from './CFade';\r\nexport {default as CCustomInput} from './CCustomInput';\r\nexport {default as CNav} from './CNav';\r\nexport {default as CNavItem} from './CNavItem';\r\nexport {default as CNavLink} from './CNavLink';\r\nexport {default as CNavbar} from './CNavbar';\r\nexport {default as CCarousel} from './CCarousel';\r\nexport {default as CCarouselItem} from './CCarouselItem';\r\nexport {default as CCarouselControl} from './CCarouselControl';\r\nexport {default as CCarouselIndicators} from './CCarouselIndicators';\r\nexport {default as CCarouselCaption} from './CCarouselCaption';\r\nexport {default as CCollapse} from './CCollapse';\r\nexport {default as CTooltip} from './CTooltip';\r\n//export {default as CTooltipPopoverWrapper} from './CTooltipPopoverWrapper';\r\nexport {default as CBreadcrumb} from './CBreadcrumb';\r\nexport {default as CBreadcrumbItem} from './CBreadcrumbItem';\r\nexport {default as CFooter} from './CFooter';\r\nexport {default as CHeader} from './CHeader';\r\nexport {default as CHeaderNav} from './CHeaderNav';\r\nexport {default as CHeaderNavItem} from './CHeaderNavItem';\r\nexport {default as CHeaderNavLink} from './CHeaderNavLink';\r\nexport {default as CHeaderBrand} from './CHeaderBrand';\r\nexport {default as CHeaderSubheader} from './CHeaderSubheader';\r\nexport {default as CNavbarBrand} from './CNavbarBrand';\r\nexport {default as CNavbarNav} from './CNavbarNav';\r\nexport {default as CNavbarText} from './CNavbarText';\r\nexport {default as CSidebar} from './CSidebar';\r\nexport {default as CSidebarBrand} from './CSidebarBrand';\r\nexport {default as CSidebarNavDivider} from './CSidebarNavDivider';\r\nexport {default as CSidebarNavTitle} from './CSidebarNavTitle';\r\nexport {default as CSidebarNavItem} from './CSidebarNavItem';\r\nexport {default as CSidebarNavLink} from './CSidebarNavLink';\r\nexport {default as CSidebarNavDropdown} from './CSidebarNavDropdown';\r\nexport {default as CSidebarFooter} from './CSidebarFooter';\r\nexport {default as CSidebarForm} from './CSidebarForm';\r\nexport {default as CSidebarHeader} from './CSidebarHeader';\r\nexport {default as CSidebarMinimizer} from './CSidebarMinimizer';\r\nexport {default as CSidebarNav} from './CSidebarNav';\r\nexport {default as CSidebarClose} from './CSidebarClose';\r\nexport {default as CSwitch} from './CSwitch';\r\nexport {default as CTable} from './CTable';\r\nexport {default as CToast} from './CToast';\r\nexport {default as CToastHeader} from './CToastHeader';\r\nexport {default as CToastBody} from './CToastBody';\r\nexport {default as CToaster} from './CToaster';\r\nexport {default as CCallout} from './CCallout';\r\nexport {default as CEmbed} from './CEmbed';\r\nexport {default as CEmbedObject} from './CEmbedObject';\r\nexport {default as CLink} from './CLink';\r\nexport {default as CToggler} from './CToggler';\r\nexport {default as CImg} from './CImg';\r\nexport {default as CWidgetProgress} from './CWidgetProgress';\r\nexport {default as CWidgetIcon} from './CWidgetIcon';\r\nexport {default as CWidgetBrand} from './CWidgetBrand';\r\nexport {default as CWidgetProgressIcon} from './CWidgetProgressIcon';\r\nexport {default as CWidgetDropdown} from './CWidgetDropdown';\r\nexport {default as CWidgetSimple} from './CWidgetSimple';\r\n\r\nimport { mapToCssModules, tagPropType, colog } from './Shared/helper'\r\nexport { mapToCssModules }\r\nexport { tagPropType }\r\nexport { colog }\r\n"}}]},"allExamples":{"nodes":[{"id":"b14cd7f9-6984-560b-aade-c1f85549f0a4","name":"CAlert","fields":{"code":"import React from 'react';\r\nimport {CAlert} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CAlert className='mt-4 mb-4'>CAlert</CAlert>\r\n      <CAlert custom variant='primary' className='mt-4 mb-4'>CAlert</CAlert>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n\r\n}\r\n"}},{"id":"98952a75-9734-59c4-a6d1-5bae4879c169","name":"CBadge","fields":{"code":"import React from 'react';\r\nimport {CBadge} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CBadge color=\"primary\"> Primary color badge</CBadge>\r\n      <CBadge color=\"success\"> success color badge</CBadge>\r\n      <CBadge color=\"warning\"> warning color badge</CBadge>\r\n      <CBadge color=\"danger\"> danger color badge</CBadge>\r\n      <CBadge color=\"secondary\"> secondary color badge</CBadge>\r\n      <CBadge>Raw badge</CBadge>\r\n      <CBadge color=\"primary\" shape=\"pill\">Pill badge</CBadge>\r\n      <CBadge color=\"info\" href=\"https://coreui.io/\">\r\n        Link Badge\r\n      </CBadge>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"47a8e04b-244a-567e-a6ba-b1c9e6cda69f","name":"CButton","fields":{"code":"import React from 'react';\r\nimport {CButton, CRow} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n\r\n      Sizes:\r\n\r\n      {['sm', '', 'lg'].map((size, rowKey)=>{\r\n        return (\r\n          <CRow key={rowKey + 'sizes'} className=\"d-flex justify-content-between\">\r\n            {\r\n              ['success', 'primary', 'info', 'warning', 'danger'].map((color, key)=>{\r\n                return (\r\n                  <CButton\r\n                  key={color + size}\r\n                  color={color}\r\n                  size={size}\r\n                  className=\"m-2\"\r\n                >\r\n                  {color}\r\n                </CButton>\r\n              )})\r\n            }\r\n          </CRow>\r\n        )})}\r\n\r\n        Styles:\r\n\r\n        {[{ shape: 'square' }, { shape: 'pill' }, { variant: 'ghost' }, { variant: 'outline' }].map((style, rowKey)=>{\r\n          return (\r\n            <CRow key={rowKey + 'sizes'} className=\"d-flex justify-content-between\">\r\n              {\r\n                ['success', 'primary', 'info', 'warning', 'danger'].map((color, key)=>{\r\n                  return (\r\n                    <CButton\r\n                    key={key}\r\n                    color={color}\r\n                    {...style}\r\n                    className=\"m-2\"\r\n                  >\r\n                    {color}\r\n                  </CButton>\r\n                )})\r\n              }\r\n            </CRow>\r\n          )})}\r\n\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"83caaf44-e608-5c98-91c4-0fcc966f8e7a","name":"CCallout","fields":{"code":"import React from 'react';\r\nimport {CCallout, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CRow>\r\n         <CCol col=\"12\" sm=\"6\">\r\n           <CCallout color=\"info\">\r\n             <small className=\"text-muted\">New Clients</small><br />\r\n             <strong className=\"h4\">9,123</strong>\r\n           </CCallout>\r\n         </CCol>\r\n         <CCol col=\"12\" sm=\"6\">\r\n           <CCallout color=\"danger\">\r\n             <small className=\"text-muted\">Recurring Clients</small><br />\r\n             <strong className=\"h4\">22,643</strong>\r\n           </CCallout>\r\n         </CCol>\r\n       </CRow>\r\n     </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"5b42ca89-6843-581e-b736-16c88ddf0aa9","name":"CCard","fields":{"code":"import React from 'react';\r\nimport {CCard, CCardHeader, CCardBody, CCardFooter, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol sm=\"6\">\r\n          <CCard custom>\r\n            <CCardHeader>\r\n              Standard usage\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              This content is in card body component.\r\n            </CCardBody>\r\n            <CCardFooter>\r\n              Standard Footer.\r\n            </CCardFooter>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol sm=\"6\">\r\n          <CCard>\r\n            Content is rendered inside CCardBody component.\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"1eeaaf16-3b00-5bed-b170-52220098e4b4","name":"CCharts","fields":{"code":"import React from 'react';\r\nimport {CDropdown, CDropdownItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CDropdown\r\n      color=\"primary\"\r\n      toggler-text=\"Dropdown Button\"\r\n      className=\"m-2\"\r\n      >\r\n        <CDropdownItem>First Action</CDropdownItem>\r\n        <CDropdownItem>Second Action</CDropdownItem>\r\n        <CDropdownItem>Third Action</CDropdownItem>\r\n        <CDropdownItem divider></CDropdownItem>\r\n        <CDropdownItem>Something else here...</CDropdownItem>\r\n        <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n      </CDropdown>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"cca93e51-ede5-5410-84c8-f702b347f9b1","name":"CCollapse","fields":{"code":"import React from 'react';\r\nimport {CCard, CButton, CCollapse, CCardHeader, CCardBody, CCardFooter, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CButton id=\"myExampleCollpase\" className=\"m-2\">\r\n          Show\r\n      </CButton>\r\n      <CCollapse toggler=\"myExampleCollpase\">\r\n        <CCard>\r\n          Collapse contents Here<br />\r\n          <CButton id=\"myExampleCollpase2\" className=\"m-2\">\r\n              Show inner\r\n          </CButton>\r\n          <CCollapse toggler=\"myExampleCollpase2\">\r\n            <CCard>\r\n              Hello!\r\n            </CCard>\r\n          </CCollapse>\r\n        </CCard>\r\n      </CCollapse>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"3f08d818-2877-5a2e-970b-d91682286a57","name":"CContainer","fields":{"code":"import React from 'react';\r\nimport {CContainer, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CContainer>\r\n        <CRow>\r\n          <CCol lg=\"5\" className=\"bg-success py-3\">\r\n            col-lg-5\r\n          </CCol>\r\n          <CCol md=\"4\" className=\"bg-warning py-3\">\r\n            col-md-4\r\n          </CCol>\r\n          <CCol sm=\"3\" className=\"bg-danger py-3\">\r\n            col-sm-3\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"2f69ecd8-1613-542d-9316-2664e540248f","name":"CDropdown","fields":{"code":"import React from 'react';\r\nimport {CDropdown, CDropdownItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CDropdown\r\n      color=\"primary\"\r\n      toggler-text=\"Dropdown Button\"\r\n      className=\"m-2\"\r\n      >\r\n        <CDropdownItem>First Action</CDropdownItem>\r\n        <CDropdownItem>Second Action</CDropdownItem>\r\n        <CDropdownItem>Third Action</CDropdownItem>\r\n        <CDropdownItem divider></CDropdownItem>\r\n        <CDropdownItem>Something else here...</CDropdownItem>\r\n        <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n      </CDropdown>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"1e2b1884-b43f-5644-b4e3-f6284be52d28","name":"CEmbed","fields":{"code":"import React from 'react';\r\nimport {CEmbed} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CEmbed\r\n        tag=\"p\"\r\n        aspect=\"16by9\"\r\n        src=\"https://www.youtube.com/embed/ctV1-yIzZzU\"\r\n        frameborder=\"0\"\r\n        allow=\"accelerometer;autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n      />\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"2219ea91-2c27-5603-b2bc-f13d6b7b8e0f","name":"CForm","fields":{"code":"import React from 'react';\r\nimport {CRow, CCol, CInput} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CInput\r\n            label=\"Name\"\r\n            placeholder=\"Enter your name\"\r\n          />\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol sm=\"12\">\r\n          <CInput\r\n            label=\"Credit Card Number\"\r\n            placeholder=\"0000 0000 0000 0000\"\r\n          />\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol sm=\"4\">\r\n          <CInput\r\n            select\r\n            label=\"Month\"\r\n            options=\"[1,2,3,4,5,6,7,8,9,10,11,12]\"\r\n          />\r\n        </CCol>\r\n        <CCol sm=\"4\">\r\n          <CInput\r\n            select\r\n            label=\"Year\"\r\n            options=\"[2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025]\"\r\n          />\r\n        </CCol>\r\n        <CCol sm=\"4\">\r\n          <CInput\r\n            label=\"CVV/CVC\"\r\n            placeholder=\"123\"\r\n          />\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"c7d6e130-bffe-5101-83ec-5ca5ebff70e1","name":"CImg","fields":{"code":"import React from 'react';\r\nimport {CImg} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CImg\r\n        src=\"https://picsum.photos/1024/480/?image=54\"\r\n        fluid\r\n        className=\"mb-2\"\r\n      />\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"52aa34a4-2796-5145-9c8b-14837c82717f","name":"CJumbotron","fields":{"code":"import React from 'react';\r\nimport {CJumbotron, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CJumbotron>\r\n        <h1 className=\"display-3\">Bootstrap 4</h1>\r\n        <p className=\"lead\">Bootstrap 4 Components for React</p>\r\n        <p>For more information visit website</p>\r\n        <CButton color=\"primary\" href=\"https://coreui.io/\" target=\"_blank\">More Info</CButton>\r\n      </CJumbotron>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"3e0c3b6e-1e31-5028-8671-257599690585","name":"CLink","fields":{"code":"import React from 'react';\r\nimport {CLink, CRow, CCol} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CRow>\r\n        <CCol lg>\r\n          <CLink\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Normal external link.\r\n          </CLink>\r\n        </CCol>\r\n        <CCol lg>\r\n        </CCol>\r\n        <CCol lg>\r\n          <CLink disabled>\r\n            Disabled link without action\r\n          </CLink>\r\n        </CCol>\r\n        <CCol lg>\r\n          <CLink\r\n            className=\"text-white bg-info px-2\"\r\n            href=\"https://coreui.io\"\r\n            target=\"_blank\"\r\n          >\r\n            Custom link.\r\n          </CLink>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"fa7f93dd-56c0-56a7-8166-0bc82cbf9801","name":"CListGroup","fields":{"code":"import React from 'react';\r\nimport {CListGroup, CListGroupItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CListGroup>\r\n        <CListGroupItem href=\"#\">\r\n          This is a default list group item\r\n        </CListGroupItem>\r\n        <CListGroupItem href=\"#\" color=\"primary\">\r\n          This is a primary list group item\r\n        </CListGroupItem>\r\n        <CListGroupItem href=\"#\" color=\"secondary\">\r\n          This is a secondary list group item\r\n        </CListGroupItem>\r\n        <CListGroupItem href=\"#\" color=\"success\">\r\n          This is a success list group item\r\n        </CListGroupItem>\r\n        <CListGroupItem href=\"#\" color=\"danger\">\r\n          This is a danger list group item\r\n        </CListGroupItem>\r\n        <CListGroupItem href=\"#\" color=\"warning\">\r\n          This is a warning list group item\r\n        </CListGroupItem>\r\n        <CListGroupItem href=\"#\" color=\"info\">\r\n          This is a info list group item\r\n        </CListGroupItem>\r\n        <CListGroupItem href=\"#\" color=\"light\">\r\n          This is a light list group item\r\n        </CListGroupItem>\r\n        <CListGroupItem href=\"#\" color=\"dark\">\r\n          This is a dark list group item\r\n        </CListGroupItem>\r\n      </CListGroup>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"7ca5fe91-f5ca-5f37-97c7-0c2038dcc0fe","name":"CMedia","fields":{"code":"import React from 'react';\r\nimport {CMedia} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CMedia>\r\n        <h5 className=\"mt-0\">Media Title</h5>\r\n        <p>\r\n          Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin.\r\n          Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc\r\n          ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n        </p>\r\n      </CMedia>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"cd7f92cc-9004-5067-a09d-0f4794574f7e","name":"CNav","fields":{"code":"import React from 'react';\r\nimport {CNav, CNavItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CNav variant=\"pills\">\r\n        <CNavItem active>Active</CNavItem>\r\n        <CNavItem>Link</CNavItem>\r\n        <CNavItem>Another Link</CNavItem>\r\n        <CNavItem disabled>Disabled</CNavItem>\r\n      </CNav>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"d49d55c9-6271-50f3-88a4-7529d0c64e60","name":"CPagination","fields":{"code":"import React from 'react';\r\nimport {CPagination} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CPagination firstButtonHtml='Start' previousButtonHtml='Previous' />\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"d424b862-cd8a-589f-9af0-c1d5ad83530d","name":"CPopover","fields":{"code":"import React from 'react';\r\nimport {CPopover, CPopoverHeader, CPopoverBody, CButton} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CButton className=\"mr-1\" color=\"secondary\" id={'Popover'}>\r\n        Button\r\n      </CButton>\r\n      <CPopover target='Popover' trigger=\"legacy\">\r\n        <CPopoverHeader>Popover Title</CPopoverHeader>\r\n        <CPopoverBody>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</CPopoverBody>\r\n      </CPopover>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"88a6b328-3e49-53d5-ad28-552dd6eae32b","name":"CProgress","fields":{"code":"import React from 'react';\r\nimport {CProgress} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: script*/\r\n  let counter = 86;\r\n  /*example end: script*/\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CProgress\r\n        value={counter}\r\n        animated\r\n        showValue\r\n        height=\"30px\"\r\n      />\r\n      <CProgress custom className=\"mt-1\">\r\n        <CProgress\r\n          bar\r\n          showValue\r\n          value={counter*(6/10)}\r\n          color=\"success\"\r\n          height=\"30px\"\r\n        />\r\n        <CProgress\r\n          bar\r\n          showValue\r\n          value={counter*(2.5/10)}\r\n          color=\"warning\"\r\n        />\r\n        <CProgress\r\n          bar\r\n          showValue\r\n          value={counter*(1.5/10)}\r\n          color=\"danger\"\r\n        />\r\n      </CProgress>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"b6fb551e-b3d5-58cc-9d69-f433fbe0bf78","name":"CSpinner","fields":{"code":"import React from 'react';\r\nimport {CSpinner} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div class=\"d-flex justify-content-between align-items-center\">\r\n      <CSpinner color=\"success\" size=\"sm\" />\r\n      <CSpinner color=\"info\" />\r\n      <CSpinner\r\n        color=\"primary\"\r\n        style={{width:'4rem', height:'4rem'}}\r\n      />\r\n      <CSpinner size=\"sm\" variant=\"grow\" />\r\n      <CSpinner color=\"warning\" variant=\"grow\" />\r\n      <CSpinner\r\n        style={{width:'4rem', height:'4rem'}}\r\n        color=\"danger\"\r\n        variant=\"grow\"\r\n      />\r\n  </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"2a85b8f7-c12a-5992-86a1-cb1d073ba463","name":"CSwitch","fields":{"code":"import React from 'react';\r\nimport {CLink, CSwitch} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n\r\n  /*example start: script*/\r\n  const modes = [\r\n        {},\r\n        { size: 'sm'},\r\n        { size: 'lg'},\r\n        { variant: '3d' },\r\n        { shape: 'pill' },\r\n        { variant: 'opposite' },\r\n        { variant: 'outline', shape:'pill' }\r\n      ];\r\n  const colors = ['primary', 'success', 'warning', 'danger', 'info', 'dark', 'light', 'secondary'];\r\n  /*example end: script*/\r\n\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      {modes.map((mode, index)=>{\r\n        return (\r\n          <div className=\"d-flex justify-content-between my-4\" key={index}>\r\n            Passed props: {JSON.stringify(mode)}\r\n            {\r\n              colors.map((color, key)=>{\r\n                return (\r\n                  <CSwitch\r\n                    key={key}\r\n                    color={color}\r\n                    checked\r\n                    value={color}\r\n                    {...mode}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n\r\n  /*\r\n  <template v-for=\"(mode, index) in modes\">\r\n    Passed props: {{mode}}\r\n    <div class=\"d-flex justify-content-between my-4\" :key=\"index\">\r\n      <CSwitch\r\n        :key=\"key\"\r\n        :color=\"color\"\r\n        v-bind=\"mode\"\r\n        checked\r\n        :value=\"color\"\r\n        v-for=\"(color, key) in colors\"\r\n      />\r\n    </div>\r\n  </template>\r\n  */\r\n\r\n}\r\n"}},{"id":"1d02cee2-e308-5b77-b787-31fe118fcae4","name":"CTableCustom","fields":{"code":"import React from 'react';\r\nimport {CTableCustom} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CTableCustom>\r\n        CTable\r\n      </CTableCustom>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"ebf08063-2597-560b-9e08-ccffaa2bf79d","name":"CTabs","fields":{"code":"import React from 'react';\r\nimport {CNav, CNavItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CNav variant=\"pills\">\r\n        <CNavItem active>Active</CNavItem>\r\n        <CNavItem>Link</CNavItem>\r\n        <CNavItem>Another Link</CNavItem>\r\n        <CNavItem disabled>Disabled</CNavItem>\r\n      </CNav>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"ff81117f-19fb-553e-a54d-a9b8beb8f639","name":"CToast","fields":{"code":"import React from 'react';\r\nimport {CNav, CNavItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CNav variant=\"pills\">\r\n        <CNavItem active>Active</CNavItem>\r\n        <CNavItem>Link</CNavItem>\r\n        <CNavItem>Another Link</CNavItem>\r\n        <CNavItem disabled>Disabled</CNavItem>\r\n      </CNav>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"3bbd89a5-f8c8-5942-8b1b-5c6ff5c0a432","name":"CTooltip","fields":{"code":"import React from 'react';\r\nimport {CTooltip} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <p>Somewhere in here is a <a href=\"#\" id=\"UncontrolledTooltipExample\">tooltip</a>.</p>\r\n      <CTooltip placement=\"top\" target=\"UncontrolledTooltipExample\">\r\n        Hello world!\r\n      </CTooltip>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"35b19e1c-1110-5335-ab20-ece27b920601","name":"CWidgets","fields":{"code":"import React from 'react';\r\nimport {CNav, CNavItem} from '@coreui/react';\r\n\r\nexport default ()=>{\r\n  /*example start: template*/\r\n  return (\r\n    <div>\r\n      <CNav variant=\"pills\">\r\n        <CNavItem active>Active</CNavItem>\r\n        <CNavItem>Link</CNavItem>\r\n        <CNavItem>Another Link</CNavItem>\r\n        <CNavItem disabled>Disabled</CNavItem>\r\n      </CNav>\r\n    </div>\r\n  )\r\n  /*example end: template*/\r\n}\r\n"}},{"id":"bf3f01b2-5228-5c8a-aeb7-05f52b129067","name":"index","fields":{"code":"export {default as CAlertExample} from './CAlert';\r\nexport {default as CBadgeExample} from './CBadge';\r\nexport {default as CButtonExample} from './CButton';\r\nexport {default as CCalloutExample} from './CCallout';\r\nexport {default as CCardExample} from './CCard';\r\nexport {default as CCollapseExample} from './CCollapse';\r\nexport {default as CContainerExample} from './CContainer';\r\nexport {default as CDropdownExample} from './CDropdown';\r\nexport {default as CEmbedExample} from './CEmbed';\r\nexport {default as CFormExample} from './CForm';\r\nexport {default as CImgExample} from './CImg';\r\nexport {default as CJumbotronExample} from './CJumbotron';\r\nexport {default as CLinkExample} from './CLink';\r\nexport {default as CListGroupExample} from './CListGroup';\r\nexport {default as CMediaExample} from './CMedia';\r\nexport {default as CNavExample} from './CNav';\r\nexport {default as CPaginationExample} from './CPagination';\r\nexport {default as CProgressExample} from './CProgress';\r\nexport {default as CSpinnerExample} from './CSpinner';\r\nexport {default as CSwitchExample} from './CSwitch';\r\nexport {default as CTableExample} from './CTableCustom';\r\nexport {default as CPopoverExample} from './CPopover';\r\nexport {default as CTooltipExample} from './CTooltip';\r\nexport {default as CWidgetsExample} from './CWidgets';\r\n"}}]},"index":{"edges":[{"node":{"name":"-Grid","base":"-Grid.md"}},{"node":{"name":"-Layout","base":"-Layout.md"}},{"node":{"name":"-Popper","base":"-Popper.md"}},{"node":{"name":"-Tabs","base":"-Tabs.md"}},{"node":{"name":"-Toast","base":"-Toast.md"}},{"node":{"name":"-Widgets","base":"-Widgets.md"}},{"node":{"name":"CAlert","base":"CAlert.md"}},{"node":{"name":"CBadge","base":"CBadge.md"}},{"node":{"name":"CBreadcrumb","base":"CBreadcrumb.md"}},{"node":{"name":"CButton","base":"CButton.md"}},{"node":{"name":"CCallout","base":"CCallout.md"}},{"node":{"name":"CCard","base":"CCard.md"}},{"node":{"name":"CCarousel","base":"CCarousel.md"}},{"node":{"name":"CCollapse","base":"CCollapse.md"}},{"node":{"name":"CCustomInput","base":"CCustomInput.md"}},{"node":{"name":"CDataTable","base":"CDataTable.md"}},{"node":{"name":"CDropdown","base":"CDropdown.md"}},{"node":{"name":"CEmbed","base":"CEmbed.md"}},{"node":{"name":"CFade","base":"CFade.md"}},{"node":{"name":"CFooter","base":"CFooter.md"}},{"node":{"name":"CForm","base":"CForm.md"}},{"node":{"name":"CHeader","base":"CHeader.md"}},{"node":{"name":"CImg","base":"CImg.md"}},{"node":{"name":"CInput","base":"CInput.md"}},{"node":{"name":"CJumbotron","base":"CJumbotron.md"}},{"node":{"name":"CLabel","base":"CLabel.md"}},{"node":{"name":"CLink","base":"CLink.md"}},{"node":{"name":"CListGroup","base":"CListGroup.md"}},{"node":{"name":"CMedia","base":"CMedia.md"}},{"node":{"name":"CModal","base":"CModal.md"}},{"node":{"name":"CNav","base":"CNav.md"}},{"node":{"name":"CNavbar","base":"CNavbar.md"}},{"node":{"name":"CPagination","base":"CPagination.md"}},{"node":{"name":"CPopover","base":"CPopover.md"}},{"node":{"name":"CProgress","base":"CProgress.md"}},{"node":{"name":"CSidebar","base":"CSidebar.md"}},{"node":{"name":"CSpinner","base":"CSpinner.md"}},{"node":{"name":"CSwitch","base":"CSwitch.md"}},{"node":{"name":"CTable","base":"CTable.md"}},{"node":{"name":"CToggler","base":"CToggler.md"}},{"node":{"name":"CTooltip","base":"CTooltip.md"}}]},"allMarkdownRemark":{"nodes":[{"html":"<h2>CoreUI React 3</h2>\n<p>Welcome to CoreUI 3 Doc.</p>","parent":{"__typename":"File","name":"index","sourceInstanceName":"page"}},{"html":"<h1>Introduction</h1>\n<h2>CoreUI React 3.0 features</h2>\n<ul>\n<li>All components are React hook component (functional components)</li>\n<li>For components with own logic or complex components you can use ‚custom’ prop and build the contnet with related components (sub-components)</li>\n<li>For some complex components prop you can use lighter version &#x3C;component_name>Custom</li>\n<li>For custom components you can define content by yourself using related components</li>\n<li>New context api used</li>\n<li>CoreUI don't depends on Reactstrap</li>\n<li>One naming convention across all components</li>\n<li>InnerRef prop is available for all components</li>\n<li>Default slot has 2 meanings for custom=false (by default) or custom=true</li>\n<li>You can specify additional slots content (if required) with nameSlot prop</li>\n<li>\n<p>For complex components you can use additional parameters like for example for link sub component:</p>\n<ul>\n<li>linkClassname - a classname for inside CLink component</li>\n<li>linkProps - an object with props for inside CLink components</li>\n<li>some of components have additional props from linkProps</li>\n</ul>\n</li>\n</ul>\n<h3>Example of custom component</h3>\n<p>&#x3C;CCard custom> or lightweight version &#x3C;CCardCustom></p>\n<h3>List of Custom Components</h3>\n<p>CBreadcrumbCustom, CCarouselCustom, CCollapseCustom, CDropdownCustom, CTableCustom</p>\n<h2>Complex components</h2>\n<p>Complex components are rendered using additional other CoreUI components.</p>\n<h2>Subcomponents</h2>\n<p>Used only in context of the main component.</p>\n<h3>Example</h3>\n<p>CCard withsubcomponent: CCardBody</p>\n<hr>\n<h2>Helper functions</h2>\n<p>You have access to a list of helper functions.</p>\n<h4>External</h4>\n<hr>\n<h2>CoreUI React Beta</h2>\n<p>Planed changes:</p>\n<ul>\n<li>New CCarousel component code</li>\n</ul>","parent":{"__typename":"File","name":"introduction","sourceInstanceName":"page"}},{"html":"","parent":{"__typename":"File","name":"CLabel","sourceInstanceName":"partCommon"}},{"html":"<p>Popper components.</p>","parent":{"__typename":"File","name":"-Popper","sourceInstanceName":"partCommon"}},{"html":"<p>Grid components.</p>","parent":{"__typename":"File","name":"-Grid","sourceInstanceName":"partCommon"}},{"html":"<p>CoreUI grid components.</p>","parent":{"__typename":"File","name":"-Layout","sourceInstanceName":"partCommon"}},{"html":"<p>Tabs components.</p>","parent":{"__typename":"File","name":"-Tabs","sourceInstanceName":"partCommon"}},{"html":"<p>Notification components.</p>","parent":{"__typename":"File","name":"-Toast","sourceInstanceName":"partCommon"}},{"html":"<p>Set of widgets.</p>","parent":{"__typename":"File","name":"-Widgets","sourceInstanceName":"partCommon"}},{"html":"<p>React alerts give contextual feedback information for common user operations. Component is delivered with a bunch of usable and adjustable alert messages.</p>","parent":{"__typename":"File","name":"CAlert","sourceInstanceName":"partCommon"}},{"html":"<p>React badges are small count and labeling components.</p>","parent":{"__typename":"File","name":"CBadge","sourceInstanceName":"partCommon"}},{"html":"<p>React breadcrumb navigation component which indicates the current location within a navigational hierarchy that automatically adds separators.</p>","parent":{"__typename":"File","name":"CBreadcrumb","sourceInstanceName":"partCommon"}},{"html":"<p>Versatile button component.</p>","parent":{"__typename":"File","name":"CButton","sourceInstanceName":"partCommon"}},{"html":"<p>Simple callout component.</p>","parent":{"__typename":"File","name":"CCallout","sourceInstanceName":"partCommon"}},{"html":"<p>React cards component provide a flexible and extensible container for displaying content. React cards are delivered with a bunch of variants and options.</p>","parent":{"__typename":"File","name":"CCard","sourceInstanceName":"partCommon"}},{"html":"<p>React carousel is a slideshow component for cycling through elements.</p>","parent":{"__typename":"File","name":"CCarousel","sourceInstanceName":"partCommon"}},{"html":"<p>React collapse component toggles the visibility of content across your project with a few classes and some scripts. Useful for a large amount of content.</p>","parent":{"__typename":"File","name":"CCollapse","sourceInstanceName":"partCommon"}},{"html":"<p>Custom input.</p>","parent":{"__typename":"File","name":"CCustomInput","sourceInstanceName":"partCommon"}},{"html":"<p>Data table.</p>","parent":{"__typename":"File","name":"CDataTable","sourceInstanceName":"partCommon"}},{"html":"<p>React dropdown component allows you to toggle contextual overlays for displaying lists, links, and more html elements.</p>","parent":{"__typename":"File","name":"CDropdown","sourceInstanceName":"partCommon"}},{"html":"<p>Create responsive video or slideshow embeds based on the width of the parent by creating an intrinsic ratio that scales on any device.</p>","parent":{"__typename":"File","name":"CEmbed","sourceInstanceName":"partCommon"}},{"html":"<p>Fade effect.</p>","parent":{"__typename":"File","name":"CFade","sourceInstanceName":"partCommon"}},{"html":"<p>CoreUI grid component.</p>","parent":{"__typename":"File","name":"CFooter","sourceInstanceName":"partCommon"}},{"html":"<p>React forms support the following form controls: input, textarea, button, checkbox, radio, and select. Learn how to build various types of form layouts such as vertical form, horizontal form and inline from quickly and easily with the CoreUI.</p>","parent":{"__typename":"File","name":"CForm","sourceInstanceName":"partCommon"}},{"html":"<p>CoreUI grid component.</p>","parent":{"__typename":"File","name":"CHeader","sourceInstanceName":"partCommon"}},{"html":"<p>Image component.</p>","parent":{"__typename":"File","name":"CImg","sourceInstanceName":"partCommon"}},{"html":"<p>Input component.</p>","parent":{"__typename":"File","name":"CInput","sourceInstanceName":"partCommon"}},{"html":"<p>React Jumbotron component indicates a big grey box for showcasing hero unit style content.</p>\n<p>A lightweight, flexible React component that can optionally reach the entire viewport to showcase essential marketing information on your site.</p>","parent":{"__typename":"File","name":"CJumbotron","sourceInstanceName":"partCommon"}},{"html":"<p>React link component.</p>","parent":{"__typename":"File","name":"CLink","sourceInstanceName":"partCommon"}},{"html":"<p>React List Groups allows displaying are a series of content.</p>","parent":{"__typename":"File","name":"CListGroup","sourceInstanceName":"partCommon"}},{"html":"<p>Documentation and examples for React's media object to construct highly repetitive components like blog comments, tweets, and the like.</p>","parent":{"__typename":"File","name":"CMedia","sourceInstanceName":"partCommon"}},{"html":"<p>Modal window component.</p>","parent":{"__typename":"File","name":"CModal","sourceInstanceName":"partCommon"}},{"html":"<p>React Nav component allows to create simple navigation. Learn how to use React Nav to quickly and easily create elegant and flexible navs.</p>","parent":{"__typename":"File","name":"CNav","sourceInstanceName":"partCommon"}},{"html":"<p>Documentation and examples for React's powerful, responsive navigation header, the navbar. Includes support for branding, navigation, and more, including support for our collapse plugin.</p>","parent":{"__typename":"File","name":"CNavbar","sourceInstanceName":"partCommon"}},{"html":"<p>React pagination component consists of button-like styled links, that are arranged side by side in a horizontal list. Learn how to create nice looking pagination to navigate through pages easily.</p>","parent":{"__typename":"File","name":"CPagination","sourceInstanceName":"partCommon"}},{"html":"<p>React popovers component to adding iPhone and iPad like popovers to any element on your page. </p>","parent":{"__typename":"File","name":"CPopover","sourceInstanceName":"partCommon"}},{"html":"<p>Progress bars component can be used for showing the progress of a task or action to the users. Progress supports for stacked bars, animated backgrounds, and text labels.</p>","parent":{"__typename":"File","name":"CProgress","sourceInstanceName":"partCommon"}},{"html":"<p>CoreUI grid component.</p>","parent":{"__typename":"File","name":"CSidebar","sourceInstanceName":"partCommon"}},{"html":"<p>Indicate the loading state of a component or page with React spinners.</p>","parent":{"__typename":"File","name":"CSpinner","sourceInstanceName":"partCommon"}},{"html":"<p>React switch component.</p>","parent":{"__typename":"File","name":"CSwitch","sourceInstanceName":"partCommon"}},{"html":"<p>Wrapper component for toggling button. Use 'inNavbar'/'inHeader' styling or pass your custom styling.</p>","parent":{"__typename":"File","name":"CToggler","sourceInstanceName":"partCommon"}},{"html":"<p>React table component.</p>","parent":{"__typename":"File","name":"CTable","sourceInstanceName":"partCommon"}},{"html":"<p>CTooltip is directive, which display tooltip over element, built on top of tooltip.js (popper.js) library. Tooltip is triggered on hover.</p>","parent":{"__typename":"File","name":"CTooltip","sourceInstanceName":"partCommon"}},{"html":"","parent":{"__typename":"File","name":"CFade","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Styling determined by color property</li>\n<li>Optional pill shape</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CBadge","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CButton","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Temporary or constant visibility</li>\n<li>Optionally dismissible by user</li>\n<li>Optional fading effect</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CAlert","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Optional customization of styles</li>\n<li>Ready to implement React-router based</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CBreadcrumb","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CCallout","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Slides to next item in intervals</li>\n<li>Item could be an image or other content</li>\n<li>Controlled by arrows and indicators</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>yes</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CCarousel","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Wrapper components covering bootstrap card components</li>\n<li>Style components easily by props</li>\n<li>Custom card-accents styling</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CCard","sourceInstanceName":"partReact"}},{"html":"<p>Lighter version of CCarousel.</p>","parent":{"__typename":"File","name":"CCarouselCustom","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CChartsd","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CCol","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Collapse animation</li>\n<li>Optional duration and transition effect</li>\n<li>Adapted to use in navbars</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>toggler prop for custom=false</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CCollapse","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CContainer","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<p>All features are optional:</p>\n<ul>\n<li>Filter items by one or all columns,</li>\n<li>Sort items by column,</li>\n<li>Integrated with CPagination component by default,</li>\n<li>Customize style of specific rows, columns and cells,</li>\n<li>Customize display of columns (headers, filter, and items separately) by scoped slots,</li>\n<li>Load with initial filters and sorter state,</li>\n<li>Loading state visualization</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CDataTable","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Popper.js based toggleable menu</li>\n<li>Toggling mechanism managed by default</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h3>CDropdownItem</h3>\n<ul>\n<li>header - render as menu header</li>\n<li>divider - render as menu divider</li>\n</ul>\n<h3>CDropdownMenu</h3>\n<h3>CDropdownToggle</h3>\n<ul>\n<li>nav - ...</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CDropdown","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Simple wrapper for external source videos</li>\n<li>Optional aspect ratios</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h3>CEmbedObject</h3>\n<h4>API</h4>\n<ul>\n<li>...</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CEmbed","sourceInstanceName":"partReact"}},{"html":"<p>Check CFooter component for more details.</p>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CFooter","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>All-in-one input components</li>\n<li>Components share similar API</li>\n<li>Use as basic or advanced customized inputs</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CForm","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Building standard bootstrap grid structure with ease</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>Related Components</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CGrid","sourceInstanceName":"partReact"}},{"html":"<p>Check CHeader component for more details.</p>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CHeader","sourceInstanceName":"partReact"}},{"html":"<ul>\n<li>CIcon svg (vars) component</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CIcon","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Easy styling,</li>\n<li>Show coloured or transparent blank image (svg) if source of image is not defined. Component can be used as blank svg image permanently or until source of image is passed.</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CImg","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CInput","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Easily customizable styles</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CJumbotron","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Linking to external sources or router-links</li>\n<li>If link is empty, component prevents scrolling up the page after clicking</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CLink","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Automically detect if item is actionable</li>\n<li>If 'to' or 'href' prop is passed to CListGroupItem it gains\nfunctionality of\n<CLink to=\"./Link.html\">CLink</CLink></li>\n</ul>\n<p>component -  it gains all props and options of CLink component.</p>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CListGroup","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Aside element on the left or right side,</li>\n<li>Aside element have CImg component functionality by default</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CMedia","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Many customization options</li>\n<li>Use with default setup or customize modal by slots</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>Related Components</h2>\n<ul>\n<li>CModalHeader</li>\n<li>CModalBody</li>\n<li>CModalFooter</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CModal","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CNavbar","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Easily customizable</li>\n<li>Compatible with CDropdown component</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>\n<hr>\n<h3>CNavItem</h3>\n<p>Render CNavLink inside by default.</p>","parent":{"__typename":"File","name":"CNav","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Determine behavior, style and functionality of pagination</li>\n<li>Smart automatic items generation</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CPagination","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CPopover","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>Related Components</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CPopperTargetHelper","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>Related Components</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CPopperContent","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Single or splitted progress bar</li>\n<li>Diffrent widths heights and styles available</li>\n<li>Concise syntax for single bar</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CProgress","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CRow","sourceInstanceName":"partReact"}},{"html":"<p>Check CSidebar component for more details.</p>\n<h2>DOM communication</h2>\n<ul>\n<li>no</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CSidebar","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Many styles and sizes</li>\n<li>Checkbox or radio input mode</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CSwitch","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Spinning and grow effect</li>\n<li>Fully customizable size</li>\n<li>Screen readers friendly</li>\n</ul>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CSpinner","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CTable","sourceInstanceName":"partReact"}},{"html":"<h2>Features</h2>\n<ul>\n<li>Simple to use</li>\n<li>Customizable styling</li>\n<li>Optional fading effect when switching the active tab</li>\n</ul>\n<p>CTab and CTabs components are tightly coupled which means you using them together is required, for component to work.</p>\n<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>Related Components</h2>\n<ul>\n<li>CTabContent</li>\n<li>CTabPane</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CTabs","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CToast","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CToggler","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CTooltip","sourceInstanceName":"partReact"}},{"html":"<h2>DOM communication</h2>\n<ul>\n<li>No</li>\n</ul>\n<h2>SSR</h2>\n<ul>\n<li>Compatible</li>\n</ul>","parent":{"__typename":"File","name":"CWidgets","sourceInstanceName":"partReact"}},{"html":"","parent":{"__typename":"File","name":"README","sourceInstanceName":"js"}}]}},"pageContext":{"slug":"/CModal/"}}}