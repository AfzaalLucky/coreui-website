{"version":3,"sources":["views/forms/validation-forms/ValidationForms.js"],"names":["validationSchema","values","Yup","shape","firstName","min","required","lastName","userName","email","password","matches","confirmPassword","oneOf","accept","test","value","getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","initialValues","onSubmit","setSubmitting","setErrors","setTimeout","alert","JSON","stringify","validateForm","formName","hasError","form","document","forms","i","length","name","focus","findFirstError","fieldName","Boolean","ValidationForms","href","className","target","rel","validate","getValidationSchema","validateSync","abortEarly","touched","handleChange","status","dirty","handleBlur","handleSubmit","isSubmitting","isValid","handleReset","setTouched","lg","noValidate","htmlFor","type","id","placeholder","autoComplete","valid","invalid","autoFocus","onChange","onBlur","md","variant","custom","color","disabled","onClick","touchAll"],"mappings":"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","file":"static/js/58.15fba7f1.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CCol,\r\n  CForm,\r\n  CInvalidFeedback,\r\n  CInputCheckbox,\r\n  CFormGroup,\r\n  CLabel,\r\n  CInput,\r\n  CRow\r\n} from '@coreui/react'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = function (values) {\r\n  return Yup.object().shape({\r\n    firstName: Yup.string()\r\n    .min(2, `First name has to be at least 2 characters`)\r\n    .required('First name is required'),\r\n    lastName: Yup.string()\r\n    .min(1, `Last name has to be at least 1 character`)\r\n    .required('Last name is required'),\r\n    userName: Yup.string()\r\n    .min(5, `Username has to be at least 5 characters`)\r\n    .required('Username is required'),\r\n    email: Yup.string()\r\n    .email('Invalid email address')\r\n    .required('Email is required!'),\r\n    password: Yup.string()\r\n    .min(6, `Password has to be at least ${6} characters!`)\r\n    .matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n')\r\n    .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n    .oneOf([values.password], 'Passwords must match')\r\n    .required('Password confirmation is required'),\r\n    accept: Yup.bool()\r\n    .required('* required')\r\n    .test('accept', 'You have to accept our Terms and Conditions!', value => value === true),\r\n  })\r\n}\r\n\r\nconst validate = (getValidationSchema) => {\r\n  return (values) => {\r\n    const validationSchema = getValidationSchema(values)\r\n    try {\r\n      validationSchema.validateSync(values, { abortEarly: false })\r\n      return {}\r\n    } catch (error) {\r\n      return getErrorsFromValidationError(error)\r\n    }\r\n  }\r\n}\r\n\r\nconst getErrorsFromValidationError = (validationError) => {\r\n  const FIRST_ERROR = 0\r\n  return validationError.inner.reduce((errors, error) => {\r\n    return {\r\n      ...errors,\r\n      [error.path]: error.errors[FIRST_ERROR],\r\n    }\r\n  }, {})\r\n}\r\n\r\nconst initialValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  userName: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n  confirmPassword: \"\",\r\n  accept: false\r\n}\r\n\r\nconst onSubmit = (values, { setSubmitting, setErrors }) => {\r\n  setTimeout(() => {\r\n    alert(JSON.stringify(values, null, 2))\r\n    // console.log('User has been successfully saved!', values)\r\n    setSubmitting(false)\r\n  }, 2000)\r\n}\r\n\r\nconst findFirstError = (formName, hasError) => {\r\n  const form = document.forms[formName]\r\n  for (let i = 0; i < form.length; i++) {\r\n    if (hasError(form[i].name)) {\r\n      form[i].focus()\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nconst validateForm = (errors) => {\r\n  findFirstError('simpleForm', (fieldName) => {\r\n    return Boolean(errors[fieldName])\r\n  })\r\n}\r\n\r\nconst touchAll = (setTouched, errors) => {\r\n  setTouched({\r\n    firstName: true,\r\n    lastName: true,\r\n    userName: true,\r\n    email: true,\r\n    password: true,\r\n    confirmPassword: true,\r\n    accept: true\r\n  })\r\n  validateForm(errors)\r\n}\r\n\r\nconst ValidationForms = () =>  {\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        Form Validation\r\n        <a href=\"https://coreui.io/pro/react/\" className=\"badge badge-danger ml-1\" target=\"_blank\" rel=\"noreferrer noopener\">CoreUI Pro Component</a>\r\n        <div className=\"card-header-actions\">\r\n          <a className=\"card-header-action\" href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noreferrer noopener\">\r\n            <small className=\"text-muted\">docs</small>\r\n          </a>\r\n        </div>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <a href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noreferrer noopener\">Formik</a> <cite>Build forms in React, without the tears</cite> with <a href=\"https://github.com/jquense/yup\" target=\"_blank\" rel=\"noreferrer noopener\">Yup</a> <cite>Dead simple Object schema\r\n        validation</cite>\r\n        <hr />\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validate={validate(validationSchema)}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {\r\n            ({\r\n              values,\r\n              errors,\r\n              touched,\r\n              status,\r\n              dirty,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              isValid,\r\n              handleReset,\r\n              setTouched\r\n            }) => (\r\n              <CRow>\r\n                <CCol lg=\"6\">\r\n                  <CForm onSubmit={handleSubmit} noValidate name='simpleForm'>\r\n                    <CFormGroup>\r\n                      <CLabel htmlFor=\"firstName\">First Name</CLabel>\r\n                      <CInput type=\"text\"\r\n                              name=\"firstName\"\r\n                              id=\"firstName\"\r\n                              placeholder=\"First Name\"\r\n                              autoComplete=\"given-name\"\r\n                              valid={!errors.firstName}\r\n                              invalid={touched.firstName && !!errors.firstName}\r\n                              autoFocus={true}\r\n                              required\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              value={values.firstName} />\r\n                      <CInvalidFeedback>{errors.firstName}</CInvalidFeedback>\r\n                    </CFormGroup>\r\n                    <CFormGroup>\r\n                      <CLabel htmlFor=\"lastName\">Last Name</CLabel>\r\n                      <CInput type=\"text\"\r\n                              name=\"lastName\"\r\n                              id=\"lastName\"\r\n                              placeholder=\"Last Name\"\r\n                              autoComplete=\"family-name\"\r\n                              valid={!errors.lastName}\r\n                              invalid={touched.lastName && !!errors.lastName}\r\n                              required\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              value={values.lastName} />\r\n                      <CInvalidFeedback>{errors.lastName}</CInvalidFeedback>\r\n                    </CFormGroup>\r\n                    <CFormGroup>\r\n                      <CLabel htmlFor=\"userName\">User Name</CLabel>\r\n                      <CInput type=\"text\"\r\n                              name=\"userName\"\r\n                              id=\"userName\"\r\n                              placeholder=\"User Name\"\r\n                              autoComplete=\"username\"\r\n                              valid={!errors.userName}\r\n                              invalid={touched.userName && !!errors.userName}\r\n                              required\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              value={values.userName} />\r\n                      <CInvalidFeedback>{errors.userName}</CInvalidFeedback>\r\n                    </CFormGroup>\r\n                    <CFormGroup>\r\n                      <CLabel htmlFor=\"email\">Email</CLabel>\r\n                      <CInput type=\"email\"\r\n                              name=\"email\"\r\n                              id=\"email\"\r\n                              placeholder=\"Email\"\r\n                              autoComplete=\"email\"\r\n                              valid={!errors.email}\r\n                              invalid={touched.email && !!errors.email}\r\n                              required\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              value={values.email} />\r\n                      <CInvalidFeedback>{errors.email}</CInvalidFeedback>\r\n                    </CFormGroup>\r\n                    <CRow>\r\n                      <CCol md={6}>\r\n                        <CFormGroup>\r\n                          <CLabel htmlFor=\"password\">Password</CLabel>\r\n                          <CInput type=\"password\"\r\n                                  name=\"password\"\r\n                                  id=\"password\"\r\n                                  placeholder=\"Password\"\r\n                                  autoComplete=\"new-password\"\r\n                                  valid={!errors.password}\r\n                                  invalid={touched.password && !!errors.password}\r\n                                  required\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                  value={values.password} />\r\n                          {/*<CInvalidFeedback>Required password containing at least: number, uppercase and lowercase letter, 8 characters</CInvalidFeedback>*/}\r\n                          <CInvalidFeedback>{errors.password}</CInvalidFeedback>\r\n                        </CFormGroup>\r\n                      </CCol>\r\n                      <CCol md={6}>\r\n                        <CFormGroup>\r\n                          <CLabel htmlFor=\"confirmPassword\">Password</CLabel>\r\n                          <CInput type=\"password\"\r\n                                  name=\"confirmPassword\"\r\n                                  id=\"confirmPassword\"\r\n                                  placeholder=\"Confirm password\"\r\n                                  autoComplete=\"new-password\"\r\n                                  valid={!errors.confirmPassword}\r\n                                  invalid={touched.confirmPassword && !!errors.confirmPassword}\r\n                                  required\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                  value={values.confirmPassword} />\r\n                          <CInvalidFeedback>{errors.confirmPassword}</CInvalidFeedback>\r\n                        </CFormGroup>\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CFormGroup variant=\"custom-checkbox\" className=\"pb-3\">\r\n                      <CInputCheckbox\r\n                        custom\r\n                        id=\"accept\"\r\n                        required\r\n                        valid={!errors.accept}\r\n                        invalid={touched.accept && !!errors.accept}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur} \r\n                      />\r\n                      <CLabel variant=\"custom-checkbox\" htmlFor=\"accept\">\r\n                        I accept the terms of use\r\n                      </CLabel>\r\n                      <CInvalidFeedback>{errors.accept}</CInvalidFeedback>\r\n                    </CFormGroup>\r\n                    <CFormGroup>\r\n                      <CButton type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</CButton>\r\n                      <CButton type=\"button\" color=\"success\" className=\"mr-1\" onClick={() => touchAll(setTouched, errors)}  disabled={isValid}>Validate</CButton>\r\n                      <CButton type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={handleReset}>Reset</CButton>\r\n                    </CFormGroup>\r\n                  </CForm>\r\n                </CCol>\r\n                <CCol lg=\"6\">\r\n                  <CCard color={isValid ? 'gradient-info' : 'gradient-secondary'}>\r\n                    <CCardBody>\r\n                      <pre>values: {JSON.stringify(values, null, 2)}</pre>\r\n                      <pre>errors: {JSON.stringify(errors, null, 2)}</pre>\r\n                      <pre>touched: {JSON.stringify(touched, null, 2)}</pre>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </CCol>\r\n              </CRow>\r\n            )}\r\n        </Formik>\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default ValidationForms\r\n"],"sourceRoot":""}