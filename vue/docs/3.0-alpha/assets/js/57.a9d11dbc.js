(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{487:function(e,t,o){"use strict";o.r(t);var n=o(0),i=Object(n.a)({},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("Api",{attrs:{props:[["fixed","false","Boolean","Sets footer position to fixed."],["breakpoint","'lg'","String","slot_breakpoint"],["minimize","false","Boolean","Sets minimized state. You can track the curent state by .sync modifier."],["show","true","Boolean","Sets state of sidebar on non-mobile devices. You can track the curent state by .sync modifier."],["showOnMobile","false","Boolean","Sets state of sidebar on mobile devices. You can track the curent state by .sync modifier."],["noHideOnMobileClick","false","Boolean","Disables closing sidebar trigger, enabled by default in mobile mode. Trigger works on clicking on any link ('a' tag) inside sidebar wrapper and on click outside the sidebar (except clicking on CSidebarToggler component)."],["light","false","Boolean","Sets sidebar mode to light."],["dropdownStateOnRouteChange","'openActive'","String","slot_dropdown"]],slots:[["default","undefined","Content of the sidebar."]],events:[["c-sidebar-open-state/ c-sidebar-mobileOpen-state/ c-sidebar-minimized-state","true/false","slot_root-state"],["c-sidebar-mobile-state","true/false","slot_mobile-state"],["update:open/ update:mobileOpen/ update:minimized","true/false","slot_state"]]},scopedSlots:e._u([{key:"slot_breakpoint",fn:function(){return[e._v("\n    Breakpoint of the transition between mobile and non-mobile mode.\n    Valid values: 'sm', 'md', 'lg', 'xl'.\n  ")]},proxy:!0},{key:"slot_dropdown",fn:function(){return[e._v("\n    Define CSidebarNavDropown components behavior on route change.\n    CSidebarNavDropdown route state is active, if its 'route' prop \n    is included in current vue-router route.\n    Valid values: \n      "),o("ul",[o("li",[e._v("openActive - opens dropdown when route state is active ")]),e._v(" "),o("li",[e._v("close - closes every dropdown on route change")]),e._v(" "),o("li",[e._v("closeInactive - closes every inactive dropdown on route change, opens dropdown when route state is active")]),e._v(" "),o("li",[e._v("noAction - no automatic dropdowns toggling")])])]},proxy:!0},{key:"slot_mobile-state",fn:function(){return[e._v("\n    Event emitted on root. Value informs about sidebar state:\n    "),o("ul",[o("li",[e._v("true - sidebar is in mobile mode.")]),e._v(" "),o("li",[e._v("false - sidebar is in desktop mode.")])])]},proxy:!0},{key:"slot_state",fn:function(){return[e._v("\n    Events that are emitting state of open/mobileOpen/minimized props on change.\n    Events can be used to track state of props, by .sync modifier.     \n  ")]},proxy:!0},{key:"slot_root-state",fn:function(){return[e._v("\n    Events that, are emitting state of open/mobileOpen/minimized props on change. \n    Events emitted on root. \n  ")]},proxy:!0}])})},[],!1,null,null,null);t.default=i.exports}}]);