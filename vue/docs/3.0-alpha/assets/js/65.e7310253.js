(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{476:function(e,n,t){"use strict";t.r(n);var i=t(0),o=Object(i.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("Api",{attrs:{props:[["variant","undefined","String","Color variant of the component."],["outline","undefined","String /Boolean","Valid values: false, true, 'alt'."],["size","undefined","String","Size of the switch. Valid values: 'sm','lg'."],["shape","undefined","String","Shape of the switch. Valid values: '3d','pill'."],["checked","false","Boolean /String /Number","slot_checked"],["trueValue, falseValue","undefined","String /Number","slot_trueValue"],["labelOn, labelOff","undefined","String","slot_label"],["type","'checkbox'","String","HTML input type. Valid values: 'checkbox', 'radio'. If set to 'radio' component mechanism changes (see checked prop)."],["value","undefined","String /Number /Boolean","HTML input value attribute. When 'type' prop equals 'radio', value will be compared to 'checked' prop, and if identical radio will be checked."],["id, name, disabled, required, other input attributes","undefined","HTML attributes","HTML attributes (not props) that could be passed to input."]],events:[["update:checked","state, event object","Triggered after clicking on the switch. Set .sync modifier on checked prop to receive changes automatically. Returned state varies depending on 'checked' and 'type' props (see 'checked' prop desription)"]]},scopedSlots:e._u([{key:"slot_label",fn:function(){return[e._v("\n    Optionally set text labels on switch (you can pass one or both labels)\n    "),t("CodeBlock",{attrs:{code:'<CSwitch dataOn="\\u2713" dataOff="\\u2715"/>',language:"html"}})]},proxy:!0},{key:"slot_checked",fn:function(){return[e._v("\n    Prop which sets state of element. Set .sync modifier to receive state changes.\n    "),t("br"),e._v(" "),t("br"),e._v(" "),t("h5",[e._v("Checking mechanism")]),e._v("\n    Input checking mechanism varies depending on 'type' and 'check' props:\n    "),t("ul",[t("li",[t("ul",[e._v("\n          For type 'checkbox':\n          "),t("li",[e._v("Boolean value: input is checked if value is true")]),e._v(" "),t("li",[e._v("String/Number value: if 'checked' prop is identical to 'trueValue' prop input is checked")])])]),e._v(" "),t("li",[t("ul",[e._v("\n          For type 'radio':\n          "),t("li",[e._v("String/Number/Boolean value: if 'checked' prop is identical to 'value' input is checked")])])])]),e._v("\n\n    Two way data binding is available through .sync modifier on checked prop (by 'update:checked' event). Received value:\n    "),t("ul",[t("li",[e._v("\n        for type 'checkbox' - boolean value or 'trueValue'/'falseValue' if defined\n      ")]),e._v(" "),t("li",[e._v("\n        for type 'radio' - 'value' prop\n      ")])])]},proxy:!0},{key:"slot_trueValue",fn:function(){return[t("b",[e._v("Props work only if type equals checkbox.")]),t("br"),e._v("\n      Optional props to use when you want to operate on custom checkbox values instead of booleans. "),t("br"),t("br"),e._v("\n\n      Checking mechanism is described in 'checked' prop\n  ")]},proxy:!0}])})},[],!1,null,null,null);n.default=o.exports}}]);